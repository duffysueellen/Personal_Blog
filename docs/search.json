[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!"
  },
  {
    "objectID": "posts/my-new-post/index.html",
    "href": "posts/my-new-post/index.html",
    "title": "Future Post",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "",
    "text": "Network Block Modeling - Patients\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nblock_model\n\n\n\n\n\n\n\n\n\n\n\nMay 3, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nNetwork Exploration\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nData Cleaning, Exploration, and Network Analysis\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 29, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nNetwork Block Modeling - Geographical Comparisson\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nblock_model\n\n\n\n\n\n\n\n\n\n\n\nApr 26, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nNetwork Block Modeling - Geographical Comparisson\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nblock_model\n\n\n\n\n\n\n\n\n\n\n\nApr 26, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nNetwork Block Modeling - Geographical Comparisson\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nblock_model\n\n\n\n\n\n\n\n\n\n\n\nApr 26, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nNetwork Block Modeling - Providers\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nblock_model\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nNetwork Block Modeling - Providers\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nblock_model\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nNetwork Block Modeling - Patients\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nblock_model\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nNetwork Exploration\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nData Cleaning, Exploration, and Network Analysis\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 20, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/Post_One/post_1.html",
    "href": "posts/Post_One/post_1.html",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "",
    "text": "Data for this project were taken from Synthetic Mass, which creates Synthetic patient data from Synthea.\nWhile a whole host of datasets are available within each download, I will focus this project on three datasets: patients.csv, providers.csv, and encounters.csv.\nThis post will primarily focus on data cleaning and data exploration with some exploration into social network analysis through transforming the data into an incidence matrix and plotting some attributes.\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(statnet)\nlibrary(ggplot2)\nlibrary(patchwork)"
  },
  {
    "objectID": "posts/Post_One/post_1.html#patient-data",
    "href": "posts/Post_One/post_1.html#patient-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "PATIENT DATA",
    "text": "PATIENT DATA\nThe following table is the data available in the patient dataset.\n\npatients &lt;- read_csv(\"synthea_sample_data_csv_latest/patients.csv\")\n\nRows: 121 Columns: 27\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (19): Id, SSN, DRIVERS, PASSPORT, PREFIX, FIRST, LAST, SUFFIX, MAIDEN, ...\ndbl   (6): FIPS, LAT, LON, HEALTHCARE_EXPENSES, HEALTHCARE_COVERAGE, INCOME\ndate  (2): BIRTHDATE, DEATHDATE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(patients)\n\n# A tibble: 6 × 27\n  Id      BIRTHDATE  DEATHDATE  SSN   DRIVERS PASSPORT PREFIX FIRST LAST  SUFFIX\n  &lt;chr&gt;   &lt;date&gt;     &lt;date&gt;     &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n1 b573d4… 1988-02-12 2004-12-30 999-… S99986… &lt;NA&gt;     &lt;NA&gt;   Avri… Olso… &lt;NA&gt;  \n2 270357… 1999-03-13 NA         999-… S99998… X640979… Ms.    Norm… Lang… &lt;NA&gt;  \n3 35589a… 2003-02-05 NA         999-… S99996… X735788… Ms.    Pegg… Eich… &lt;NA&gt;  \n4 d46186… 1986-11-07 NA         999-… S99939… X782935… Mrs.   Ashl… Will… &lt;NA&gt;  \n5 983105… 1999-05-21 NA         999-… S99973… X519829… Ms.    Chri… Anku… &lt;NA&gt;  \n6 54ac07… 1988-02-12 NA         999-… S99995… X507824… Mrs.   Dion… O'Ko… &lt;NA&gt;  \n# ℹ 17 more variables: MAIDEN &lt;chr&gt;, MARITAL &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ETHNICITY &lt;chr&gt;, GENDER &lt;chr&gt;, BIRTHPLACE &lt;chr&gt;, ADDRESS &lt;chr&gt;, CITY &lt;chr&gt;,\n#   STATE &lt;chr&gt;, COUNTY &lt;chr&gt;, FIPS &lt;dbl&gt;, ZIP &lt;chr&gt;, LAT &lt;dbl&gt;, LON &lt;dbl&gt;,\n#   HEALTHCARE_EXPENSES &lt;dbl&gt;, HEALTHCARE_COVERAGE &lt;dbl&gt;, INCOME &lt;dbl&gt;\n\n\n\nstr(patients)\n\nspc_tbl_ [121 × 27] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Id                 : chr [1:121] \"b573d409-cfaf-c585-a25b-e9d4cf510bd3\" \"2703570e-f634-d4cc-13db-2ae14e19ae59\" \"35589a76-2a97-0a89-8c2d-56defc8627af\" \"d46186a3-507c-0b22-1bfc-1f88bd7cbd7d\" ...\n $ BIRTHDATE          : Date[1:121], format: \"1988-02-12\" \"1999-03-13\" ...\n $ DEATHDATE          : Date[1:121], format: \"2004-12-30\" NA ...\n $ SSN                : chr [1:121] \"999-97-2089\" \"999-76-8207\" \"999-64-2625\" \"999-67-4853\" ...\n $ DRIVERS            : chr [1:121] \"S99986968\" \"S99998444\" \"S99996738\" \"S99939817\" ...\n $ PASSPORT           : chr [1:121] NA \"X64097979X\" \"X7357887X\" \"X78293510X\" ...\n $ PREFIX             : chr [1:121] NA \"Ms.\" \"Ms.\" \"Mrs.\" ...\n $ FIRST              : chr [1:121] \"Avril120\" \"Norma469\" \"Peggie783\" \"Ashlie138\" ...\n $ LAST               : chr [1:121] \"Olson653\" \"Langosh790\" \"Eichmann909\" \"Williamson769\" ...\n $ SUFFIX             : chr [1:121] NA NA NA NA ...\n $ MAIDEN             : chr [1:121] NA NA NA \"Cummerata161\" ...\n $ MARITAL            : chr [1:121] NA NA NA \"M\" ...\n $ RACE               : chr [1:121] \"white\" \"white\" \"white\" \"white\" ...\n $ ETHNICITY          : chr [1:121] \"nonhispanic\" \"nonhispanic\" \"nonhispanic\" \"nonhispanic\" ...\n $ GENDER             : chr [1:121] \"F\" \"F\" \"F\" \"F\" ...\n $ BIRTHPLACE         : chr [1:121] \"Quincy  Massachusetts  US\" \"Somerville  Massachusetts  US\" \"Pittsfield  Massachusetts  US\" \"Salem  Massachusetts  US\" ...\n $ ADDRESS            : chr [1:121] \"590 Kuhic Frontage road\" \"525 Gleason Burg Suite 75\" \"230 Ratke Neck Suite 55\" \"355 Eichmann Underpass\" ...\n $ CITY               : chr [1:121] \"Newton\" \"Bridgewater\" \"Walpole\" \"Lexington\" ...\n $ STATE              : chr [1:121] \"Massachusetts\" \"Massachusetts\" \"Massachusetts\" \"Massachusetts\" ...\n $ COUNTY             : chr [1:121] \"Middlesex County\" \"Plymouth County\" \"Norfolk County\" \"Middlesex County\" ...\n $ FIPS               : num [1:121] 25017 25023 25021 25017 25017 ...\n $ ZIP                : chr [1:121] \"02461\" \"02324\" \"02081\" \"02421\" ...\n $ LAT                : num [1:121] 42.4 42 42.1 42.4 42.3 ...\n $ LON                : num [1:121] -71.2 -71 -71.2 -71.2 -71.5 ...\n $ HEALTHCARE_EXPENSES: num [1:121] 31150 50725 65580 162538 141345 ...\n $ HEALTHCARE_COVERAGE: num [1:121] 129135 100008 32578 809077 282706 ...\n $ INCOME             : num [1:121] 482269 190464 78997 6472 141475 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Id = col_character(),\n  ..   BIRTHDATE = col_date(format = \"\"),\n  ..   DEATHDATE = col_date(format = \"\"),\n  ..   SSN = col_character(),\n  ..   DRIVERS = col_character(),\n  ..   PASSPORT = col_character(),\n  ..   PREFIX = col_character(),\n  ..   FIRST = col_character(),\n  ..   LAST = col_character(),\n  ..   SUFFIX = col_character(),\n  ..   MAIDEN = col_character(),\n  ..   MARITAL = col_character(),\n  ..   RACE = col_character(),\n  ..   ETHNICITY = col_character(),\n  ..   GENDER = col_character(),\n  ..   BIRTHPLACE = col_character(),\n  ..   ADDRESS = col_character(),\n  ..   CITY = col_character(),\n  ..   STATE = col_character(),\n  ..   COUNTY = col_character(),\n  ..   FIPS = col_double(),\n  ..   ZIP = col_character(),\n  ..   LAT = col_double(),\n  ..   LON = col_double(),\n  ..   HEALTHCARE_EXPENSES = col_double(),\n  ..   HEALTHCARE_COVERAGE = col_double(),\n  ..   INCOME = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nsummary(patients)\n\n      Id              BIRTHDATE            DEATHDATE         \n Length:121         Min.   :1915-06-30   Min.   :1974-12-14  \n Class :character   1st Qu.:1959-04-12   1st Qu.:2004-04-13  \n Mode  :character   Median :1983-05-26   Median :2010-05-15  \n                    Mean   :1979-08-14   Mean   :2008-12-31  \n                    3rd Qu.:1999-09-28   3rd Qu.:2019-12-16  \n                    Max.   :2022-08-22   Max.   :2023-10-05  \n                                         NA's   :100         \n     SSN              DRIVERS            PASSPORT            PREFIX         \n Length:121         Length:121         Length:121         Length:121        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    FIRST               LAST              SUFFIX             MAIDEN         \n Length:121         Length:121         Length:121         Length:121        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   MARITAL              RACE            ETHNICITY            GENDER         \n Length:121         Length:121         Length:121         Length:121        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n  BIRTHPLACE          ADDRESS              CITY              STATE          \n Length:121         Length:121         Length:121         Length:121        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    COUNTY               FIPS           ZIP                 LAT       \n Length:121         Min.   :25001   Length:121         Min.   :41.56  \n Class :character   1st Qu.:25014   Class :character   1st Qu.:42.15  \n Mode  :character   Median :25017   Mode  :character   Median :42.28  \n                    Mean   :25018                      Mean   :42.24  \n                    3rd Qu.:25025                      3rd Qu.:42.40  \n                    Max.   :25027                      Max.   :42.77  \n                    NA's   :19                                        \n      LON         HEALTHCARE_EXPENSES HEALTHCARE_COVERAGE     INCOME      \n Min.   :-73.26   Min.   :    500     Min.   :      0     Min.   :  3365  \n 1st Qu.:-71.51   1st Qu.:  21279     1st Qu.:  23029     1st Qu.: 32577  \n Median :-71.13   Median :  65580     Median : 165466     Median : 71082  \n Mean   :-71.27   Mean   : 166163     Mean   : 409297     Mean   :134519  \n 3rd Qu.:-71.01   3rd Qu.: 221068     3rd Qu.: 679128     3rd Qu.:135462  \n Max.   :-70.12   Max.   :1547205     Max.   :1955909     Max.   :931642  \n                                                                          \n\n\n\n#create NAME column combining FIRST and LAST names\npatients &lt;- patients %&gt;%\n    rename(PATIENT = Id) %&gt;%\n  unite(NAME, FIRST, LAST, sep = \" \")\n\n#trim whitespace NAME\npatients$NAME &lt;- trimws(patients$NAME)\n\n#trim whitespace COUNTY\npatients$CITY &lt;- trimws(patients$CITY)\n\n#clean up GENDER, RACE, ETHNICITY, and INCOME sections\npatients &lt;- patients %&gt;%\n  mutate(\n    GENDER = tolower(GENDER),\n    GENDER = case_when(\n      GENDER %in% c(\"male\", \"m\", \"man\") ~ \"Male\",\n      GENDER %in% c(\"female\", \"f\", \"woman\") ~ \"Female\",\n      TRUE ~ NA_character_  # assign NA to any non-standard values\n    ),\n# race (patient)\n    RACE = tolower(RACE),  # convert race to lower case for consistency\n\n# ethnicity (patient)\n    ETHNICITY = tolower(ETHNICITY),  # convert ethnicity to lower case for consistency\n\n# marital (patient)\n    MARITAL = ifelse(MARITAL == \"M\", \"Married\",\n                    ifelse(MARITAL == \"D\", \"Divorced\",\n                    ifelse(MARITAL == \"W\", \"Widowed\",\n                    ifelse(MARITAL == \"S\", \"Single\", MARITAL)))),\n\n# income (patient)\n    INCOME = as.numeric(INCOME)  # convert income to numeric if necessary\n  ) %&gt;%\n  drop_na(GENDER, RACE) \n\nI am only keeping the demographic data below (gender, race, marital status, income, and age) which will be used as an attribute for each patient.\n\n#Create AGE from BIRTHDATE\npatients &lt;- patients %&gt;%\n  mutate(\n    BIRTHDATE = as.Date(BIRTHDATE),  # Ensure 'dob' is in Date format\n    AGE = interval(BIRTHDATE, today()) / years(1)  # Calculate age in years\n  ) %&gt;%\n  mutate(\n    AGE = floor(AGE)  # complete years only, removing decimal\n  )\n# Only keep patient name and demographics. This will be utilized as the attribute data for analysis.\npat_attr &lt;- patients%&gt;% \n  select(NAME, GENDER, RACE, MARITAL, CITY, INCOME, AGE)\nhead(pat_attr)\n\n# A tibble: 6 × 7\n  NAME                       GENDER RACE  MARITAL CITY        INCOME   AGE\n  &lt;chr&gt;                      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;\n1 Avril120 Olson653          Female white &lt;NA&gt;    Newton      482269    36\n2 Norma469 Langosh790        Female white &lt;NA&gt;    Bridgewater 190464    25\n3 Peggie783 Eichmann909      Female white &lt;NA&gt;    Walpole      78997    21\n4 Ashlie138 Williamson769    Female white Married Lexington     6472    37\n5 Christiane220 Ankunding277 Female white &lt;NA&gt;    Hopkinton   141475    24\n6 Dione665 O'Kon634          Female white Married Newton      482269    36\n\n\n\npat_race &lt;- ggplot(pat_attr,aes(RACE)) + geom_bar()\npat_gender &lt;- ggplot(pat_attr,aes(GENDER)) + geom_bar()\n\npat_race + pat_gender + plot_annotation(title = \"Patient Race and Gender Breakdown\")\n\n\n\nggplot(pat_attr,aes(MARITAL)) + geom_bar() + labs(title = \"Patient Marital Status\")\n\n\n\npat_income &lt;- ggplot(pat_attr, aes(x = 1, y = INCOME)) +\n    geom_jitter(width = 0.2) +\n    labs(x = NULL, y = \"Income\") +\n    theme_minimal() + labs(title = \"Patient Income\")\n\nsummary(pat_attr$INCOME)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3365   32577   71082  134519  135462  931642 \n\npat_age &lt;- ggplot(pat_attr,aes(AGE)) + geom_bar()"
  },
  {
    "objectID": "posts/Post_One/post_1.html#provider-data",
    "href": "posts/Post_One/post_1.html#provider-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "PROVIDER DATA",
    "text": "PROVIDER DATA\nThe following table is the data available in the provider dataset.\n\nproviders &lt;- read_csv(\"synthea_sample_data_csv_latest/providers.csv\") %&gt;%\n    rename(PROVIDER = Id)\n\nRows: 279 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Id, ORGANIZATION, NAME, GENDER, SPECIALITY, ADDRESS, CITY, STATE, ZIP\ndbl (4): LAT, LON, ENCOUNTERS, PROCEDURES\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(providers)\n\n# A tibble: 6 × 13\n  PROVIDER  ORGANIZATION NAME  GENDER SPECIALITY ADDRESS CITY  STATE ZIP     LAT\n  &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 586477e1… 74ab949d-17… Ted9… M      GENERAL P… 881 Ma… Fitc… MA    01420  42.6\n2 4b284e0c… e09d4c49-c2… Barb… F      GENERAL P… 60 HOS… LEOM… MA    0145…  42.5\n3 88668b3f… e76b5eb0-0c… Gise… F      GENERAL P… 1400 V… West… MA    02132  42.3\n4 21a7f0e9… 77645e49-3f… Vell… F      GENERAL P… 363 HI… FALL… MA    0272…  41.7\n5 49671606… aa682136-a4… Prec… F      GENERAL P… 501 CO… NORW… MA    0206…  42.2\n6 bcc6badc… d2284f74-b6… Fern… F      GENERAL P… 331 E … E FA… MA    0253…  41.6\n# ℹ 3 more variables: LON &lt;dbl&gt;, ENCOUNTERS &lt;dbl&gt;, PROCEDURES &lt;dbl&gt;\n\n\nI am only keeping the demographic data below (gender) which will be used as an attribute for each provider.\n\n#trim whitespace NAME\nproviders$NAME &lt;- trimws(providers$NAME)\n\n\nggplot(providers, aes(GENDER)) +geom_bar() + labs(title = \"Provider Gender Breakdown\")"
  },
  {
    "objectID": "posts/Post_One/post_1.html#patient-and-provider",
    "href": "posts/Post_One/post_1.html#patient-and-provider",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "PATIENT AND PROVIDER",
    "text": "PATIENT AND PROVIDER\n\n#combine pro and pat attr\npat_attr$type &lt;- \"PATIENT\"\npro_attr$type &lt;- \"PROVIDER\"\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n\n# A tibble: 6 × 7\n  NAME                       GENDER RACE  MARITAL INCOME   AGE type   \n  &lt;chr&gt;                      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1 Avril120 Olson653          F      white &lt;NA&gt;    482269    36 PATIENT\n2 Norma469 Langosh790        F      white &lt;NA&gt;    190464    25 PATIENT\n3 Peggie783 Eichmann909      F      white &lt;NA&gt;     78997    21 PATIENT\n4 Ashlie138 Williamson769    F      white M         6472    37 PATIENT\n5 Christiane220 Ankunding277 F      white &lt;NA&gt;    141475    24 PATIENT\n6 Dione665 O'Kon634          F      white M       482269    36 PATIENT"
  },
  {
    "objectID": "posts/Post_One/post_1.html#encounter-data",
    "href": "posts/Post_One/post_1.html#encounter-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "ENCOUNTER DATA",
    "text": "ENCOUNTER DATA\n\nencounters &lt;- read_csv(\"synthea_sample_data_csv_latest/encounters.csv\")\n\nRows: 11987 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): Id, PATIENT, ORGANIZATION, PROVIDER, PAYER, ENCOUNTERCLASS, DESCRI...\ndbl  (5): CODE, BASE_ENCOUNTER_COST, TOTAL_CLAIM_COST, PAYER_COVERAGE, REASO...\ndttm (2): START, STOP\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(encounters)\n\n# A tibble: 6 × 15\n  Id       START               STOP                PATIENT ORGANIZATION PROVIDER\n  &lt;chr&gt;    &lt;dttm&gt;              &lt;dttm&gt;              &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;   \n1 4afc6ab… 2013-11-02 00:34:37 2013-11-02 00:49:37 270357… 51370692-62… c0cc76b…\n2 c502ee2… 2014-11-01 12:48:31 2014-11-01 13:03:31 35589a… 57e4e5fa-d6… 896d5c7…\n3 6f3ad10… 1995-02-03 08:38:10 1995-02-03 08:53:10 b573d4… 67d2f85b-dd… 4087a49…\n4 0d9b475… 2015-02-25 16:48:31 2015-02-25 17:17:55 35589a… ca62a361-9c… 370ff56…\n5 ec0d6c6… 2013-11-09 00:34:37 2013-11-09 00:49:37 270357… 51370692-62… c0cc76b…\n6 ec41ff9… 2014-03-16 11:34:37 2014-03-16 11:49:37 270357… 51370692-62… c0cc76b…\n# ℹ 9 more variables: PAYER &lt;chr&gt;, ENCOUNTERCLASS &lt;chr&gt;, CODE &lt;dbl&gt;,\n#   DESCRIPTION &lt;chr&gt;, BASE_ENCOUNTER_COST &lt;dbl&gt;, TOTAL_CLAIM_COST &lt;dbl&gt;,\n#   PAYER_COVERAGE &lt;dbl&gt;, REASONCODE &lt;dbl&gt;, REASONDESCRIPTION &lt;chr&gt;\n\n\n\nggplot(encounters, aes(ENCOUNTERCLASS)) + geom_bar() + coord_flip()+ labs(title = \"Type of Visit\")\n\n\n\nggplot(data = encounters %&gt;% \n         count(DESCRIPTION) %&gt;% \n         filter(n &gt; 50),  # Filter for counts higher than 10\n       aes(x = DESCRIPTION, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Visit Description\", \"\\n*filtered to show &gt;50 visits\"))\n\n\n\nggplot(data = encounters %&gt;% \n         count(REASONDESCRIPTION) %&gt;% \n         filter(n &gt; 50),  # Filter for counts higher than 10\n       aes(x = REASONDESCRIPTION, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Reason Patient Visited Provider\", \"\\n*filtered to show &gt;50 visits\"))\n\n\n\n\nI am noticing a lot of kidney related diseases in this dataset"
  },
  {
    "objectID": "posts/Post_One/post_1.html#edgelist",
    "href": "posts/Post_One/post_1.html#edgelist",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "EDGELIST",
    "text": "EDGELIST\n\n# Create Edgelist\nencounters_el &lt;- encounter_attributes %&gt;%\n  group_by(PATIENT, PROVIDER) %&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PATIENT'. You can override using the\n`.groups` argument.\n\nhead(encounters_el)\n\n# A tibble: 6 × 3\n# Groups:   PATIENT [2]\n  PATIENT               PROVIDER              COUNT\n  &lt;chr&gt;                 &lt;chr&gt;                 &lt;int&gt;\n1 Akiko835 Larkin917    Emilio417 Barton704      18\n2 Akiko835 Larkin917    Frederic454 Larkin917     7\n3 Akiko835 Larkin917    Jim478 Goyette777         2\n4 Akiko835 Larkin917    Kirby843 McKenzie376     19\n5 Akiko835 Larkin917    Ted955 Reilly981          1\n6 Anneliese170 Berge125 Althea11 Ankunding277     6\n\ndim(encounters_el)\n\n[1] 437   3"
  },
  {
    "objectID": "posts/Post_One/post_1.html#combined-attribute-list",
    "href": "posts/Post_One/post_1.html#combined-attribute-list",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "COMBINED ATTRIBUTE LIST",
    "text": "COMBINED ATTRIBUTE LIST\n\n#combine pro and pat attr\npat_attr$type &lt;- \"PATIENT\"\npro_attr &lt;- providers_filtered %&gt;%\n  select(NAME, GENDER, CITY)\npro_attr$type &lt;- \"PROVIDER\"\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n\n# A tibble: 6 × 8\n  NAME                       GENDER RACE  MARITAL CITY        INCOME   AGE type \n  &lt;chr&gt;                      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n1 Avril120 Olson653          Female white &lt;NA&gt;    Newton      482269    36 PATI…\n2 Norma469 Langosh790        Female white &lt;NA&gt;    Bridgewater 190464    25 PATI…\n3 Peggie783 Eichmann909      Female white &lt;NA&gt;    Walpole      78997    21 PATI…\n4 Ashlie138 Williamson769    Female white Married Lexington     6472    37 PATI…\n5 Christiane220 Ankunding277 Female white &lt;NA&gt;    Hopkinton   141475    24 PATI…\n6 Dione665 O'Kon634          Female white Married Newton      482269    36 PATI…\n\n\n\n#create combined attribute list\nattribute_list &lt;- do.call(list, both_attr)"
  },
  {
    "objectID": "posts/Post_One/post_1.html#network",
    "href": "posts/Post_One/post_1.html#network",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "NETWORK",
    "text": "NETWORK\n\n# create bipartite network with attributes\nencounters.st.3 &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\nencounters.st.3\n\n Network attributes:\n  vertices = 374 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = 121 \n  total edges= 437 \n    missing edges= 0 \n    non-missing edges= 437 \n\n Vertex attribute names: \n    AGE CITY GENDER INCOME MARITAL NAME RACE type vertex.names \n\n Edge attribute names: \n    COUNT"
  },
  {
    "objectID": "posts/Post_One/post_1.html#combine-patient-provider-and-encounter-data",
    "href": "posts/Post_One/post_1.html#combine-patient-provider-and-encounter-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "Combine Patient, Provider, and Encounter Data",
    "text": "Combine Patient, Provider, and Encounter Data\nI am taking this step here so that I have a master dataset (encounters_attributes) and so that I can create an edgelist more easily.\n\n# Perform a left join to merge encounters with provider_attributes based on PROVIDER\nencounters_cleaning &lt;- left_join(encounters, providers, by = \"PROVIDER\")\n# Replace the PROVIDER column with the corresponding names from the NAME column\nencounters_cleaning$PROVIDER &lt;- encounters_cleaning$NAME\n# Remove the NAME column if no longer needed\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  select(-NAME)\n#Repeat for Provider\nencounters_cleaning &lt;- left_join(encounters_cleaning, patients, by = \"PATIENT\")\nencounters_cleaning$PATIENT &lt;- encounters_cleaning$NAME\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  select(-NAME) \n#Clearly identify the Encounter ID\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  rename(ENCOUNTER_ID = Id)"
  },
  {
    "objectID": "posts/Post_Two/post_2.html",
    "href": "posts/Post_Two/post_2.html",
    "title": "Network Exploration",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(ggplot2)\nlibrary(patchwork)\nThis post will explore the Synthetic Mass network data in more detail."
  },
  {
    "objectID": "posts/Post_Two/post_2.html#graphs-with-sna",
    "href": "posts/Post_Two/post_2.html#graphs-with-sna",
    "title": "Network Exploration",
    "section": "Graphs with sna",
    "text": "Graphs with sna\n\n# load the sna library to get the gplot() function\nlibrary( sna )\n\n# set the seed to reproduce the plot layout\nset.seed( 507 )\n\n# execute the plot\ngplot(\n  encounters.st.3,             \n  gmode = \"twomode\",                     # indicate it is two modes\n  usearrows = FALSE,                     # turn off the arrowheads\n  vertex.cex=2,                          # size the nodes     \n  label.cex=1.2,                         # size the labels\n  main=\"Bipartite Graph of Encounters using SNA\"                 # add a title\n)\n\n\n\n\n\nincidence_graph &lt;- graph_from_biadjacency_matrix(encounters.st.3)\n\ndetach(“package:sna”)"
  },
  {
    "objectID": "posts/Post_Two/post_2.html#graphs-with-igraph",
    "href": "posts/Post_Two/post_2.html#graphs-with-igraph",
    "title": "Network Exploration",
    "section": "Graphs with igraph",
    "text": "Graphs with igraph\n\nvertex_colors &lt;- ifelse(attribute_list$GENDER == \"F\", \"blue\", \"magenta\")\nV(incidence_graph)$shape &lt;- ifelse(V(incidence_graph)$type, \"square\", \"circle\")\n\n# Define edge colors based on COUNT attribute\nedge_colors &lt;- ifelse(encounters_el$COUNT &lt; 5, \"yellow\", \n                      ifelse(encounters_el$COUNT &gt;= 5 & encounters_el$COUNT &lt;= 19, \"lightblue\", \"red\"))\n\n# Check if the length of edge_colors matches the number of edges\nif (length(edge_colors) == ecount(incidence_graph)) {\n  # Set edge attributes based on counts\n  E(incidence_graph)$color &lt;- edge_colors\n} else {\n  print(\"Length of edge_colors does not match the number of edges in the graph.\")\n}\n\nE(incidence_graph)$color &lt;- edge_colors\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph,\n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 3, \n     vertex.color = vertex_colors,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Patient Provider Incidence Graph\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\",\n       legend = c(\"1-4\", \"5-19\", \"20+\"),  # You can customize these labels\n       col = c(\"yellow\", \"lightblue\", \"red\"),  # Line colors corresponding to edge colors\n       lwd = 2,                            # Line width\n       title = \"Edges: # of Visits\")              # Legend title\n\n\n\n\n\n#Calculating centrality\ntypes &lt;- V(incidence_graph)$type\ndeg&lt;- igraph::degree(incidence_graph)\nbet &lt;- igraph::betweenness(incidence_graph)\nclos &lt;- igraph::closeness(incidence_graph)\neig &lt;- eigen_centrality(incidence_graph)$vector\nconst &lt;- constraint(incidence_graph)\ncent_df &lt;- data.frame(types, deg, bet, clos, eig, const)\nhead(cent_df[order(cent_df$deg, decreasing = TRUE),], 10)\n\n                           types deg        bet         clos        eig\nTed955 Reilly981            TRUE  28 27013.6588 0.0012239902 1.00000000\nTimmy68 Nolan344           FALSE   7   885.6299 0.0007002801 0.02480592\nTrula820 Johns824          FALSE   7  6649.9824 0.0010000000 0.20635920\nChun678 Hirthe744          FALSE   6  1404.0134 0.0009578544 0.24432907\nCorey514 Gaylord332        FALSE   6  2402.5000 0.0009578544 0.19651997\nDennis979 Dickens475       FALSE   6  1785.4929 0.0009652510 0.22004854\nEnola75 Tromp100           FALSE   6   758.6271 0.0009560229 0.29716393\nJacqualine965 Aufderhar910 FALSE   6  3265.0333 0.0010080645 0.22137300\nJed345 Muller251           FALSE   6  3019.5333 0.0010080645 0.22693121\nMamie949 Leannon79         FALSE   6   799.1374 0.0009560229 0.28361363\n                                const\nTed955 Reilly981           0.03571429\nTimmy68 Nolan344           0.14285714\nTrula820 Johns824          0.14285714\nChun678 Hirthe744          0.16666667\nCorey514 Gaylord332        0.16666667\nDennis979 Dickens475       0.16666667\nEnola75 Tromp100           0.16666667\nJacqualine965 Aufderhar910 0.16666667\nJed345 Muller251           0.16666667\nMamie949 Leannon79         0.16666667\n\n\n\nV(incidence_graph)$size &lt;- igraph::degree(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Degree Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Degree\")\n\n\n\n\nHere we can see there is one Provider that sees the most patients, with degree centrality = 28. The next largest degree centrality are in the 5 to 7 range and the majority of those nodes are patients.\n\nV(incidence_graph)$size &lt;- igraph::closeness(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Closeness Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Closeness\")\n\n\n\n\nHere we see two of the dyads on the outer right side of this incidence graph have the largest closeness score. This is because their network is complete (they are both connected to one another)."
  },
  {
    "objectID": "posts/Post_Three/post_3.html",
    "href": "posts/Post_Three/post_3.html",
    "title": "Network Block Modeling - Patients",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\n\nThis post will explore the Synthetic Mass network data in more detail.\n\nRead in Data\n\npat_attr &lt;- read_csv(\"post1_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr &lt;- read_csv(\"post1_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning &lt;- read_csv(\"post1_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned &lt;- read_csv(\"post1_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes &lt;- read_csv(\"post1_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  &lt;- read_csv(\"post1_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 &lt;- read_csv(\"post1_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list &lt;- read.csv(\"post1_data/attribute_list.csv\")\n\n\n\nCreate bipartite network with attributes\n\nencounters.stat &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n\n\n#create igraph\nencounters.ig &lt;- graph_from_biadjacency_matrix(encounters.stat)\n\n\nencounters.stat2 &lt;- asNetwork(encounters.ig)\n\n\nprojected_graph &lt;- bipartite_projection(encounters.ig)\npatient_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\npatient.stat &lt;- asNetwork(projected_graph$proj1)\n\npatient.se &lt;- equiv.clust(patient_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\nnames(patient.se)\n\n[1] \"cluster\"        \"metric\"         \"equiv.fun\"      \"cluster.method\"\n[5] \"glabels\"        \"plabels\"       \n\n\n\nplot(patient.se, main = \"patient\")\nrect.hclust(patient.se$cluster, k = 4)\n\n\n\n\n\npat_blk_model.patient.org &lt;- blockmodel(patient_matrix,\n patient.se, k = 4)\n\n\n pat_blk_model.patient.org$block.model\n\n           Block 1     Block 2     Block 3     Block 4\nBlock 1 1.00000000 0.018535262 0.112244898 0.061224490\nBlock 2 0.01853526 0.020772476 0.003616637 0.005424955\nBlock 3 0.11224490 0.003616637 0.238095238 0.000000000\nBlock 4 0.06122449 0.005424955 0.000000000 0.476190476\n\n\n\nplot.block&lt;-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(pat_blk_model.patient.org, main = \"patient\")\n\n\n\n\n\n#pat_blks6 &lt;- blockmodeling::optRandomParC(patient_matrix,k=6, rep=20, approaches=\"ss\", blocks=\"com\")\n\n\n# Save the blks2 object to a file\n#saveRDS(pat_blks6, \"pat_blks6_results.rds\")\n\n# Later, when you want to use it again, you can read it back into R\npat_blks6 &lt;- readRDS(\"pat_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\npat_blk_mod &lt;- blockmodel(patient_matrix, pat_blks6$best$best1$clu,\n                      plabels = rownames(patient_matrix))\n# print blockmodel object\npat_blk_mod$block.model\n\n           Block 1     Block 2     Block 3     Block 4 Block 5    Block 6\nBlock 1 1.00000000 1.000000000 0.083333333 0.011538462 0.03125 0.00000000\nBlock 2 1.00000000 1.000000000 0.000000000 0.007692308 0.00000 0.75000000\nBlock 3 0.08333333 0.000000000 0.131578947 0.001538462 0.00000 0.00000000\nBlock 4 0.01153846 0.007692308 0.001538462 0.019711538 0.00000 0.02307692\nBlock 5 0.03125000 0.000000000 0.000000000 0.000000000 1.00000 0.00000000\nBlock 6 0.00000000 0.750000000 0.000000000 0.023076923 0.00000 0.66666667\n\n\n#assign attributes\n\nglimpse(pat_blk_mod)\n\nList of 11\n $ block.membership: int [1:121] 1 1 1 1 1 1 1 1 1 1 ...\n $ order.vector    : int [1:121] 1 5 16 22 24 26 28 29 35 36 ...\n $ block.content   : chr \"density\"\n $ blocked.data    : num [1:121, 1:121] 0 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:121] \"Akiko835 Larkin917\" \"Arleen939 Kling921\" \"Casandra937 Grimes165\" \"Chun678 Hirthe744\" ...\n  .. ..$ : chr [1:121] \"Akiko835 Larkin917\" \"Arleen939 Kling921\" \"Casandra937 Grimes165\" \"Chun678 Hirthe744\" ...\n $ block.model     : num [1:6, 1:6] 1 1 0.0833 0.0115 0.0312 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ plabels         : chr [1:121] \"Akiko835 Larkin917\" \"Arleen939 Kling921\" \"Casandra937 Grimes165\" \"Chun678 Hirthe744\" ...\n $ glabels         : int [1:121] 1 2 3 4 5 6 7 8 9 10 ...\n $ rlabels         : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ cluster.method  : chr \"Prespecified\"\n $ equiv.fun       : chr \"None\"\n $ equiv.metric    : chr \"None\"\n - attr(*, \"class\")= chr \"blockmodel\"\n\n\n\npat_attr$block &lt;- pat_blk_mod$block.membership\nhead(pat_attr)\n\n# A tibble: 6 × 9\n  NAME                       GENDER RACE  MARITAL CITY  INCOME   AGE type  block\n  &lt;chr&gt;                      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt;\n1 Avril120 Olson653          Female white &lt;NA&gt;    Newt… 482269    36 PATI…     1\n2 Norma469 Langosh790        Female white &lt;NA&gt;    Brid… 190464    25 PATI…     1\n3 Peggie783 Eichmann909      Female white &lt;NA&gt;    Walp…  78997    21 PATI…     1\n4 Ashlie138 Williamson769    Female white Married Lexi…   6472    37 PATI…     1\n5 Christiane220 Ankunding277 Female white &lt;NA&gt;    Hopk… 141475    24 PATI…     1\n6 Dione665 O'Kon634          Female white Married Newt… 482269    36 PATI…     1\n\n#write.csv(pat_attr, \"pat_attr.csv\")\n\n\nplot.block(pat_blk_mod, main = \"patient\",\n           cex.lab = .000001)\n\n\n\n\n\n#assign block membership to vertex attribute\npatient.stat%v%\"role\"&lt;-pat_blk_mod$block.membership[match(patient.stat%v%\"vertex.names\",pat_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(patient.stat,\n               node.color=\"role\", \n               node.size=sna::degree(patient.stat, gmode=\"graph\"),\n               node.alpha = .5)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n\n\n\n\nlibrary(ade4)\n\nWarning: package 'ade4' was built under R version 4.3.3\n\n\n\nencounters.adj.ig &lt;- igraph::as_biadjacency_matrix(encounters.ig)\n\npatients_jaccard &lt;- dist.binary(encounters.adj.ig,\n            method = 1, # method=1 Jaccard index\n            upper = TRUE,\n            diag = FALSE)\n\npatients_jaccard &lt;- as.matrix(patients_jaccard)\ndiag(patients_jaccard) &lt;- 0\n\n\n#binarize\npatients_jaccard_bi &lt;- ifelse(patients_jaccard &gt; 0.99, 1, 0)\n\n\n#create igraph object\npatients_jaccard.ig &lt;- graph_from_adjacency_matrix(patients_jaccard_bi, mode = \"undirected\")\nsummary(patients_jaccard.ig)\n\nIGRAPH cfa603f UN-- 121 6723 -- \n+ attr: name (v/c)\n\n\n\nplot(patients_jaccard.ig,  edge.width = 0.0002, edge.color = \"lightgray\",  vertex.size = 2, vertex.label = NA)\n\n\n\n\n\n# Load the igraph package\nlibrary(igraph)\n\n# Create an igraph object from the blockmodel\ng &lt;- graph_from_adjacency_matrix(patient_matrix, mode = \"undirected\", weighted = FALSE)\n\n# Plot the graph without labels\nplot(g,      \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 2, \n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Patient Network\")"
  },
  {
    "objectID": "posts/Post_Four/post_4.html",
    "href": "posts/Post_Four/post_4.html",
    "title": "Network Block Modeling - Providers",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\n\nThis post will explore the Synthetic Mass network data in more detail.\n\nRead in Data\n\npat_attr &lt;- read_csv(\"post1_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr &lt;- read_csv(\"post1_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning &lt;- read_csv(\"post1_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned &lt;- read_csv(\"post1_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes &lt;- read_csv(\"post1_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  &lt;- read_csv(\"post1_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 &lt;- read_csv(\"post1_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list &lt;- read.csv(\"post1_data/attribute_list.csv\")\n\n\n\nCreate bipartite network with attributes\n\nencounters.stat &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n\n\n#create igraph\nencounters.ig &lt;- graph_from_biadjacency_matrix(encounters.stat)\n\n\nencounters.stat2 &lt;- asNetwork(encounters.ig)\n\n\nprojected_graph &lt;- bipartite_projection(encounters.ig)\nprovider_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj2))\n\nprovider.stat &lt;- asNetwork(projected_graph$proj2)\n\nprovider.se &lt;- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\nnames(provider.se)\n\n[1] \"cluster\"        \"metric\"         \"equiv.fun\"      \"cluster.method\"\n[5] \"glabels\"        \"plabels\"       \n\n\n\nplot(provider.se, main = \"provider\")\nrect.hclust(provider.se$cluster, k = 12)\n\n\n\n\n\nblk_model.provider.org &lt;- blockmodel(provider_matrix,\n provider.se, k = 6)\n\n\n blk_model.provider.org$block.model\n\n            Block 1   Block 2     Block 3    Block 4    Block 5    Block 6\nBlock 1 0.013527738 0.2995595 0.001762115 0.00715859 0.07929515 0.05286344\nBlock 2 0.299559471       NaN 0.400000000 1.00000000 1.00000000 1.00000000\nBlock 3 0.001762115 0.4000000 0.476190476 0.00000000 0.00000000 0.00000000\nBlock 4 0.007158590 1.0000000 0.000000000 0.75000000 0.00000000 0.37500000\nBlock 5 0.079295154 1.0000000 0.000000000 0.00000000        NaN 0.00000000\nBlock 6 0.052863436 1.0000000 0.000000000 0.37500000 0.00000000        NaN\n\n\n\nplot.block&lt;-function(x=blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(blk_model.provider.org, main = \"provider\")\n\n\n\n\n\n#prov_blks6 &lt;- blockmodeling::optRandomParC(provider_matrix, k=6, rep=10, approaches=\"ss\", blocks=\"com\")\n\n\n# Save the prov_blks6 object to a file\n#saveRDS(prov_blks6, \"prov_blks6_results.rds\")\n\n# Later, when you want to use it again, you can read it back into R\nprov_blks6 &lt;- readRDS(\"prov_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\nprov_blk_mod &lt;- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n# print blockmodel object\nprov_blk_mod$block.model\n\n            Block 1     Block 2 Block 3     Block 4     Block 5     Block 6\nBlock 1 1.000000000 0.000000000   1.000 0.008333333 0.400000000 0.000000000\nBlock 2 0.000000000 0.800000000   0.600 0.001388889 0.000000000 0.010828025\nBlock 3 1.000000000 0.600000000     NaN 1.000000000 0.125000000 0.000000000\nBlock 4 0.008333333 0.001388889   1.000 0.053208138 0.000000000 0.004777070\nBlock 5 0.400000000 0.000000000   0.125 0.000000000 0.142857143 0.002388535\nBlock 6 0.000000000 0.010828025   0.000 0.004777070 0.002388535 0.015515270\n\n\n\nglimpse(prov_blk_mod)\n\nList of 11\n $ block.membership: int [1:253] 1 1 1 1 1 2 2 2 2 2 ...\n $ order.vector    : int [1:253] 29 39 76 112 208 20 23 24 25 26 ...\n $ block.content   : chr \"density\"\n $ blocked.data    : num [1:253, 1:253] 0 1 1 1 1 0 0 0 0 0 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:253] \"Yesenia104 Wilderman619\" \"Floy720 Greenfelder433\" \"Vito638 Barton704\" \"Omer483 Koepp521\" ...\n  .. ..$ : chr [1:253] \"Yesenia104 Wilderman619\" \"Floy720 Greenfelder433\" \"Vito638 Barton704\" \"Omer483 Koepp521\" ...\n $ block.model     : num [1:6, 1:6] 1 0 1 0.00833 0.4 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ plabels         : chr [1:253] \"Yesenia104 Wilderman619\" \"Floy720 Greenfelder433\" \"Vito638 Barton704\" \"Omer483 Koepp521\" ...\n $ glabels         : int [1:253] 1 2 3 4 5 6 7 8 9 10 ...\n $ rlabels         : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ cluster.method  : chr \"Prespecified\"\n $ equiv.fun       : chr \"None\"\n $ equiv.metric    : chr \"None\"\n - attr(*, \"class\")= chr \"blockmodel\"\n\n\n\npro_attr$block &lt;- prov_blk_mod$block.membership \n\nhead(pro_attr)\n\n# A tibble: 6 × 5\n  NAME                      GENDER CITY         type     block\n  &lt;chr&gt;                     &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt;    &lt;int&gt;\n1 Ted955 Reilly981          M      Fitchburg    PROVIDER     1\n2 Barbara209 Maldonado119   F      LEOMINSTER   PROVIDER     1\n3 Gisele901 Lehner980       F      West Roxbury PROVIDER     1\n4 Vella930 Ankunding277     F      FALL RIVER   PROVIDER     1\n5 Precious140 Runolfsson901 F      NORWELL      PROVIDER     1\n6 Fernande593 Mosciski958   F      E FALMOUTH   PROVIDER     2\n\nwrite.csv(pro_attr, \"pro_attr.csv\")\n\n\nplot.block(prov_blk_mod, main = \"Provider 6 Block Model\",\n           cex.lab = .000001)\n\n\n\n\n\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"&lt;-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5)  + ggtitle(\"Provider 6 Block Model Network\")\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n\n\n\n\n#blks2 &lt;- blockmodeling::optRandomParC(provider_matrix, k=12, rep=10, approaches=\"ss\", blocks=\"com\")\n\n\n# Save the blks2 object to a file\n#saveRDS(blks2, \"blks2_results.rds\")\n\n# Later, when you want to use it again, you can read it back into R\nblks2 &lt;- readRDS(\"blks2_results.rds\")\n\n\n# blockmodel with optimized partition\nblks2_mod &lt;- blockmodel(provider_matrix, blks2$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n# print blockmodel object\nblks2_mod$block.model\n\n           Block 1 Block 2     Block 3    Block 4     Block 5     Block 6\nBlock 1        NaN    0.00 1.000000000 1.00000000 0.000000000 0.600000000\nBlock 2  0.0000000    0.20 0.000000000 0.00000000 0.000000000 0.240000000\nBlock 3  1.0000000    0.00 0.272727273 0.04545455 0.007667032 0.009090909\nBlock 4  1.0000000    0.00 0.045454545 0.86666667 0.014056225 0.000000000\nBlock 5  0.0000000    0.00 0.007667032 0.01405622 0.022627094 0.002409639\nBlock 6  0.6000000    0.24 0.009090909 0.00000000 0.002409639 0.800000000\nBlock 7  1.0000000    0.00 0.000000000 0.00000000 0.007831325 0.000000000\nBlock 8  0.0000000    0.00 0.000000000 0.02000000 0.000000000 0.000000000\nBlock 9  1.0000000    0.00 0.000000000 0.00000000 0.007530120 0.000000000\nBlock 10 0.0000000    0.00 0.000000000 0.00000000 0.002409639 0.060000000\nBlock 11 0.0000000    0.00 0.000000000 0.00000000 0.002259036 0.000000000\nBlock 12 0.1666667    0.00 0.000000000 0.00000000 0.016064257 0.000000000\n             Block 7    Block 8    Block 9    Block 10    Block 11   Block 12\nBlock 1  1.000000000 0.00000000 1.00000000 0.000000000 0.000000000 0.16666667\nBlock 2  0.000000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000\nBlock 3  0.000000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000\nBlock 4  0.000000000 0.02000000 0.00000000 0.000000000 0.000000000 0.00000000\nBlock 5  0.007831325 0.00000000 0.00753012 0.002409639 0.002259036 0.01606426\nBlock 6  0.000000000 0.00000000 0.00000000 0.060000000 0.000000000 0.00000000\nBlock 7  0.268421053 0.00000000 0.00250000 0.000000000 0.000000000 0.00000000\nBlock 8  0.000000000 0.04979592 0.00000000 0.000000000 0.012500000 0.00000000\nBlock 9  0.002500000 0.00000000 0.07564103 0.000000000 0.000000000 0.03750000\nBlock 10 0.000000000 0.00000000 0.00000000 0.700000000 0.000000000 0.00000000\nBlock 11 0.000000000 0.01250000 0.00000000 0.000000000 0.200000000 0.00000000\nBlock 12 0.000000000 0.00000000 0.03750000 0.000000000 0.000000000 0.86666667\n\n\n\nplot.block(blks2_mod, main = \"Provider 12 Block Model\",\n           cex.lab = .000001)\n\n\n\n\n\n#assign block membership to vertex attribute\nprovider.stat%v%\"role2\"&lt;-blks2_mod$block.membership[match(provider.stat%v%\"vertex.names\",blks2_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role2\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 12 Block Model Network\")\n\n\n\n\nWith 12 distinct blocks, I start to loose definition of the exterior and interior. Notice the green color mixed in close to the center and tied with gray nodes in the outer ring. This is too many blocks, 6 defines more visually appealing divisions. Additional analysis will need to be done to understand if these blocks can actually be defined by anything other than ties. Onto deeper exploration of blocks…\n#Next Steps Jaccard similarity\n\nlibrary(ade4)\n\nWarning: package 'ade4' was built under R version 4.3.3\n\n\n\nencounters.adj.ig &lt;- igraph::as_biadjacency_matrix(encounters.ig)\n\nproviders_jaccard &lt;- dist.binary(t(encounters.adj.ig),\n            method = 1, # method=1 Jaccard index\n            upper = TRUE,\n            diag = FALSE)\n\n\nproviders_jaccard &lt;- as.matrix(providers_jaccard)\ndiag(providers_jaccard) &lt;- 0\n\n\n#binarize\nproviders_jaccard_bi &lt;- ifelse(providers_jaccard &gt; 0.99, 1, 0)\n\n\n#create igraph object\nproviders_jaccard.ig &lt;- graph_from_adjacency_matrix(providers_jaccard_bi, mode = \"undirected\")\nproviders_jaccard.ig\n\nIGRAPH 5606312 UN-- 253 31324 -- \n+ attr: name (v/c)\n+ edges from 5606312 (vertex names):\n [1] Emilio417 Barton704--Althea11 Ankunding277\n [2] Emilio417 Barton704--Jerrell6 Rippin620   \n [3] Emilio417 Barton704--Linette249 Runte676  \n [4] Emilio417 Barton704--Irene779 Garza151    \n [5] Emilio417 Barton704--Randy380 Bergstrom287\n [6] Emilio417 Barton704--Booker670 Casper496  \n [7] Emilio417 Barton704--Brock407 VonRueden376\n [8] Emilio417 Barton704--Chang901 Kutch271    \n+ ... omitted several edges\n\n\n\nplot(providers_jaccard.ig,  edge.width = 0.0002, edge.color = \"lightgray\",  vertex.size = 2, vertex.label = NA)\n\n\n\n\n\n# Load the igraph package\nlibrary(igraph)\n\n# Create an igraph object from the blockmodel\ng &lt;- graph_from_adjacency_matrix(provider_matrix, mode = \"undirected\", weighted = FALSE)\n\n# Plot the graph without labels\nplot(g,      layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 2, \n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Provider Network\")"
  },
  {
    "objectID": "posts/Post_Five/post_5.html",
    "href": "posts/Post_Five/post_5.html",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\nThis post will explore the Synthetic Mass network data in more detail."
  },
  {
    "objectID": "posts/Post_Three/post_3adjustment.html",
    "href": "posts/Post_Three/post_3adjustment.html",
    "title": "Network Block Modeling - Patients",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\n\nThis post will explore the Synthetic Mass network data in more detail.\n\nRead in Data\n\npat_attr &lt;- read_csv(\"post_one_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr &lt;- read_csv(\"post_one_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning &lt;- read_csv(\"post_one_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes &lt;- read_csv(\"post_one_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  &lt;- read_csv(\"post_one_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 &lt;- read_csv(\"post_one_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list &lt;- read.csv(\"post_one_data/attribute_list.csv\")\n\n\n\nCreate bipartite network with attributes\n\nencounters.stat &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n\n\n#create igraph\nencounters.ig &lt;- graph_from_biadjacency_matrix(encounters.stat)\n\n\nencounters.stat2 &lt;- asNetwork(encounters.ig)\n\n\nprojected_graph &lt;- bipartite_projection(encounters.ig)\npatient_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\npatient.stat &lt;- asNetwork(projected_graph$proj1)\n\npatient.se &lt;- equiv.clust(patient_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\nnames(patient.se)\n\n[1] \"cluster\"        \"metric\"         \"equiv.fun\"      \"cluster.method\"\n[5] \"glabels\"        \"plabels\"       \n\n\n\nplot(patient.se, main = \"patient\")\nrect.hclust(patient.se$cluster, k = 4)\n\n\n\n\n\npat_blk_model.patient.org &lt;- blockmodel(patient_matrix,\n patient.se, k = 4)\n\n\n pat_blk_model.patient.org$block.model\n\n           Block 1     Block 2     Block 3     Block 4\nBlock 1 1.00000000 0.018535262 0.112244898 0.061224490\nBlock 2 0.01853526 0.020772476 0.003616637 0.005424955\nBlock 3 0.11224490 0.003616637 0.238095238 0.000000000\nBlock 4 0.06122449 0.005424955 0.000000000 0.476190476\n\n\n\nplot.block&lt;-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(pat_blk_model.patient.org, main = \"patient\")\n\n\n\n\n\n#pat_blks6 &lt;- blockmodeling::optRandomParC(patient_matrix,k=6, rep=20, approaches=\"ss\", blocks=\"com\")\n\n\n# Save the blks2 object to a file\n#saveRDS(pat_blks6, \"pat_blks6_results.rds\")\n\n# Later, when you want to use it again, you can read it back into R\npat_blks6 &lt;- readRDS(\"pat_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\npat_blk_mod &lt;- blockmodel(patient_matrix, pat_blks6$best$best1$clu,\n                      plabels = rownames(patient_matrix))\n# print blockmodel object\npat_blk_mod$block.model\n\n           Block 1     Block 2     Block 3     Block 4 Block 5    Block 6\nBlock 1 1.00000000 1.000000000 0.083333333 0.011538462 0.03125 0.00000000\nBlock 2 1.00000000 1.000000000 0.000000000 0.007692308 0.00000 0.75000000\nBlock 3 0.08333333 0.000000000 0.131578947 0.001538462 0.00000 0.00000000\nBlock 4 0.01153846 0.007692308 0.001538462 0.019711538 0.00000 0.02307692\nBlock 5 0.03125000 0.000000000 0.000000000 0.000000000 1.00000 0.00000000\nBlock 6 0.00000000 0.750000000 0.000000000 0.023076923 0.00000 0.66666667\n\n\n#assign attributes\n\nglimpse(pat_blk_mod)\n\nList of 11\n $ block.membership: int [1:121] 1 1 1 1 1 1 1 1 1 1 ...\n $ order.vector    : int [1:121] 1 5 16 22 24 26 28 29 35 36 ...\n $ block.content   : chr \"density\"\n $ blocked.data    : num [1:121, 1:121] 0 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:121] \"Akiko835 Larkin917\" \"Arleen939 Kling921\" \"Casandra937 Grimes165\" \"Chun678 Hirthe744\" ...\n  .. ..$ : chr [1:121] \"Akiko835 Larkin917\" \"Arleen939 Kling921\" \"Casandra937 Grimes165\" \"Chun678 Hirthe744\" ...\n $ block.model     : num [1:6, 1:6] 1 1 0.0833 0.0115 0.0312 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ plabels         : chr [1:121] \"Akiko835 Larkin917\" \"Arleen939 Kling921\" \"Casandra937 Grimes165\" \"Chun678 Hirthe744\" ...\n $ glabels         : int [1:121] 1 2 3 4 5 6 7 8 9 10 ...\n $ rlabels         : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ cluster.method  : chr \"Prespecified\"\n $ equiv.fun       : chr \"None\"\n $ equiv.metric    : chr \"None\"\n - attr(*, \"class\")= chr \"blockmodel\"\n\n\n\npat_attr$block &lt;- pat_blk_mod$block.membership\nhead(pat_attr)\n\n# A tibble: 6 × 8\n  NAME                       GENDER RACE  MARITAL INCOME   AGE type    block\n  &lt;chr&gt;                      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;int&gt;\n1 Avril120 Olson653          F      white &lt;NA&gt;    482269    36 PATIENT     1\n2 Norma469 Langosh790        F      white &lt;NA&gt;    190464    25 PATIENT     1\n3 Peggie783 Eichmann909      F      white &lt;NA&gt;     78997    21 PATIENT     1\n4 Ashlie138 Williamson769    F      white M         6472    37 PATIENT     1\n5 Christiane220 Ankunding277 F      white &lt;NA&gt;    141475    24 PATIENT     1\n6 Dione665 O'Kon634          F      white M       482269    36 PATIENT     1\n\n#write.csv(pat_attr, \"pat_attr.csv\")\n\n\nplot.block(pat_blk_mod, main = \"patient\",\n           cex.lab = .000001)\n\n\n\n\n\n#assign block membership to vertex attribute\npatient.stat%v%\"role\"&lt;-pat_blk_mod$block.membership[match(patient.stat%v%\"vertex.names\",pat_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(patient.stat,\n               node.color=\"role\", \n               node.size=sna::degree(patient.stat, gmode=\"graph\"),\n               node.alpha = .5)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n\n\n\n\nlibrary(ade4)\n\nWarning: package 'ade4' was built under R version 4.3.3\n\n\n\nencounters.adj.ig &lt;- igraph::as_biadjacency_matrix(encounters.ig)\n\npatients_jaccard &lt;- dist.binary(encounters.adj.ig,\n            method = 1, # method=1 Jaccard index\n            upper = TRUE,\n            diag = FALSE)\n\npatients_jaccard &lt;- as.matrix(patients_jaccard)\ndiag(patients_jaccard) &lt;- 0\n\n\n#binarize\npatients_jaccard_bi &lt;- ifelse(patients_jaccard &gt; 0.99, 1, 0)\n\n\n#create igraph object\npatients_jaccard.ig &lt;- graph_from_adjacency_matrix(patients_jaccard_bi, mode = \"undirected\")\npatients_jaccard.ig\n\nIGRAPH 3caafa3 UN-- 121 6723 -- \n+ attr: name (v/c)\n+ edges from 3caafa3 (vertex names):\n [1] Akiko835 Larkin917--Anneliese170 Berge125  \n [2] Akiko835 Larkin917--Anthony633 Renner328   \n [3] Akiko835 Larkin917--Ashlie138 Williamson769\n [4] Akiko835 Larkin917--Avril120 Olson653      \n [5] Akiko835 Larkin917--Basil991 Hilll811      \n [6] Akiko835 Larkin917--Benjamin360 Hintz995   \n [7] Akiko835 Larkin917--Brendan864 MacGyver246 \n [8] Akiko835 Larkin917--Bula88 Prohaska837     \n+ ... omitted several edges\n\n\n\nplot(patients_jaccard.ig,  edge.width = 0.0002, edge.color = \"lightgray\",  vertex.size = 2, vertex.label = NA)\n\n\n\n\n\n# Load the igraph package\nlibrary(igraph)\n\n# Create an igraph object from the blockmodel\ng &lt;- graph_from_adjacency_matrix(patient_matrix, mode = \"undirected\", weighted = FALSE)\n\n# Plot the graph without labels\nplot(g,      \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 2, \n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Patient Network\")"
  },
  {
    "objectID": "posts/Post_One/post_1.html#check-dimensions-of-providers",
    "href": "posts/Post_One/post_1.html#check-dimensions-of-providers",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "check dimensions of Providers…",
    "text": "check dimensions of Providers…\nIn later analysis I noticed that while there are 279 providers in the provider.csv, there are only 253 providers listed in the encounters df. I need to find out who is in the encounters list and only keep them for analysis\n\ncheck_prov &lt;- encounters_cleaning %&gt;%\n  group_by(PROVIDER, ORGANIZATION.x) %&gt;%\n  summarize(COUNT = n())\n\n`summarise()` has grouped output by 'PROVIDER'. You can override using the\n`.groups` argument.\n\ncheck_prov2 &lt;- providers %&gt;% \n  group_by(NAME, PROVIDER)\n\n\ndim(check_prov)\n\n[1] 253   3\n\ndim(check_prov2)\n\n[1] 279  13\n\n\n\n# Perform semi-join to keep providers present in both datasets\nproviders_only_in_providers_df &lt;- check_prov2 %&gt;%\n  anti_join(check_prov, by = c(\"NAME\" = \"PROVIDER\"))\n\n# Print the dimensions of the filtered dataset\nprint(dim(providers_only_in_providers_df))\n\n[1] 26 13\n\nprint(providers_only_in_providers_df)\n\n# A tibble: 26 × 13\n# Groups:   NAME, PROVIDER [26]\n   PROVIDER ORGANIZATION NAME  GENDER SPECIALITY ADDRESS CITY  STATE ZIP     LAT\n   &lt;chr&gt;    &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 c96d72f… 05bcaa3e-aa… Bok9… F      GENERAL P… 1 LOVE… SOUT… MA    0266…  41.7\n 2 3527717… 8e3ca57f-6f… Conc… F      GENERAL P… 89 MOR… ANDO… MA    0181…  42.7\n 3 8307628… 02c936e2-3a… Royc… F      GENERAL P… 120 FI… BOST… MA    0212…  42.3\n 4 31b33e0… 7a3b8310-02… Leif… M      GENERAL P… 6 HATF… NORT… MA    0106…  42.3\n 5 97c7e69… 68ea50ba-27… Alan… M      GENERAL P… 25 ARM… WEST… MA    0246…  42.4\n 6 3d3b1f7… 65f0254a-73… Carl… F      GENERAL P… 720 BO… MARL… MA    0175…  42.4\n 7 e0755f5… 27bf2e46-74… Kath… F      GENERAL P… 80 BOS… NORT… MA    0186…  42.6\n 8 03c9650… 200746fc-5d… Latr… F      GENERAL P… 800 CU… WOBU… MA    0180…  42.5\n 9 b622a6a… 9b1f8cd0-22… Clau… M      GENERAL P… 800 ES… LAWR… MA    0184…  42.7\n10 bedab72… a609d72c-6c… Mega… F      GENERAL P… 1000 N… PITT… MA    0120…  42.5\n# ℹ 16 more rows\n# ℹ 3 more variables: LON &lt;dbl&gt;, ENCOUNTERS &lt;dbl&gt;, PROCEDURES &lt;dbl&gt;\n\n\n\n# Perform anti-join to remove providers only present in check_prov2 from the original dataset\nproviders_filtered &lt;- providers %&gt;%\n  anti_join(providers_only_in_providers_df, by = c(\"NAME\" = \"NAME\"))\n\n# Print the dimensions of the resulting dataset\nprint(dim(providers_filtered))\n\n[1] 253  13\n\n\n\ncheck_pat &lt;- encounters_cleaning %&gt;%\n  group_by(PATIENT, GENDER.y) %&gt;%\n  summarize(COUNT = n())\n\n`summarise()` has grouped output by 'PATIENT'. You can override using the\n`.groups` argument.\n\ncheck_pat2 &lt;- patients %&gt;%\n  group_by(NAME,PATIENT)\n\n\ndim(check_pat)\n\n[1] 121   3\n\ndim(check_pat2)\n\n[1] 121  27\n\n\n\n# Perform a left join to merge encounters with provider_attributes based on PROVIDER\nencounters_cleaned &lt;- left_join(encounters, providers_filtered, by = \"PROVIDER\")\n# Replace the PROVIDER column with the corresponding names from the NAME column\nencounters_cleaned$PROVIDER &lt;- encounters_cleaned$NAME\n# Remove the NAME column if no longer needed\nencounters_cleaned &lt;- encounters_cleaned %&gt;%\n  select(-NAME)\n#Repeat for Provider\nencounters_cleaned &lt;- left_join(encounters_cleaned, patients, by = \"PATIENT\")\nencounters_cleaned$PATIENT &lt;- encounters_cleaned$NAME\nencounters_cleaned &lt;- encounters_cleaned %&gt;%\n  select(-NAME) \n#Clearly identify the Encounter ID\nencounters_cleaned &lt;- encounters_cleaned %&gt;%\n  rename(ENCOUNTER_ID = Id)\n\n\nencounter_attributes &lt;- encounters_cleaned %&gt;%\n  select(ENCOUNTER_ID, PATIENT, PROVIDER, GENDER.x, GENDER.y, RACE, MARITAL, ETHNICITY, INCOME, CITY.x, CITY.y)\n# View the updated dataframe\nhead(encounter_attributes)\n\n# A tibble: 6 × 11\n  ENCOUNTER_ID PATIENT PROVIDER GENDER.x GENDER.y RACE  MARITAL ETHNICITY INCOME\n  &lt;chr&gt;        &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;\n1 4afc6abc-ab… Norma4… Jeromy1… M        Female   white &lt;NA&gt;    nonhispa… 190464\n2 c502ee2d-1d… Peggie… Abdul21… M        Female   white &lt;NA&gt;    nonhispa…  78997\n3 6f3ad103-a2… Avril1… Marshal… M        Female   white &lt;NA&gt;    nonhispa… 482269\n4 0d9b475b-5e… Peggie… Benedic… M        Female   white &lt;NA&gt;    nonhispa…  78997\n5 ec0d6c63-84… Norma4… Jeromy1… M        Female   white &lt;NA&gt;    nonhispa… 190464\n6 ec41ff94-ed… Norma4… Jeromy1… M        Female   white &lt;NA&gt;    nonhispa… 190464\n# ℹ 2 more variables: CITY.x &lt;chr&gt;, CITY.y &lt;chr&gt;"
  },
  {
    "objectID": "posts/Post_Five/post_5.html#patient",
    "href": "posts/Post_Five/post_5.html#patient",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "PATIENT",
    "text": "PATIENT\n\npatient_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\npatient.stat &lt;- asNetwork(projected_graph$proj1)\n\npatient.se &lt;- equiv.clust(patient_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\n\npat_blk_model.patient.org &lt;- blockmodel(patient_matrix,\n patient.se, k = 4)\n\n\nplot.block&lt;-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(pat_blk_model.patient.org, main = \"patient\")\n\n\n\n\n\npat_blks6 &lt;- readRDS(\"pat_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\npat_blk_mod &lt;- blockmodel(patient_matrix, pat_blks6$best$best1$clu,\n                      plabels = rownames(patient_matrix))\n\n\n#assign block membership to vertex attribute\npatient.stat%v%\"role\"&lt;-pat_blk_mod$block.membership[match(patient.stat%v%\"vertex.names\",pat_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(patient.stat,\n               node.color=\"role\", \n               node.size=sna::degree(patient.stat, gmode=\"graph\"),\n               node.alpha = .5)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2"
  },
  {
    "objectID": "posts/Post_Five/post_5.html#provider",
    "href": "posts/Post_Five/post_5.html#provider",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "PROVIDER",
    "text": "PROVIDER\n\nprovider_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj2))\n\nprovider.stat &lt;- asNetwork(projected_graph$proj2)\n\nprovider.se &lt;- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\n\nblk_model.provider.org &lt;- blockmodel(provider_matrix,\n provider.se, k = 6)\n\n\nprov_blks6 &lt;- readRDS(\"prov_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\nprov_blk_mod &lt;- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n\n\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"&lt;-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")"
  },
  {
    "objectID": "posts/Post_Five/post_5.html#create-new-attribute-lists",
    "href": "posts/Post_Five/post_5.html#create-new-attribute-lists",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "Create New Attribute Lists",
    "text": "Create New Attribute Lists\n\npat_attr$block &lt;- pat_blk_mod$block.membership\npro_attr$block &lt;- prov_blk_mod$block.membership\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\n\npat_attr_list &lt;- do.call(list, pat_attr)\npro_attr_list &lt;- do.call(list, pro_attr)\nattribute_list &lt;- do.call(list, both_attr)\n\n\nprovider.st &lt;- network(provider_matrix,\n                       directed = FALSE,\n                       matrix.type = \"adjacency\",\n                       vertex.attr = pro_attr_list)\nprovider.st\n\n Network attributes:\n  vertices = 253 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 554 \n    missing edges= 0 \n    non-missing edges= 554 \n\n Vertex attribute names: \n    block CITY GENDER NAME type vertex.names \n\nNo edge attributes\n\n\n\nprovider_graph &lt;- graph_from_biadjacency_matrix(provider.st)\n\n\n#assign colors\n#colors &lt;-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors &lt;- colors[pro_attr_list$block]\nvertex_colors &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"red\", \"white\")\n\nvertex_shape &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n\n\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"SN Graph\")\n\n\n\n\nWhat other cities are on the provider list. Boston is not being properly represented, I have a feeling\n\ntable(pro_attr$CITY)\n\n\n         ALLSTON          AMHERST          ANDOVER        ARLINGTON \n               1                2                1                3 \n          AUBURN       AUBURNDALE       BELLINGHAM          BEVERLY \n               1                2                1                2 \n          Boston           BOSTON      BRIDGEWATER         BRIGHTON \n               1                5                2                2 \n        BROCKTON        BROOKLINE        CAMBRIDGE      CHARLESTOWN \n               1                2                4                1 \n        CHARLTON          CHATHAM       CHELMSFORD          CHELSEA \n               1                1                1                2 \n        CHICOPEE        DARTMOUTH           DEDHAM       DORCHESTER \n               2                1                5                2 \n      E FALMOUTH        Fairhaven        FAIRHAVEN       FALL RIVER \n               1                1                3                4 \n        FALMOUTH        Fitchburg       FOXBOROUGH       FRAMINGHAM \n               3                1                1                2 \n      GEORGETOWN           GROTON          HANOVER     HARWICH PORT \n               1                1                2                1 \n       HAVERHILL          HINGHAM        HOLLISTON          HOLYOKE \n               3                2                1                2 \n       HOPKINTON          HYANNIS        HYDE PARK    Jamaica Plain \n               2                2                1                1 \n   JAMAICA PLAIN         LAWRENCE       LEOMINSTER        LEXINGTON \n               2                3                2                3 \n          LOWELL           LUDLOW             Lynn             LYNN \n               3                1                1                1 \n          MALDEN      MARLBOROUGH         MATTAPAN          MEDFORD \n               1                5                2                2 \n         MELROSE          METHUEN       MIDDLEBORO          MILFORD \n               2                2                1                3 \n          MILTON           NATICK          NEEDHAM      NEW BEDFORD \n               3                3                2                3 \n     NEWBURYPORT           NEWTON      NORTH ADAMS    NORTH ANDOVER \n               1                5                1                1 \n NORTH DARTMOUTH      NORTHAMPTON     NORTHBOROUGH          NORWELL \n               1                1                1                3 \n         NORWOOD       OAK BLUFFS          PEABODY         PEMBROKE \n               6                1                2                1 \n      PITTSFIELD         PLYMOUTH           QUINCY         RANDOLPH \n               3                6                3                2 \n         RAYNHAM          READING         ROCHDALE       ROSLINDALE \n               2                1                1                4 \n          ROWLEY          ROXBURY       S YARMOUTH            SALEM \n               1                1                1                2 \n        SCITUATE           SHARON       SHREWSBURY       SOMERVILLE \n               3                1                1                3 \n  SOUTH YARMOUTH     SOUTHBOROUGH      SPRINGFIELD         STONEHAM \n               2                1                2                2 \n       STOUGHTON        TEWKSBURY            UPTON         UXBRIDGE \n               2                2                1                1 \n         WALPOLE          WALTHAM          WAREHAM        WELLESLEY \n               2                7                3                1 \nWEST BRIDGEWATER     West Roxbury     WEST ROXBURY      WESTBOROUGH \n               3                1                1                4 \n        WESTFORD         WESTWOOD         WEYMOUTH        WILBRAHAM \n               3                1                2                1 \n    WILLIAMSTOWN         WINTHROP           WOBURN        Worcester \n               1                1                6                1 \n       WORCESTER \n              17 \n\npro_attr &lt;- pro_attr %&gt;%\n  mutate(\n    CITY =tolower(CITY)\n  )\npro_attr_list &lt;- do.call(list, pro_attr)\n\nShould have cleaned that earlier, but here we go!\n\nBoston_Neighborhoods &lt;- c(\n  \"ALLSTON\",\n  \"BRIGHTON\",\n  \"BOSTON\",\n  \"CHARLESTOWN\",\n  \"DORCHESTER\",\n  \"HYDE PARK\",\n  \"JAMAICA PLAIN\",\n  \"MATTAPAN\",\n  \"ROSLINDALE\",\n  \"ROXBURY\",\n  \"West Roxbury\",\n  \"WEST ROXBURY\"\n)\nBoston_Neighborhoods &lt;- tolower(Boston_Neighborhoods)\n\n\n#assign colors\n#colors &lt;-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors &lt;- colors[pro_attr_list$block]\nvertex_colors &lt;- ifelse(pro_attr_list$CITY %in% Boston_Neighborhoods, \"red\", \"white\")\nvertex_shape &lt;- ifelse(pro_attr_list$block == \"1\", \"circle\", \"square\")\n#vertex_shape &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n\n\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = BOSTON\")\n\n\n\n\nSo… it’s not Boston related.\nHow about Highest populations\n\nlargest_pop &lt;- c(\n\"Boston\",\n\"Worcester\",\n\"Springfield\",\n\"Cambridge\",\n\"Lowell\",\n\"Brockton\",\n\"Quincy\",\n\"Lynn\",\n\"New Bedford\",\n\"Fall River\",\n\"Lawrence\",\n\"Newton\",\n\"Somerville\",\n\"Framingham\",\n\"Haverhill\")\nlargest_pop &lt;- tolower(largest_pop)\n\n\n#assign colors\n#colors &lt;-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors &lt;- colors[pro_attr_list$block]\nvertex_colors &lt;- ifelse(pro_attr_list$CITY %in% largest_pop, \"red\", \"white\")\nvertex_shape &lt;- ifelse(pro_attr_list$block == \"1\", \"circle\", \"square\")\n#vertex_shape &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n\n\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = Largest Cities\")\n\n\n\n\n\nblock1 &lt;- pro_attr %&gt;%\n  filter(block == 1)\nblock1\n\n# A tibble: 10 × 5\n   NAME                      GENDER CITY         type     block\n   &lt;chr&gt;                     &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt;    &lt;int&gt;\n 1 Ted955 Reilly981          M      fitchburg    PROVIDER     1\n 2 Barbara209 Maldonado119   F      leominster   PROVIDER     1\n 3 Gisele901 Lehner980       F      west roxbury PROVIDER     1\n 4 Vella930 Ankunding277     F      fall river   PROVIDER     1\n 5 Precious140 Runolfsson901 F      norwell      PROVIDER     1\n 6 Fernande593 Mosciski958   F      e falmouth   PROVIDER     1\n 7 Jolie499 Parisian75       F      worcester    PROVIDER     1\n 8 Archie818 McCullough561   M      medford      PROVIDER     1\n 9 Maxima831 Fahey393        F      plymouth     PROVIDER     1\n10 Mickey576 Borer986        F      worcester    PROVIDER     1\n\n\n\nTed955 &lt;- encounters_cleaned %&gt;% \n    filter(PROVIDER == \"Ted955 Reilly981\") %&gt;% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n\nTed955\n\n# A tibble: 11 × 4\n# Groups:   PROVIDER, CITY.x [1]\n   PROVIDER         CITY.x    REASONDESCRIPTION                            COUNT\n   &lt;chr&gt;            &lt;chr&gt;     &lt;chr&gt;                                        &lt;int&gt;\n 1 Ted955 Reilly981 Fitchburg Abnormal findings diagnostic imaging heart+…    11\n 2 Ted955 Reilly981 Fitchburg Acute ST segment elevation myocardial infar…     1\n 3 Ted955 Reilly981 Fitchburg Acute non-ST segment elevation myocardial i…     2\n 4 Ted955 Reilly981 Fitchburg Aortic valve regurgitation (disorder)            4\n 5 Ted955 Reilly981 Fitchburg Aortic valve stenosis (disorder)                 6\n 6 Ted955 Reilly981 Fitchburg Chronic congestive heart failure (disorder)     86\n 7 Ted955 Reilly981 Fitchburg History of coronary artery bypass grafting …     6\n 8 Ted955 Reilly981 Fitchburg Ischemic heart disease (disorder)               30\n 9 Ted955 Reilly981 Fitchburg Mitral valve regurgitation (disorder)            2\n10 Ted955 Reilly981 Fitchburg Myocardial infarction (disorder)                 3\n11 Ted955 Reilly981 Fitchburg Stroke                                           1\n\n\nGonna go ahead and say Ted’s a Cardiologist"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html",
    "href": "posts/Post_One - Copy/post_drug.html",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "",
    "text": "Research Question\nDoes the demographic profile, including factors such as marital status, gender, and income, significantly impact the utilization of healthcare services among people who use drugs (PWUD), and does it influence the structure and strength of social network connections between PWUD and healthcare providers?\nHypothesis\nData Collection\nData for this project were taken from Synthetic Mass, which creates Synthetic patient data from Synthea.\nCriteria for patient download will be set to include patients that have experienced overdose, substance use treatment, and have other indicators in their health records that could be considered substance use.\nWhile a whole host of datasets are available within each download, I will focus this project on three datasets: patients.csv, providers.csv, and encounters.csv.\nData Cleaning\nData for this project will be read in, reduced to only necessary data, cleaned (trim ws, recode variables, match across datasets, and other data cleaning processes)\nData Analysis\nAnalysis will primarily be of a two-mode network, developing an analysis of the patient-provider relationship. Weights will be assigned to the number of visits between patients and providers. Block Modeling analysis will be performed in one-mode networks of patient or providers to understand the structure of the networks. Blocks will be assigned to patients and providers as an attribute for analysis.\nCleaning\nThis post will primarily focus on data cleaning and data exploration with some exploration into social network analysis through transforming the data into an incidence matrix and plotting some attributes.\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(statnet)\nlibrary(ggplot2)\nlibrary(patchwork)"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#patient-data",
    "href": "posts/Post_One - Copy/post_drug.html#patient-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "PATIENT DATA",
    "text": "PATIENT DATA\nThe following table is the data available in the patient dataset.\n\npatients &lt;- read_csv(\"synthea_sample_data_csv_latest/patients.csv\")\n\nRows: 86 Columns: 27\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (19): Id, SSN, DRIVERS, PASSPORT, PREFIX, FIRST, LAST, SUFFIX, MAIDEN, ...\ndbl   (6): FIPS, LAT, LON, HEALTHCARE_EXPENSES, HEALTHCARE_COVERAGE, INCOME\ndate  (2): BIRTHDATE, DEATHDATE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(patients)\n\n# A tibble: 6 × 27\n  Id      BIRTHDATE  DEATHDATE SSN    DRIVERS PASSPORT PREFIX FIRST LAST  SUFFIX\n  &lt;chr&gt;   &lt;date&gt;     &lt;date&gt;    &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n1 fd7d27… 1986-07-11 NA        999-5… S99942… X400041… Mrs.   Anni… Glea… &lt;NA&gt;  \n2 cb36b3… 1958-12-12 NA        999-7… S99991… X680941… Mrs.   Juli… Barr… &lt;NA&gt;  \n3 757603… 1977-08-09 NA        999-7… S99974… X378787… Mrs.   Ales… Hean… &lt;NA&gt;  \n4 a970cc… 1997-07-04 NA        999-8… S99937… X401363… Ms.    Sand… Rice… &lt;NA&gt;  \n5 298741… 1979-05-05 NA        999-2… S99988… X201473… Mrs.   Mia3… Runt… &lt;NA&gt;  \n6 0863bd… 1997-11-12 NA        999-8… S99962… X675884… Mr.    Dami… Dach… &lt;NA&gt;  \n# ℹ 17 more variables: MAIDEN &lt;chr&gt;, MARITAL &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ETHNICITY &lt;chr&gt;, GENDER &lt;chr&gt;, BIRTHPLACE &lt;chr&gt;, ADDRESS &lt;chr&gt;, CITY &lt;chr&gt;,\n#   STATE &lt;chr&gt;, COUNTY &lt;chr&gt;, FIPS &lt;dbl&gt;, ZIP &lt;chr&gt;, LAT &lt;dbl&gt;, LON &lt;dbl&gt;,\n#   HEALTHCARE_EXPENSES &lt;dbl&gt;, HEALTHCARE_COVERAGE &lt;dbl&gt;, INCOME &lt;dbl&gt;\n\n\n\nstr(patients)\n\nspc_tbl_ [86 × 27] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Id                 : chr [1:86] \"fd7d2777-0aa7-4495-7355-7d57087f73b1\" \"cb36b365-bfa5-aa61-3240-ed97d2c7b7fa\" \"75760354-5f22-c391-cb3a-f7523b73277d\" \"a970cca2-8c88-a67a-8675-00aa26069356\" ...\n $ BIRTHDATE          : Date[1:86], format: \"1986-07-11\" \"1958-12-12\" ...\n $ DEATHDATE          : Date[1:86], format: NA NA ...\n $ SSN                : chr [1:86] \"999-54-2711\" \"999-75-6253\" \"999-70-3855\" \"999-86-9249\" ...\n $ DRIVERS            : chr [1:86] \"S99942559\" \"S99991886\" \"S99974938\" \"S99937640\" ...\n $ PASSPORT           : chr [1:86] \"X40004111X\" \"X68094169X\" \"X37878770X\" \"X40136308X\" ...\n $ PREFIX             : chr [1:86] \"Mrs.\" \"Mrs.\" \"Mrs.\" \"Ms.\" ...\n $ FIRST              : chr [1:86] \"Annice210\" \"Julianne852\" \"Alesha810\" \"Sandee884\" ...\n $ LAST               : chr [1:86] \"Gleason633\" \"Barrows492\" \"Heaney114\" \"Rice937\" ...\n $ SUFFIX             : chr [1:86] NA NA NA NA ...\n $ MAIDEN             : chr [1:86] \"Koss676\" \"Jacobs452\" \"Labadie908\" NA ...\n $ MARITAL            : chr [1:86] \"M\" \"W\" \"D\" NA ...\n $ RACE               : chr [1:86] \"white\" \"white\" \"white\" \"white\" ...\n $ ETHNICITY          : chr [1:86] \"nonhispanic\" \"nonhispanic\" \"nonhispanic\" \"nonhispanic\" ...\n $ GENDER             : chr [1:86] \"F\" \"F\" \"F\" \"F\" ...\n $ BIRTHPLACE         : chr [1:86] \"Wrentham  Massachusetts  US\" \"Yarmouth Port  Massachusetts  US\" \"East Harwich  Massachusetts  US\" \"Springfield  Massachusetts  US\" ...\n $ ADDRESS            : chr [1:86] \"288 Steuber Landing Suite 38\" \"782 Lynch Dale\" \"415 Emmerich Trail\" \"726 Harvey Throughway\" ...\n $ CITY               : chr [1:86] \"Brookline\" \"Hamilton\" \"Framingham\" \"Taunton\" ...\n $ STATE              : chr [1:86] \"Massachusetts\" \"Massachusetts\" \"Massachusetts\" \"Massachusetts\" ...\n $ COUNTY             : chr [1:86] \"Norfolk County\" \"Essex County\" \"Middlesex County\" \"Bristol County\" ...\n $ FIPS               : num [1:86] 25021 NA 25017 25005 NA ...\n $ ZIP                : chr [1:86] \"02446\" \"00000\" \"01701\" \"02767\" ...\n $ LAT                : num [1:86] 42.4 42.6 42.2 41.9 42.6 ...\n $ LON                : num [1:86] -71.1 -70.8 -71.5 -71.1 -71.4 ...\n $ HEALTHCARE_EXPENSES: num [1:86] 13891 1027127 1021095 80365 577671 ...\n $ HEALTHCARE_COVERAGE: num [1:86] 550582 224662 180027 159483 691055 ...\n $ INCOME             : num [1:86] 1565 39537 114339 96256 71238 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Id = col_character(),\n  ..   BIRTHDATE = col_date(format = \"\"),\n  ..   DEATHDATE = col_date(format = \"\"),\n  ..   SSN = col_character(),\n  ..   DRIVERS = col_character(),\n  ..   PASSPORT = col_character(),\n  ..   PREFIX = col_character(),\n  ..   FIRST = col_character(),\n  ..   LAST = col_character(),\n  ..   SUFFIX = col_character(),\n  ..   MAIDEN = col_character(),\n  ..   MARITAL = col_character(),\n  ..   RACE = col_character(),\n  ..   ETHNICITY = col_character(),\n  ..   GENDER = col_character(),\n  ..   BIRTHPLACE = col_character(),\n  ..   ADDRESS = col_character(),\n  ..   CITY = col_character(),\n  ..   STATE = col_character(),\n  ..   COUNTY = col_character(),\n  ..   FIPS = col_double(),\n  ..   ZIP = col_character(),\n  ..   LAT = col_double(),\n  ..   LON = col_double(),\n  ..   HEALTHCARE_EXPENSES = col_double(),\n  ..   HEALTHCARE_COVERAGE = col_double(),\n  ..   INCOME = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nsummary(patients)\n\n      Id              BIRTHDATE            DEATHDATE         \n Length:86          Min.   :1918-12-18   Min.   :1980-02-04  \n Class :character   1st Qu.:1956-09-07   1st Qu.:1999-02-19  \n Mode  :character   Median :1973-07-22   Median :2007-02-09  \n                    Mean   :1971-05-21   Mean   :2005-05-07  \n                    3rd Qu.:1987-07-27   3rd Qu.:2016-01-04  \n                    Max.   :2004-12-24   Max.   :2021-09-26  \n                                         NA's   :73          \n     SSN              DRIVERS            PASSPORT            PREFIX         \n Length:86          Length:86          Length:86          Length:86         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    FIRST               LAST              SUFFIX             MAIDEN         \n Length:86          Length:86          Length:86          Length:86         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   MARITAL              RACE            ETHNICITY            GENDER         \n Length:86          Length:86          Length:86          Length:86         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n  BIRTHPLACE          ADDRESS              CITY              STATE          \n Length:86          Length:86          Length:86          Length:86         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    COUNTY               FIPS           ZIP                 LAT       \n Length:86          Min.   :25001   Length:86          Min.   :41.55  \n Class :character   1st Qu.:25009   Class :character   1st Qu.:41.95  \n Mode  :character   Median :25017   Mode  :character   Median :42.31  \n                    Mean   :25015                      Mean   :42.21  \n                    3rd Qu.:25021                      3rd Qu.:42.46  \n                    Max.   :25027                      Max.   :42.82  \n                    NA's   :21                                        \n      LON         HEALTHCARE_EXPENSES HEALTHCARE_COVERAGE     INCOME      \n Min.   :-73.09   Min.   :   9291     Min.   :      0     Min.   :  1565  \n 1st Qu.:-71.45   1st Qu.:  39582     1st Qu.:  65610     1st Qu.: 30205  \n Median :-71.14   Median : 108692     Median : 322025     Median : 69924  \n Mean   :-71.27   Mean   : 206222     Mean   : 471978     Mean   :161151  \n 3rd Qu.:-70.97   3rd Qu.: 262415     3rd Qu.: 690279     3rd Qu.:128855  \n Max.   :-70.17   Max.   :1058955     Max.   :1893513     Max.   :840567  \n                                                                          \n\n\n\n#create NAME column combining FIRST and LAST names\npatients &lt;- patients %&gt;%\n    rename(PATIENT = Id) %&gt;%\n  unite(NAME, FIRST, LAST, sep = \" \")\n\n#trim whitespace NAME\npatients$NAME &lt;- trimws(patients$NAME)\n\n#trim whitespace COUNTY\npatients$CITY &lt;- trimws(patients$CITY)\n\n#clean up GENDER, RACE, ETHNICITY, and INCOME sections\npatients &lt;- patients %&gt;%\n  mutate(\n    GENDER = tolower(GENDER),\n    GENDER = case_when(\n      GENDER %in% c(\"male\", \"m\", \"man\") ~ \"Male\",\n      GENDER %in% c(\"female\", \"f\", \"woman\") ~ \"Female\",\n      TRUE ~ NA_character_  # assign NA to any non-standard values\n    ),\n# city (patient)\n    CITY =tolower(CITY),\n# race (patient)\n    RACE = tolower(RACE),  # convert race to lower case for consistency\n\n# ethnicity (patient)\n    ETHNICITY = tolower(ETHNICITY),  # convert ethnicity to lower case for consistency\n\n# marital (patient)\n    MARITAL = ifelse(MARITAL == \"M\", \"Married\",\n                    ifelse(MARITAL == \"D\", \"Divorced\",\n                    ifelse(MARITAL == \"W\", \"Widowed\",\n                    ifelse(MARITAL == \"S\", \"Single\", MARITAL)))),\n\n# income (patient)\n    INCOME = as.numeric(INCOME)  # convert income to numeric if necessary\n  ) %&gt;%\n  drop_na(GENDER, RACE) \n\nI am only keeping the demographic data below (gender, race, marital status, income, and age) which will be used as an attribute for each patient.\n\n#Create AGE from BIRTHDATE\npatients &lt;- patients %&gt;%\n  mutate(\n    BIRTHDATE = as.Date(BIRTHDATE),  # Ensure 'dob' is in Date format\n    AGE = interval(BIRTHDATE, today()) / years(1)  # Calculate age in years\n  ) %&gt;%\n  mutate(\n    AGE = floor(AGE)  # complete years only, removing decimal\n  )\n# Only keep patient name and demographics. This will be utilized as the attribute data for analysis.\npat_attr &lt;- patients%&gt;% \n  select(NAME, GENDER, RACE, MARITAL, CITY, INCOME, AGE)\nhead(pat_attr)\n\n# A tibble: 6 × 7\n  NAME                   GENDER RACE  MARITAL  CITY       INCOME   AGE\n  &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Annice210 Gleason633   Female white Married  brookline    1565    37\n2 Julianne852 Barrows492 Female white Widowed  hamilton    39537    65\n3 Alesha810 Heaney114    Female white Divorced framingham 114339    46\n4 Sandee884 Rice937      Female white &lt;NA&gt;     taunton     96256    26\n5 Mia349 Runte676        Female white Divorced chelmsford  71238    44\n6 Damian46 Dach178       Male   white &lt;NA&gt;     swansea     74155    26\n\n\n\npat_race &lt;- ggplot(pat_attr,aes(RACE)) + geom_bar()\npat_gender &lt;- ggplot(pat_attr,aes(GENDER)) + geom_bar()\n\npat_race + pat_gender + plot_annotation(title = \"Patient Race and Gender Breakdown\")\n\n\n\nggplot(pat_attr,aes(MARITAL)) + geom_bar() + labs(title = \"Patient Marital Status\")\n\n\n\npat_income &lt;- ggplot(pat_attr, aes(x = 1, y = INCOME)) +\n    geom_jitter(width = 0.2) +\n    labs(x = NULL, y = \"Income\") +\n    theme_minimal() + labs(title = \"Patient Income\")\n\nsummary(pat_attr$INCOME)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1565   30205   69924  161151  128855  840567 \n\npat_age &lt;- ggplot(pat_attr,aes(AGE)) + geom_bar()\n\nggplot(data = patients %&gt;% \n         count(CITY) %&gt;% \n         filter(n &gt; 2),  # Filter for counts higher than 10\n       aes(x = CITY, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Patients Cities\", \"\\n*filtered to show &gt;2 Patients per City\"))"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#provider-data",
    "href": "posts/Post_One - Copy/post_drug.html#provider-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "PROVIDER DATA",
    "text": "PROVIDER DATA\nThe following table is the data available in the provider dataset.\n\nproviders &lt;- read_csv(\"synthea_sample_data_csv_latest/providers.csv\") %&gt;%\n    rename(PROVIDER = Id)\n\nRows: 815 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Id, ORGANIZATION, NAME, GENDER, SPECIALITY, ADDRESS, CITY, STATE, ZIP\ndbl (4): LAT, LON, ENCOUNTERS, PROCEDURES\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(providers)\n\n# A tibble: 6 × 13\n  PROVIDER  ORGANIZATION NAME  GENDER SPECIALITY ADDRESS CITY  STATE ZIP     LAT\n  &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 86726ad9… 74ab949d-17… Ted9… M      GENERAL P… 881 Ma… Fitc… MA    01420  42.6\n2 47fdff5b… 588f6ce6-b8… Tiff… F      GENERAL P… 461 WA… JAMA… MA    0213…  42.3\n3 b31700a0… 324b4137-57… Herm… F      GENERAL P… 134 NO… NORT… MA    0186…  42.6\n4 0ada8fec… b6398e07-49… Shan… M      GENERAL P… 19 TAC… WORC… MA    0160…  42.3\n5 31214beb… faffaf6a-ee… Jaun… F      GENERAL P… 66 WAS… STOU… MA    0207…  42.1\n6 38a7cc67… 17a4bae5-8b… Olym… F      GENERAL P… 512 MA… SHRE… MA    0154…  42.3\n# ℹ 3 more variables: LON &lt;dbl&gt;, ENCOUNTERS &lt;dbl&gt;, PROCEDURES &lt;dbl&gt;\n\n\nI am only keeping the demographic data below (gender) which will be used as an attribute for each provider.\n\n#trim whitespace NAME\nproviders$NAME &lt;- trimws(providers$NAME)\nproviders &lt;- providers %&gt;%\n  mutate(\n    GENDER = tolower(GENDER),\n    GENDER = case_when(\n      GENDER %in% c(\"male\", \"m\", \"man\") ~ \"Male\",\n      GENDER %in% c(\"female\", \"f\", \"woman\") ~ \"Female\",\n      TRUE ~ NA_character_  # assign NA to any non-standard values\n    ),\n    CITY =tolower(CITY)\n  )"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#encounter-data",
    "href": "posts/Post_One - Copy/post_drug.html#encounter-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "ENCOUNTER DATA",
    "text": "ENCOUNTER DATA\n\nencounters &lt;- read_csv(\"synthea_sample_data_csv_latest/encounters.csv\")\n\nRows: 6109 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): Id, PATIENT, ORGANIZATION, PROVIDER, PAYER, ENCOUNTERCLASS, DESCRI...\ndbl  (5): CODE, BASE_ENCOUNTER_COST, TOTAL_CLAIM_COST, PAYER_COVERAGE, REASO...\ndttm (2): START, STOP\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(encounters)\n\n# A tibble: 6 × 15\n  Id       START               STOP                PATIENT ORGANIZATION PROVIDER\n  &lt;chr&gt;    &lt;dttm&gt;              &lt;dttm&gt;              &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;   \n1 1b544ce… 2000-11-11 13:33:09 2000-11-11 14:33:09 fd7d27… db28cc9a-fd… 715b985…\n2 0d642d8… 2001-03-30 13:33:09 2001-03-30 14:33:09 fd7d27… db28cc9a-fd… 715b985…\n3 99d190e… 2001-11-28 13:33:09 2001-11-28 14:33:09 fd7d27… db28cc9a-fd… 715b985…\n4 cc07637… 2004-09-03 13:33:09 2004-09-03 14:31:19 fd7d27… 3d5fbf38-c7… 2655ff5…\n5 05a2433… 2005-09-09 13:33:09 2005-09-09 14:16:34 fd7d27… 3d5fbf38-c7… 2655ff5…\n6 8844f58… 2008-09-12 13:33:09 2008-09-12 14:28:22 fd7d27… 3d5fbf38-c7… 2655ff5…\n# ℹ 9 more variables: PAYER &lt;chr&gt;, ENCOUNTERCLASS &lt;chr&gt;, CODE &lt;dbl&gt;,\n#   DESCRIPTION &lt;chr&gt;, BASE_ENCOUNTER_COST &lt;dbl&gt;, TOTAL_CLAIM_COST &lt;dbl&gt;,\n#   PAYER_COVERAGE &lt;dbl&gt;, REASONCODE &lt;dbl&gt;, REASONDESCRIPTION &lt;chr&gt;"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#combine-patient-provider-and-encounter-data",
    "href": "posts/Post_One - Copy/post_drug.html#combine-patient-provider-and-encounter-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "Combine Patient, Provider, and Encounter Data",
    "text": "Combine Patient, Provider, and Encounter Data\nI am taking this step here so that I have a master dataset (encounters_attributes) and so that I can create an edgelist more easily.\n\n# Perform a left join to merge encounters with provider_attributes based on PROVIDER\nencounters_cleaning &lt;- left_join(encounters, providers, by = \"PROVIDER\")\n# Replace the PROVIDER column with the corresponding names from the NAME column\nencounters_cleaning$PROVIDER &lt;- encounters_cleaning$NAME\n# Remove the NAME column if no longer needed\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  select(-NAME)\n#Repeat for Provider\nencounters_cleaning &lt;- left_join(encounters_cleaning, patients, by = \"PATIENT\")\nencounters_cleaning$PATIENT &lt;- encounters_cleaning$NAME\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  select(-NAME) \n#Clearly identify the Encounter ID\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  rename(ENCOUNTER_ID = Id)"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#check-dimensions-between-datasets",
    "href": "posts/Post_One - Copy/post_drug.html#check-dimensions-between-datasets",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "Check Dimensions between Datasets",
    "text": "Check Dimensions between Datasets\nIn later analysis I noticed that while there are more providers in the provider.csv, than there are providers listed in the encounters.csv. I will clean the data to only include providers that appear in the encounters.csv.\n\ncheck_prov &lt;- encounters_cleaning %&gt;%\n  group_by(PROVIDER, GENDER.x) %&gt;%\n  summarize(COUNT = n())\n\n`summarise()` has grouped output by 'PROVIDER'. You can override using the\n`.groups` argument.\n\ncheck_prov_enc &lt;- providers %&gt;% \n  group_by(NAME, PROVIDER)\n\n\ndim(check_prov)\n\n[1] 222   3\n\ndim(check_prov_enc)\n\n[1] 815  13\n\n\n\n# Perform semi-join to keep providers present in both datasets\nproviders_only_in_providers_df &lt;- check_prov_enc %&gt;%\n  anti_join(check_prov, by = c(\"NAME\" = \"PROVIDER\"))\n\n# Print the dimensions of the filtered dataset\nprint(dim(providers_only_in_providers_df))\n\n[1] 592  13\n\nprint(providers_only_in_providers_df)\n\n# A tibble: 592 × 13\n# Groups:   NAME, PROVIDER [592]\n   PROVIDER ORGANIZATION NAME  GENDER SPECIALITY ADDRESS CITY  STATE ZIP     LAT\n   &lt;chr&gt;    &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 47fdff5… 588f6ce6-b8… Tiff… Female GENERAL P… 461 WA… jama… MA    0213…  42.3\n 2 b31700a… 324b4137-57… Herm… Female GENERAL P… 134 NO… nort… MA    0186…  42.6\n 3 31214be… faffaf6a-ee… Jaun… Female GENERAL P… 66 WAS… stou… MA    0207…  42.1\n 4 38a7cc6… 17a4bae5-8b… Olym… Female GENERAL P… 512 MA… shre… MA    0154…  42.3\n 5 5b8e0a3… 4112b8b1-59… Ambr… Male   GENERAL P… 37 ROU… sand… MA    0256…  41.8\n 6 5cb9747… e76b5eb0-0c… Gise… Female GENERAL P… 1400 V… west… MA    02132  42.3\n 7 633f248… c241b977-41… Kip4… Male   GENERAL P… 94 MAI… hyan… MA    0260…  41.7\n 8 4886d4a… ef5390b4-cb… Mila… Male   GENERAL P… 360 ME… mald… MA    0214…  42.4\n 9 774bf03… 6fafb5d4-ec… Shel… Female GENERAL P… 320 WE… west… MA    02379  42.0\n10 f4e1828… aa682136-a4… Ánge… Female GENERAL P… 501 CO… norw… MA    0206…  42.2\n# ℹ 582 more rows\n# ℹ 3 more variables: LON &lt;dbl&gt;, ENCOUNTERS &lt;dbl&gt;, PROCEDURES &lt;dbl&gt;\n\n\n\n# Perform anti-join to remove providers only present in check_prov_enc from the original dataset\nproviders_filtered &lt;- providers %&gt;%\n  anti_join(providers_only_in_providers_df, by = c(\"NAME\" = \"NAME\"))\n\n# Print the dimensions of the resulting dataset\nprint(dim(providers_filtered))\n\n[1] 223  13\n\n\nResult is 223, though it should be 222.\n\n# Find duplicate rows based on the NAME column\nduplicate_rows &lt;- providers_filtered[duplicated(providers_filtered$NAME) | duplicated(providers_filtered$NAME, fromLast = TRUE), ]\n\n# Print the duplicate rows\nprint(duplicate_rows %&gt;% select(PROVIDER, CITY))\n\n# A tibble: 2 × 2\n  PROVIDER                             CITY      \n  &lt;chr&gt;                                &lt;chr&gt;     \n1 be12b8b5-2618-3d5e-a976-199d56505cd0 leominster\n2 8e8ca291-3456-359b-9a13-0a6dc7016381 reading   \n\n\nAh Maynard.\n\n# Find duplicate rows based on the NAME column\nMaynard_rows &lt;- encounters_cleaning %&gt;% filter (PROVIDER == \"Maynard46 Buckridge80\")\n\n# Print the duplicate rows\nprint(Maynard_rows %&gt;% group_by(CITY.x)) %&gt;% select(PROVIDER, CITY.x)\n\n# A tibble: 22 × 51\n# Groups:   CITY.x [1]\n   ENCOUNTER_ID   START               STOP                PATIENT ORGANIZATION.x\n   &lt;chr&gt;          &lt;dttm&gt;              &lt;dttm&gt;              &lt;chr&gt;   &lt;chr&gt;         \n 1 a4e40cc3-e8e2… 1958-10-16 18:06:02 1958-10-16 18:51:39 Tommy8… 817f4acb-0184…\n 2 64f7e2f4-4fef… 1960-10-27 18:06:02 1960-10-27 18:47:34 Tommy8… 817f4acb-0184…\n 3 c194d751-9164… 1978-11-16 18:06:02 1978-11-16 18:49:04 Tommy8… 817f4acb-0184…\n 4 8f814ff1-65a5… 1979-11-22 18:06:02 1979-11-22 18:47:03 Tommy8… 817f4acb-0184…\n 5 d99e97ef-b857… 1981-12-03 18:06:02 1981-12-03 19:01:22 Tommy8… 817f4acb-0184…\n 6 c3a214d7-4f71… 1982-12-09 18:06:02 1982-12-09 19:00:00 Tommy8… 817f4acb-0184…\n 7 4a9f1c7b-574c… 1985-12-26 18:06:02 1985-12-26 18:51:22 Tommy8… 817f4acb-0184…\n 8 e8e4f402-08a2… 1987-01-01 18:06:02 1987-01-01 18:46:31 Tommy8… 817f4acb-0184…\n 9 24e91e6e-4ec8… 1989-01-12 18:06:02 1989-01-12 18:38:56 Tommy8… 817f4acb-0184…\n10 83cc31e3-4efc… 1991-01-24 18:06:02 1991-01-24 19:02:22 Tommy8… 817f4acb-0184…\n# ℹ 12 more rows\n# ℹ 46 more variables: PROVIDER &lt;chr&gt;, PAYER &lt;chr&gt;, ENCOUNTERCLASS &lt;chr&gt;,\n#   CODE &lt;dbl&gt;, DESCRIPTION &lt;chr&gt;, BASE_ENCOUNTER_COST &lt;dbl&gt;,\n#   TOTAL_CLAIM_COST &lt;dbl&gt;, PAYER_COVERAGE &lt;dbl&gt;, REASONCODE &lt;dbl&gt;,\n#   REASONDESCRIPTION &lt;chr&gt;, ORGANIZATION.y &lt;chr&gt;, GENDER.x &lt;chr&gt;,\n#   SPECIALITY &lt;chr&gt;, ADDRESS.x &lt;chr&gt;, CITY.x &lt;chr&gt;, STATE.x &lt;chr&gt;,\n#   ZIP.x &lt;chr&gt;, LAT.x &lt;dbl&gt;, LON.x &lt;dbl&gt;, ENCOUNTERS &lt;dbl&gt;, …\n\n\n# A tibble: 22 × 2\n# Groups:   CITY.x [1]\n   PROVIDER              CITY.x \n   &lt;chr&gt;                 &lt;chr&gt;  \n 1 Maynard46 Buckridge80 reading\n 2 Maynard46 Buckridge80 reading\n 3 Maynard46 Buckridge80 reading\n 4 Maynard46 Buckridge80 reading\n 5 Maynard46 Buckridge80 reading\n 6 Maynard46 Buckridge80 reading\n 7 Maynard46 Buckridge80 reading\n 8 Maynard46 Buckridge80 reading\n 9 Maynard46 Buckridge80 reading\n10 Maynard46 Buckridge80 reading\n# ℹ 12 more rows\n\n\nI’ll choose the Maynard in Reading and remove the Maynard in Leominster.\n\nproviders_filtered &lt;- providers_filtered %&gt;%\n  filter(PROVIDER != \"be12b8b5-2618-3d5e-a976-199d56505cd0\")\n# Print the dimensions of the resulting dataset\nprint(dim(providers_filtered))\n\n[1] 222  13\n\n\n\ncheck_pat &lt;- encounters_cleaning %&gt;%\n  group_by(PATIENT, GENDER.y) %&gt;%\n  summarize(COUNT = n())\n\n`summarise()` has grouped output by 'PATIENT'. You can override using the\n`.groups` argument.\n\ncheck_pat_enc &lt;- patients %&gt;%\n  group_by(NAME,PATIENT)\n\n\ndim(check_pat)\n\n[1] 86  3\n\ndim(check_pat_enc)\n\n[1] 86 27\n\n\nPatients have the same dimensions."
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#patient-data-2",
    "href": "posts/Post_One - Copy/post_drug.html#patient-data-2",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "PATIENT DATA 2",
    "text": "PATIENT DATA 2\n\nggplot(providers_filtered, aes(GENDER)) +geom_bar() + labs(title = \"Provider Gender Breakdown\")\n\n\n\nggplot(data = providers_filtered %&gt;% \n         count(CITY) %&gt;% \n         filter(n &gt; 5),  # Filter for counts higher than 10\n       aes(x = CITY, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Provider Cities\", \"\\n*filtered to show &gt;5 Providers per City\"))"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#encounter-data-2",
    "href": "posts/Post_One - Copy/post_drug.html#encounter-data-2",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "ENCOUNTER DATA 2",
    "text": "ENCOUNTER DATA 2\n\nggplot(encounters, aes(ENCOUNTERCLASS)) + geom_bar() + coord_flip()+ labs(title = \"Type of Visit\")\n\n\n\nggplot(data = encounters %&gt;% \n         count(DESCRIPTION) %&gt;% \n         filter(n &gt; 50),  # Filter for counts higher than 10\n       aes(x = DESCRIPTION, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Visit Description\", \"\\n*filtered to show &gt;50 visits\"))\n\n\n\nggplot(data = encounters %&gt;% \n         count(REASONDESCRIPTION) %&gt;% \n         filter(n &gt; 50),  # Filter for counts higher than 10\n       aes(x = reorder(REASONDESCRIPTION, n), y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Reason Patient Visited Provider\", \"\\n*filtered to show &gt;50 visits\"))\n\n\n\n\nAside from NA (which does not stand for Narcotics Anonymous) the most frequent reason a patient visits a provider is for “Dependent drug abuse (disorder)”. This is exactly what I would have anticipated seeing in this dataset, considering I called for only patients with a high likelyhood of being drug dependent.\nThe second most frequent reason for visiting a provider is “Chronic kidney disease stage 4 (disorder)”. One insight I have been given is that kidney disease may involve a lot of trips to the doctors for dialysis. I may look into this dataset to see if I’m right, but this is more a side tangent."
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#join-datasets",
    "href": "posts/Post_One - Copy/post_drug.html#join-datasets",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "Join Datasets",
    "text": "Join Datasets\n\n# Perform a left join to merge encounters with provider_attributes based on PROVIDER\nencounters_cleaned &lt;- left_join(encounters, providers_filtered, by = \"PROVIDER\")\n# Replace the PROVIDER column with the corresponding names from the NAME column\nencounters_cleaned$PROVIDER &lt;- encounters_cleaned$NAME\n# Remove the NAME column if no longer needed\nencounters_cleaned &lt;- encounters_cleaned %&gt;%\n  select(-NAME)\n#Repeat for Provider\nencounters_cleaned &lt;- left_join(encounters_cleaned, patients, by = \"PATIENT\")\nencounters_cleaned$PATIENT &lt;- encounters_cleaned$NAME\nencounters_cleaned &lt;- encounters_cleaned %&gt;%\n  select(-NAME) \n#Clearly identify the Encounter ID\nencounters_cleaned &lt;- encounters_cleaned %&gt;%\n  rename(ENCOUNTER_ID = Id)\n\n\nencounter_attributes &lt;- encounters_cleaned %&gt;%\n  select(ENCOUNTER_ID, PATIENT, PROVIDER, GENDER.x, GENDER.y, RACE, MARITAL, ETHNICITY, INCOME, CITY.x, CITY.y)\n# View the updated dataframe\nhead(encounter_attributes)\n\n# A tibble: 6 × 11\n  ENCOUNTER_ID PATIENT PROVIDER GENDER.x GENDER.y RACE  MARITAL ETHNICITY INCOME\n  &lt;chr&gt;        &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;\n1 1b544ceb-bf… Annice… Clement… Male     Female   white Married nonhispa…   1565\n2 0d642d81-96… Annice… Clement… Male     Female   white Married nonhispa…   1565\n3 99d190e1-67… Annice… Clement… Male     Female   white Married nonhispa…   1565\n4 cc076374-d3… Annice… Enrique… Female   Female   white Married nonhispa…   1565\n5 05a24332-4d… Annice… Enrique… Female   Female   white Married nonhispa…   1565\n6 8844f58d-3e… Annice… Enrique… Female   Female   white Married nonhispa…   1565\n# ℹ 2 more variables: CITY.x &lt;chr&gt;, CITY.y &lt;chr&gt;"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#edgelist",
    "href": "posts/Post_One - Copy/post_drug.html#edgelist",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "EDGELIST",
    "text": "EDGELIST\n\n# Create Edgelist & Assign Weight by Count of Encounter\nencounters_el &lt;- encounter_attributes %&gt;%\n  group_by(PATIENT, PROVIDER) %&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PATIENT'. You can override using the\n`.groups` argument.\n\nhead(encounters_el)\n\n# A tibble: 6 × 3\n# Groups:   PATIENT [2]\n  PATIENT             PROVIDER                  COUNT\n  &lt;chr&gt;               &lt;chr&gt;                     &lt;int&gt;\n1 Adam631 Hoppe518    Elijah719 White193            8\n2 Adam631 Hoppe518    Fidel864 Swift555             2\n3 Adam631 Hoppe518    Virgen207 Hyatt152            3\n4 Adam631 Hoppe518    Zachery872 Pagac496          31\n5 Alesha810 Heaney114 Kristopher775 Schiller186    13\n6 Alesha810 Heaney114 Laine739 Torphy630            4\n\ndim(encounters_el)\n\n[1] 341   3"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#combined-attribute-list",
    "href": "posts/Post_One - Copy/post_drug.html#combined-attribute-list",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "COMBINED ATTRIBUTE LIST",
    "text": "COMBINED ATTRIBUTE LIST\n\n#combine pro and pat attr\npat_attr$type &lt;- \"PATIENT\"\npro_attr &lt;- providers_filtered %&gt;%\n  select(NAME, GENDER, CITY)\npro_attr$type &lt;- \"PROVIDER\"\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n\n# A tibble: 6 × 8\n  NAME                   GENDER RACE  MARITAL  CITY       INCOME   AGE type   \n  &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1 Annice210 Gleason633   Female white Married  brookline    1565    37 PATIENT\n2 Julianne852 Barrows492 Female white Widowed  hamilton    39537    65 PATIENT\n3 Alesha810 Heaney114    Female white Divorced framingham 114339    46 PATIENT\n4 Sandee884 Rice937      Female white &lt;NA&gt;     taunton     96256    26 PATIENT\n5 Mia349 Runte676        Female white Divorced chelmsford  71238    44 PATIENT\n6 Damian46 Dach178       Male   white &lt;NA&gt;     swansea     74155    26 PATIENT\n\n\n\n#create combined attribute list\nattribute_list &lt;- do.call(list, both_attr)"
  },
  {
    "objectID": "posts/Post_One - Copy/post_drug.html#network",
    "href": "posts/Post_One - Copy/post_drug.html#network",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "NETWORK",
    "text": "NETWORK\n\n# create bipartite network with attributes\nencounters.st.3 &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\nencounters.st.3\n\n Network attributes:\n  vertices = 308 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = 86 \n  total edges= 341 \n    missing edges= 0 \n    non-missing edges= 341 \n\n Vertex attribute names: \n    AGE CITY GENDER INCOME MARITAL NAME RACE type vertex.names \n\n Edge attribute names: \n    COUNT"
  },
  {
    "objectID": "posts/Post_Six/post_6.html",
    "href": "posts/Post_Six/post_6.html",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(tigris)\nlibrary(stplanr)\nThis post will explore the Synthetic Mass network data in more detail."
  },
  {
    "objectID": "posts/Post_Six/post_6.html#patient",
    "href": "posts/Post_Six/post_6.html#patient",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "PATIENT",
    "text": "PATIENT\n\npatient_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\npatient.stat &lt;- asNetwork(projected_graph$proj1)\n\npatient.se &lt;- equiv.clust(patient_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\n\npat_blk_model.patient.org &lt;- blockmodel(patient_matrix,\n patient.se, k = 4)\n\n\nplot.block&lt;-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(pat_blk_model.patient.org, main = \"patient\")\n\n\n\n\n\npat_blks6 &lt;- readRDS(\"pat_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\npat_blk_mod &lt;- blockmodel(patient_matrix, pat_blks6$best$best1$clu,\n                      plabels = rownames(patient_matrix))\n\n\n#assign block membership to vertex attribute\npatient.stat%v%\"role\"&lt;-pat_blk_mod$block.membership[match(patient.stat%v%\"vertex.names\",pat_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(patient.stat,\n               node.color=\"role\", \n               node.size=sna::degree(patient.stat, gmode=\"graph\"),\n               node.alpha = .5)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2"
  },
  {
    "objectID": "posts/Post_Six/post_6.html#provider",
    "href": "posts/Post_Six/post_6.html#provider",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "PROVIDER",
    "text": "PROVIDER\n\nprovider_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj2))\n\nprovider.stat &lt;- asNetwork(projected_graph$proj2)\n\nprovider.se &lt;- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\n\nblk_model.provider.org &lt;- blockmodel(provider_matrix,\n provider.se, k = 6)\n\n\nprov_blks6 &lt;- readRDS(\"prov_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\nprov_blk_mod &lt;- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n\n\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"&lt;-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")"
  },
  {
    "objectID": "posts/Post_Six/post_6.html#create-new-attribute-lists",
    "href": "posts/Post_Six/post_6.html#create-new-attribute-lists",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "Create New Attribute Lists",
    "text": "Create New Attribute Lists\n\npat_attr$block &lt;- pat_blk_mod$block.membership\npro_attr$block &lt;- prov_blk_mod$block.membership\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\n\npat_attr_list &lt;- do.call(list, pat_attr)\npro_attr_list &lt;- do.call(list, pro_attr)\nattribute_list &lt;- do.call(list, both_attr)\n\n\nprovider.st &lt;- network(provider_matrix,\n                       directed = FALSE,\n                       matrix.type = \"adjacency\",\n                       vertex.attr = pro_attr_list)\nprovider.st\n\n Network attributes:\n  vertices = 253 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 554 \n    missing edges= 0 \n    non-missing edges= 554 \n\n Vertex attribute names: \n    block CITY GENDER NAME type vertex.names \n\nNo edge attributes\n\n\n\nprovider_graph &lt;- graph_from_biadjacency_matrix(provider.st)\n\n\n#assign colors\n#colors &lt;-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors &lt;- colors[pro_attr_list$block]\nvertex_colors &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"red\", \"white\")\n\nvertex_shape &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n\n\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"SN Graph\")\n\n\n\n\nWhat other cities are on the provider list. Boston is not being properly represented, I have a feeling\n\ntable(pro_attr$CITY)\n\n\n         ALLSTON          AMHERST          ANDOVER        ARLINGTON \n               1                2                1                3 \n          AUBURN       AUBURNDALE       BELLINGHAM          BEVERLY \n               1                2                1                2 \n          Boston           BOSTON      BRIDGEWATER         BRIGHTON \n               1                5                2                2 \n        BROCKTON        BROOKLINE        CAMBRIDGE      CHARLESTOWN \n               1                2                4                1 \n        CHARLTON          CHATHAM       CHELMSFORD          CHELSEA \n               1                1                1                2 \n        CHICOPEE        DARTMOUTH           DEDHAM       DORCHESTER \n               2                1                5                2 \n      E FALMOUTH        Fairhaven        FAIRHAVEN       FALL RIVER \n               1                1                3                4 \n        FALMOUTH        Fitchburg       FOXBOROUGH       FRAMINGHAM \n               3                1                1                2 \n      GEORGETOWN           GROTON          HANOVER     HARWICH PORT \n               1                1                2                1 \n       HAVERHILL          HINGHAM        HOLLISTON          HOLYOKE \n               3                2                1                2 \n       HOPKINTON          HYANNIS        HYDE PARK    Jamaica Plain \n               2                2                1                1 \n   JAMAICA PLAIN         LAWRENCE       LEOMINSTER        LEXINGTON \n               2                3                2                3 \n          LOWELL           LUDLOW             Lynn             LYNN \n               3                1                1                1 \n          MALDEN      MARLBOROUGH         MATTAPAN          MEDFORD \n               1                5                2                2 \n         MELROSE          METHUEN       MIDDLEBORO          MILFORD \n               2                2                1                3 \n          MILTON           NATICK          NEEDHAM      NEW BEDFORD \n               3                3                2                3 \n     NEWBURYPORT           NEWTON      NORTH ADAMS    NORTH ANDOVER \n               1                5                1                1 \n NORTH DARTMOUTH      NORTHAMPTON     NORTHBOROUGH          NORWELL \n               1                1                1                3 \n         NORWOOD       OAK BLUFFS          PEABODY         PEMBROKE \n               6                1                2                1 \n      PITTSFIELD         PLYMOUTH           QUINCY         RANDOLPH \n               3                6                3                2 \n         RAYNHAM          READING         ROCHDALE       ROSLINDALE \n               2                1                1                4 \n          ROWLEY          ROXBURY       S YARMOUTH            SALEM \n               1                1                1                2 \n        SCITUATE           SHARON       SHREWSBURY       SOMERVILLE \n               3                1                1                3 \n  SOUTH YARMOUTH     SOUTHBOROUGH      SPRINGFIELD         STONEHAM \n               2                1                2                2 \n       STOUGHTON        TEWKSBURY            UPTON         UXBRIDGE \n               2                2                1                1 \n         WALPOLE          WALTHAM          WAREHAM        WELLESLEY \n               2                7                3                1 \nWEST BRIDGEWATER     West Roxbury     WEST ROXBURY      WESTBOROUGH \n               3                1                1                4 \n        WESTFORD         WESTWOOD         WEYMOUTH        WILBRAHAM \n               3                1                2                1 \n    WILLIAMSTOWN         WINTHROP           WOBURN        Worcester \n               1                1                6                1 \n       WORCESTER \n              17 \n\npro_attr &lt;- pro_attr %&gt;%\n  mutate(\n    CITY =tolower(CITY)\n  )\npro_attr_list &lt;- do.call(list, pro_attr)\n\nShould have cleaned that earlier, but here we go!\n\nBoston_Neighborhoods &lt;- c(\n  \"ALLSTON\",\n  \"BRIGHTON\",\n  \"BOSTON\",\n  \"CHARLESTOWN\",\n  \"DORCHESTER\",\n  \"HYDE PARK\",\n  \"JAMAICA PLAIN\",\n  \"MATTAPAN\",\n  \"ROSLINDALE\",\n  \"ROXBURY\",\n  \"West Roxbury\",\n  \"WEST ROXBURY\"\n)\nBoston_Neighborhoods &lt;- tolower(Boston_Neighborhoods)\n\n\n#assign colors\n#colors &lt;-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors &lt;- colors[pro_attr_list$block]\nvertex_colors &lt;- ifelse(pro_attr_list$CITY %in% Boston_Neighborhoods, \"red\", \"white\")\nvertex_shape &lt;- ifelse(pro_attr_list$block == \"1\", \"circle\", \"square\")\n#vertex_shape &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n\n\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = BOSTON\")\n\n\n\n\nSo… it’s not Boston related.\nHow about Highest populations\n\nlargest_pop &lt;- c(\n\"Boston\",\n\"Worcester\",\n\"Springfield\",\n\"Cambridge\",\n\"Lowell\",\n\"Brockton\",\n\"Quincy\",\n\"Lynn\",\n\"New Bedford\",\n\"Fall River\",\n\"Lawrence\",\n\"Newton\",\n\"Somerville\",\n\"Framingham\",\n\"Haverhill\")\nlargest_pop &lt;- tolower(largest_pop)\n\n\n#assign colors\n#colors &lt;-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors &lt;- colors[pro_attr_list$block]\nvertex_colors &lt;- ifelse(pro_attr_list$CITY %in% largest_pop, \"red\", \"white\")\nvertex_shape &lt;- ifelse(pro_attr_list$block == \"1\", \"circle\", \"square\")\n#vertex_shape &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n\n\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = Largest Cities\")\n\n\n\n\n\nblock1 &lt;- pro_attr %&gt;%\n  filter(block == 1)\nblock1\n\n# A tibble: 10 × 5\n   NAME                      GENDER CITY         type     block\n   &lt;chr&gt;                     &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt;    &lt;int&gt;\n 1 Ted955 Reilly981          M      fitchburg    PROVIDER     1\n 2 Barbara209 Maldonado119   F      leominster   PROVIDER     1\n 3 Gisele901 Lehner980       F      west roxbury PROVIDER     1\n 4 Vella930 Ankunding277     F      fall river   PROVIDER     1\n 5 Precious140 Runolfsson901 F      norwell      PROVIDER     1\n 6 Fernande593 Mosciski958   F      e falmouth   PROVIDER     1\n 7 Jolie499 Parisian75       F      worcester    PROVIDER     1\n 8 Archie818 McCullough561   M      medford      PROVIDER     1\n 9 Maxima831 Fahey393        F      plymouth     PROVIDER     1\n10 Mickey576 Borer986        F      worcester    PROVIDER     1\n\n\n\nTed955 &lt;- encounters_cleaned %&gt;% \n    filter(PROVIDER == \"Ted955 Reilly981\") %&gt;% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n\nTed955%&gt;%\n  arrange(desc(COUNT))\n\n# A tibble: 11 × 4\n# Groups:   PROVIDER, CITY.x [1]\n   PROVIDER         CITY.x    REASONDESCRIPTION                            COUNT\n   &lt;chr&gt;            &lt;chr&gt;     &lt;chr&gt;                                        &lt;int&gt;\n 1 Ted955 Reilly981 Fitchburg Chronic congestive heart failure (disorder)     86\n 2 Ted955 Reilly981 Fitchburg Ischemic heart disease (disorder)               30\n 3 Ted955 Reilly981 Fitchburg Abnormal findings diagnostic imaging heart+…    11\n 4 Ted955 Reilly981 Fitchburg Aortic valve stenosis (disorder)                 6\n 5 Ted955 Reilly981 Fitchburg History of coronary artery bypass grafting …     6\n 6 Ted955 Reilly981 Fitchburg Aortic valve regurgitation (disorder)            4\n 7 Ted955 Reilly981 Fitchburg Myocardial infarction (disorder)                 3\n 8 Ted955 Reilly981 Fitchburg Acute non-ST segment elevation myocardial i…     2\n 9 Ted955 Reilly981 Fitchburg Mitral valve regurgitation (disorder)            2\n10 Ted955 Reilly981 Fitchburg Acute ST segment elevation myocardial infar…     1\n11 Ted955 Reilly981 Fitchburg Stroke                                           1\n\n\nGonna go ahead and say Ted’s a Cardiologist\nMaybe there are other doctors that are in block one that are also cardiologists?\n\nBarbara209 &lt;- encounters_cleaned %&gt;% \n    filter(PROVIDER == \"Barbara209 Maldonado119\") %&gt;% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n\nBarbara209 %&gt;%\n  arrange(desc(COUNT))\n\n# A tibble: 9 × 4\n# Groups:   PROVIDER, CITY.x [1]\n  PROVIDER                CITY.x     REASONDESCRIPTION                     COUNT\n  &lt;chr&gt;                   &lt;chr&gt;      &lt;chr&gt;                                 &lt;int&gt;\n1 Barbara209 Maldonado119 LEOMINSTER Allergy to substance (finding)            4\n2 Barbara209 Maldonado119 LEOMINSTER &lt;NA&gt;                                      4\n3 Barbara209 Maldonado119 LEOMINSTER Essential hypertension (disorder)         3\n4 Barbara209 Maldonado119 LEOMINSTER Viral sinusitis (disorder)                2\n5 Barbara209 Maldonado119 LEOMINSTER Acute infective cystitis (disorder)       1\n6 Barbara209 Maldonado119 LEOMINSTER Chronic pain                              1\n7 Barbara209 Maldonado119 LEOMINSTER Cow's milk (substance)                    1\n8 Barbara209 Maldonado119 LEOMINSTER Perennial allergic rhinitis with sea…     1\n9 Barbara209 Maldonado119 LEOMINSTER Streptococcal sore throat (disorder)      1\n\n\n\nGisele901 &lt;- encounters_cleaned %&gt;% \n    filter(PROVIDER == \"Gisele901 Lehner980\") %&gt;% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n\nGisele901 %&gt;%\n  arrange(desc(COUNT))\n\n# A tibble: 9 × 4\n# Groups:   PROVIDER, CITY.x [1]\n  PROVIDER            CITY.x       REASONDESCRIPTION                       COUNT\n  &lt;chr&gt;               &lt;chr&gt;        &lt;chr&gt;                                   &lt;int&gt;\n1 Gisele901 Lehner980 West Roxbury End-stage renal disease (disorder)        117\n2 Gisele901 Lehner980 West Roxbury &lt;NA&gt;                                       91\n3 Gisele901 Lehner980 West Roxbury Chronic kidney disease stage 4 (disord…    50\n4 Gisele901 Lehner980 West Roxbury Acute bronchitis (disorder)                 2\n5 Gisele901 Lehner980 West Roxbury Screening for malignant neoplasm of co…     2\n6 Gisele901 Lehner980 West Roxbury Concussion with no loss of consciousne…     1\n7 Gisele901 Lehner980 West Roxbury Familial Alzheimer's disease of early …     1\n8 Gisele901 Lehner980 West Roxbury Suspected prostate cancer (situation)       1\n9 Gisele901 Lehner980 West Roxbury Viral sinusitis (disorder)                  1\n\n\n\nencounters_reasons &lt;- encounters_cleaned %&gt;% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%&gt;%\n    summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n\nencounters_reasons %&gt;%\n  arrange(desc(COUNT))\n\n# A tibble: 938 × 4\n# Groups:   PROVIDER, CITY.x [253]\n   PROVIDER                CITY.x     REASONDESCRIPTION                    COUNT\n   &lt;chr&gt;                   &lt;chr&gt;      &lt;chr&gt;                                &lt;int&gt;\n 1 Alvin56 Crona259        METHUEN    Chronic kidney disease stage 4 (dis…   619\n 2 Rhett759 Padberg411     ROCHDALE   Chronic kidney disease stage 4 (dis…   576\n 3 Rudolf736 Vandervort697 MILTON     Chronic kidney disease stage 4 (dis…   504\n 4 Johna806 Klein929       DARTMOUTH  End-stage renal disease (disorder)     444\n 5 Ross213 Wisozk929       Fairhaven  Chronic kidney disease stage 4 (dis…   418\n 6 Merrilee429 Daugherty69 Boston     Chronic kidney disease stage 4 (dis…   387\n 7 Bea654 Daniel959        OAK BLUFFS Chronic kidney disease stage 4 (dis…   366\n 8 Sulema841 Ryan260       WAREHAM    Chronic kidney disease stage 4 (dis…   319\n 9 Floy720 Greenfelder433  SOMERVILLE End-stage renal disease (disorder)     298\n10 Leopoldo762 Keebler762  CAMBRIDGE  Chronic kidney disease stage 4 (dis…   284\n# ℹ 928 more rows\n\n\n\nAlvin56 &lt;- encounters_cleaned %&gt;% \n    filter(PROVIDER == \"Alvin56 Crona259\") %&gt;% \n    group_by(PROVIDER, PATIENT, CITY.x, REASONDESCRIPTION)%&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PROVIDER', 'PATIENT', 'CITY.x'. You can\noverride using the `.groups` argument.\n\nAlvin56 %&gt;%\n  arrange(desc(COUNT))\n\n# A tibble: 13 × 5\n# Groups:   PROVIDER, PATIENT, CITY.x [2]\n   PROVIDER         PATIENT                CITY.x  REASONDESCRIPTION       COUNT\n   &lt;chr&gt;            &lt;chr&gt;                  &lt;chr&gt;   &lt;chr&gt;                   &lt;int&gt;\n 1 Alvin56 Crona259 Margart214 Bogisich202 METHUEN Chronic kidney disease…   619\n 2 Alvin56 Crona259 Margart214 Bogisich202 METHUEN &lt;NA&gt;                       99\n 3 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Acute bronchitis (diso…     2\n 4 Alvin56 Crona259 Margart214 Bogisich202 METHUEN Screening for malignan…     2\n 5 Alvin56 Crona259 Margart214 Bogisich202 METHUEN Viral sinusitis (disor…     2\n 6 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Anemia (disorder)           1\n 7 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Chronic pain (finding)      1\n 8 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Fracture of rib             1\n 9 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Screening for malignan…     1\n10 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Sterilization requeste…     1\n11 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Viral sinusitis (disor…     1\n12 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN &lt;NA&gt;                        1\n13 Alvin56 Crona259 Margart214 Bogisich202 METHUEN Tubal pregnancy             1\n\n\n\nMargart214 &lt;- encounters_cleaned %&gt;% \n    filter(PROVIDER == \"Margart214 Bogisich202\") %&gt;% \n    group_by(PROVIDER, PATIENT, CITY.x, REASONDESCRIPTION)%&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PROVIDER', 'PATIENT', 'CITY.x'. You can\noverride using the `.groups` argument.\n\nMargart214 %&gt;%\n  arrange(desc(COUNT))\n\n# A tibble: 0 × 5\n# Groups:   PROVIDER, PATIENT, CITY.x [0]\n# ℹ 5 variables: PROVIDER &lt;chr&gt;, PATIENT &lt;chr&gt;, CITY.x &lt;chr&gt;,\n#   REASONDESCRIPTION &lt;chr&gt;, COUNT &lt;int&gt;"
  },
  {
    "objectID": "posts/Post_Two - Copy/post_2_drug.html",
    "href": "posts/Post_Two - Copy/post_2_drug.html",
    "title": "Network Exploration",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(ggplot2)\nlibrary(patchwork)\nThis post will explore the Synthetic Mass network data in more detail."
  },
  {
    "objectID": "posts/Post_Two - Copy/post_2_drug.html#graphs-with-sna",
    "href": "posts/Post_Two - Copy/post_2_drug.html#graphs-with-sna",
    "title": "Network Exploration",
    "section": "Graphs with sna",
    "text": "Graphs with sna\n\n# load the sna library to get the gplot() function\nlibrary( sna )\n\n# set the seed to reproduce the plot layout\nset.seed( 507 )\n\n# execute the plot\ngplot(\n  encounters.st.3,             \n  gmode = \"twomode\",                     # indicate it is two modes\n  usearrows = FALSE,                     # turn off the arrowheads\n  vertex.cex=2,                          # size the nodes     \n  label.cex=1.2,                         # size the labels\n  main=\"Bipartite Graph of Encounters using SNA\"                 # add a title\n)\n\n\n\n\n\nincidence_graph &lt;- graph_from_biadjacency_matrix(encounters.st.3)\n\ndetach(“package:sna”)"
  },
  {
    "objectID": "posts/Post_Two - Copy/post_2_drug.html#graphs-with-igraph",
    "href": "posts/Post_Two - Copy/post_2_drug.html#graphs-with-igraph",
    "title": "Network Exploration",
    "section": "Graphs with igraph",
    "text": "Graphs with igraph\n\nvertex_colors &lt;- ifelse(attribute_list$GENDER == \"Female\", \"pink\", \"turquoise\")\nV(incidence_graph)$shape &lt;- ifelse(V(incidence_graph)$type, \"square\", \"circle\")\n\n# Define edge colors based on COUNT attribute\nedge_colors &lt;- ifelse(encounters_el$COUNT &lt; 5, \"lightblue\", \n                      ifelse(encounters_el$COUNT &lt;= 20, \"blue\", \n                              ifelse(encounters_el$COUNT &lt;= 100, \"darkblue\", \"red\")))\n\n\n# Check if the length of edge_colors matches the number of edges\nif (length(edge_colors) == ecount(incidence_graph)) {\n  # Set edge attributes based on counts\n  E(incidence_graph)$color &lt;- edge_colors\n} else {\n  print(\"Length of edge_colors does not match the number of edges in the graph.\")\n}\n\nE(incidence_graph)$color &lt;- edge_colors\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph,\n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 3, \n     vertex.color = vertex_colors,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Patient Provider Incidence Graph\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"pink\", \"turquoise\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\",\n       legend = c(\"1-4\", \"5-19\", \"20-99\", \"100+\"),  # You can customize these labels\n       col = c(\"lightblue\", \"blue\", \"darkblue\", \"red\"),  # Line colors corresponding to edge colors\n       lwd = 2,                            # Line width\n       title = \"Edges: # of Visits\")              # Legend title\n\n\n\n\n\n#Calculating centrality\ntypes &lt;- V(incidence_graph)$type\ndeg&lt;- igraph::degree(incidence_graph)\nbet &lt;- igraph::betweenness(incidence_graph)\nclos &lt;- igraph::closeness(incidence_graph)\neig &lt;- eigen_centrality(incidence_graph)$vector\nconst &lt;- constraint(incidence_graph)\ncent_df &lt;- data.frame(types, deg, bet, clos, eig, const)\nhead(cent_df[order(cent_df$deg, decreasing = TRUE),], 10)\n\n                       types deg        bet         clos         eig      const\nTed955 Reilly981        TRUE  17 18288.5694 0.0014025245 1.000000000 0.05882353\nJewel43 Kassulke119     TRUE   9  5293.0889 0.0010405827 0.122089385 0.11111111\nRamon749 Kozey370      FALSE   8  5920.4667 0.0011904762 0.314695380 0.12500000\nSabine292 Feil794      FALSE   7  8039.1255 0.0012135922 0.284892155 0.14285714\nTomika243 Walker122    FALSE   7   927.8167 0.0006793478 0.001624020 0.14285714\nGordon377 Marquardt819 FALSE   6  2112.5000 0.0011135857 0.284460108 0.16666667\nLan153 Schmidt332      FALSE   6   941.7033 0.0008726003 0.035407942 0.16666667\nStanley702 Cremin516   FALSE   6   823.4333 0.0006784261 0.001472952 0.16666667\nCortez851 Price929      TRUE   6  4823.0333 0.0007843137 0.004928315 0.16666667\nAnderson154 Lemke654    TRUE   6  2266.9251 0.0009569378 0.231038624 0.16666667\n\n#provider only\npro_cent_df &lt;- cent_df %&gt;%\n  filter(types ==\"TRUE\")\nhead(pro_cent_df[order(pro_cent_df$deg, decreasing = TRUE),], 10)\n\n                      types deg         bet         clos         eig      const\nTed955 Reilly981       TRUE  17 18288.56945 0.0014025245 1.000000000 0.05882353\nJewel43 Kassulke119    TRUE   9  5293.08892 0.0010405827 0.122089385 0.11111111\nCortez851 Price929     TRUE   6  4823.03333 0.0007843137 0.004928315 0.16666667\nAnderson154 Lemke654   TRUE   6  2266.92508 0.0009569378 0.231038624 0.16666667\nRandy380 Bergstrom287  TRUE   6   592.40699 0.0009354537 0.351045458 0.16666667\nKarla801 Cummerata161  TRUE   4   962.23333 0.0009149131 0.150977394 0.25000000\nThanh759 Weber641      TRUE   4   123.18801 0.0007446016 0.023410004 0.25000000\nMertie42 Lakin515      TRUE   4   673.44586 0.0007733952 0.036012291 0.25000000\nFidel864 Swift555      TRUE   3    39.28333 0.0006779661 0.009873917 0.33333333\nVirgen207 Hyatt152     TRUE   3   664.43333 0.0009132420 0.058784103 0.33333333\n\nsummary(pro_cent_df)\n\n  types              deg              bet                clos          \n Mode:logical   Min.   : 1.000   Min.   :    0.00   Min.   :0.0004787  \n TRUE:222       1st Qu.: 1.000   1st Qu.:    0.00   1st Qu.:0.0006925  \n                Median : 1.000   Median :    0.00   Median :0.0009033  \n                Mean   : 1.536   Mean   :  239.29   Mean   :0.0343315  \n                3rd Qu.: 2.000   3rd Qu.:    8.95   3rd Qu.:0.0541667  \n                Max.   :17.000   Max.   :18288.57   Max.   :0.2000000  \n      eig               const        \n Min.   :0.000000   Min.   :0.05882  \n 1st Qu.:0.000000   1st Qu.:0.50000  \n Median :0.003459   Median :1.00000  \n Mean   :0.026668   Mean   :0.82997  \n 3rd Qu.:0.047516   3rd Qu.:1.00000  \n Max.   :1.000000   Max.   :1.00000  \n\n#patient only\npat_cent_df &lt;- cent_df %&gt;%\n  filter(types ==\"FALSE\")\nhead(pat_cent_df[order(pat_cent_df$deg, decreasing = TRUE),], 10)\n\n                        types deg       bet         clos         eig     const\nRamon749 Kozey370       FALSE   8 5920.4667 0.0011904762 0.314695380 0.1250000\nSabine292 Feil794       FALSE   7 8039.1255 0.0012135922 0.284892155 0.1428571\nTomika243 Walker122     FALSE   7  927.8167 0.0006793478 0.001624020 0.1428571\nGordon377 Marquardt819  FALSE   6 2112.5000 0.0011135857 0.284460108 0.1666667\nLan153 Schmidt332       FALSE   6  941.7033 0.0008726003 0.035407942 0.1666667\nStanley702 Cremin516    FALSE   6  823.4333 0.0006784261 0.001472952 0.1666667\nCarl856 Rempel203       FALSE   5  830.0000 0.0008605852 0.030456389 0.2000000\nChanell45 Morissette863 FALSE   5  704.1182 0.0008620690 0.034515722 0.2000000\nCherise743 Prosacco716  FALSE   5  618.7667 0.0006775068 0.001379585 0.2000000\nCindi877 Hane680        FALSE   5  219.5667 0.0007727975 0.099507009 0.2000000\n\nsummary(pat_cent_df)\n\n   types              deg             bet              clos          \n Mode :logical   Min.   :2.000   Min.   :   0.5   Min.   :0.0005319  \n FALSE:86        1st Qu.:3.000   1st Qu.:  15.0   1st Qu.:0.0007770  \n                 Median :4.000   Median : 422.6   Median :0.0008897  \n                 Mean   :3.965   Mean   : 727.9   Mean   :0.0453422  \n                 3rd Qu.:4.000   3rd Qu.: 708.9   3rd Qu.:0.0666667  \n                 Max.   :8.000   Max.   :8039.1   Max.   :0.3333333  \n      eig              const       \n Min.   :0.00000   Min.   :0.1250  \n 1st Qu.:0.00000   1st Qu.:0.2500  \n Median :0.01549   Median :0.2500  \n Mean   :0.07111   Mean   :0.2712  \n 3rd Qu.:0.06090   3rd Qu.:0.3333  \n Max.   :0.36702   Max.   :0.5000  \n\n\n\nV(incidence_graph)$size &lt;- igraph::degree(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Degree Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"pink\", \"turquoise\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Degree\")\n\n\n\n\nHere we can see there is one Provider that sees the most patients, with degree centrality = 28. The next largest degree centrality are in the 5 to 7 range and the majority of those nodes are patients.\n\nV(incidence_graph)$size &lt;- igraph::closeness(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Closeness Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Closeness\")\n\n\n\n\nHere we see two of the dyads on the outer right side of this incidence graph have the largest closeness score. This is because their network is complete (they are both connected to one another)."
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html",
    "href": "posts/Post_One - Copy/post_1_drug.html",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "",
    "text": "Research Question\nDoes the demographic profile, including factors such as marital status, gender, and income, significantly impact the utilization of healthcare services among people who use drugs (PWUD), and does it influence the structure and strength of social network connections between PWUD and healthcare providers?\nHypothesis\nData Collection\nData for this project were taken from Synthetic Mass, which creates Synthetic patient data from Synthea.\nCriteria for patient download will be set to include patients that have experienced overdose, substance use treatment, and have other indicators in their health records that could be considered substance use.\nWhile a whole host of datasets are available within each download, I will focus this project on three datasets: patients.csv, providers.csv, and encounters.csv.\nData Cleaning\nData for this project will be read in, reduced to only necessary data, cleaned (trim ws, recode variables, match across datasets, and other data cleaning processes)\nData Analysis\nAnalysis will primarily be of a two-mode network, developing an analysis of the patient-provider relationship. Weights will be assigned to the number of visits between patients and providers. Block Modeling analysis will be performed in one-mode networks of patient or providers to understand the structure of the networks. Blocks will be assigned to patients and providers as an attribute for analysis.\nCleaning\nThis post will primarily focus on data cleaning and data exploration with some exploration into social network analysis through transforming the data into an incidence matrix and plotting some attributes.\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(statnet)\nlibrary(ggplot2)\nlibrary(patchwork)"
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#patient-data",
    "href": "posts/Post_One - Copy/post_1_drug.html#patient-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "PATIENT DATA",
    "text": "PATIENT DATA\nThe following table is the data available in the patient dataset.\n\npatients &lt;- read_csv(\"synthea_sample_data_csv_latest/patients.csv\")\n\nRows: 86 Columns: 27\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (19): Id, SSN, DRIVERS, PASSPORT, PREFIX, FIRST, LAST, SUFFIX, MAIDEN, ...\ndbl   (6): FIPS, LAT, LON, HEALTHCARE_EXPENSES, HEALTHCARE_COVERAGE, INCOME\ndate  (2): BIRTHDATE, DEATHDATE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(patients)\n\n# A tibble: 6 × 27\n  Id      BIRTHDATE  DEATHDATE SSN    DRIVERS PASSPORT PREFIX FIRST LAST  SUFFIX\n  &lt;chr&gt;   &lt;date&gt;     &lt;date&gt;    &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n1 fd7d27… 1986-07-11 NA        999-5… S99942… X400041… Mrs.   Anni… Glea… &lt;NA&gt;  \n2 cb36b3… 1958-12-12 NA        999-7… S99991… X680941… Mrs.   Juli… Barr… &lt;NA&gt;  \n3 757603… 1977-08-09 NA        999-7… S99974… X378787… Mrs.   Ales… Hean… &lt;NA&gt;  \n4 a970cc… 1997-07-04 NA        999-8… S99937… X401363… Ms.    Sand… Rice… &lt;NA&gt;  \n5 298741… 1979-05-05 NA        999-2… S99988… X201473… Mrs.   Mia3… Runt… &lt;NA&gt;  \n6 0863bd… 1997-11-12 NA        999-8… S99962… X675884… Mr.    Dami… Dach… &lt;NA&gt;  \n# ℹ 17 more variables: MAIDEN &lt;chr&gt;, MARITAL &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ETHNICITY &lt;chr&gt;, GENDER &lt;chr&gt;, BIRTHPLACE &lt;chr&gt;, ADDRESS &lt;chr&gt;, CITY &lt;chr&gt;,\n#   STATE &lt;chr&gt;, COUNTY &lt;chr&gt;, FIPS &lt;dbl&gt;, ZIP &lt;chr&gt;, LAT &lt;dbl&gt;, LON &lt;dbl&gt;,\n#   HEALTHCARE_EXPENSES &lt;dbl&gt;, HEALTHCARE_COVERAGE &lt;dbl&gt;, INCOME &lt;dbl&gt;\n\n\n\nstr(patients)\n\nspc_tbl_ [86 × 27] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Id                 : chr [1:86] \"fd7d2777-0aa7-4495-7355-7d57087f73b1\" \"cb36b365-bfa5-aa61-3240-ed97d2c7b7fa\" \"75760354-5f22-c391-cb3a-f7523b73277d\" \"a970cca2-8c88-a67a-8675-00aa26069356\" ...\n $ BIRTHDATE          : Date[1:86], format: \"1986-07-11\" \"1958-12-12\" ...\n $ DEATHDATE          : Date[1:86], format: NA NA ...\n $ SSN                : chr [1:86] \"999-54-2711\" \"999-75-6253\" \"999-70-3855\" \"999-86-9249\" ...\n $ DRIVERS            : chr [1:86] \"S99942559\" \"S99991886\" \"S99974938\" \"S99937640\" ...\n $ PASSPORT           : chr [1:86] \"X40004111X\" \"X68094169X\" \"X37878770X\" \"X40136308X\" ...\n $ PREFIX             : chr [1:86] \"Mrs.\" \"Mrs.\" \"Mrs.\" \"Ms.\" ...\n $ FIRST              : chr [1:86] \"Annice210\" \"Julianne852\" \"Alesha810\" \"Sandee884\" ...\n $ LAST               : chr [1:86] \"Gleason633\" \"Barrows492\" \"Heaney114\" \"Rice937\" ...\n $ SUFFIX             : chr [1:86] NA NA NA NA ...\n $ MAIDEN             : chr [1:86] \"Koss676\" \"Jacobs452\" \"Labadie908\" NA ...\n $ MARITAL            : chr [1:86] \"M\" \"W\" \"D\" NA ...\n $ RACE               : chr [1:86] \"white\" \"white\" \"white\" \"white\" ...\n $ ETHNICITY          : chr [1:86] \"nonhispanic\" \"nonhispanic\" \"nonhispanic\" \"nonhispanic\" ...\n $ GENDER             : chr [1:86] \"F\" \"F\" \"F\" \"F\" ...\n $ BIRTHPLACE         : chr [1:86] \"Wrentham  Massachusetts  US\" \"Yarmouth Port  Massachusetts  US\" \"East Harwich  Massachusetts  US\" \"Springfield  Massachusetts  US\" ...\n $ ADDRESS            : chr [1:86] \"288 Steuber Landing Suite 38\" \"782 Lynch Dale\" \"415 Emmerich Trail\" \"726 Harvey Throughway\" ...\n $ CITY               : chr [1:86] \"Brookline\" \"Hamilton\" \"Framingham\" \"Taunton\" ...\n $ STATE              : chr [1:86] \"Massachusetts\" \"Massachusetts\" \"Massachusetts\" \"Massachusetts\" ...\n $ COUNTY             : chr [1:86] \"Norfolk County\" \"Essex County\" \"Middlesex County\" \"Bristol County\" ...\n $ FIPS               : num [1:86] 25021 NA 25017 25005 NA ...\n $ ZIP                : chr [1:86] \"02446\" \"00000\" \"01701\" \"02767\" ...\n $ LAT                : num [1:86] 42.4 42.6 42.2 41.9 42.6 ...\n $ LON                : num [1:86] -71.1 -70.8 -71.5 -71.1 -71.4 ...\n $ HEALTHCARE_EXPENSES: num [1:86] 13891 1027127 1021095 80365 577671 ...\n $ HEALTHCARE_COVERAGE: num [1:86] 550582 224662 180027 159483 691055 ...\n $ INCOME             : num [1:86] 1565 39537 114339 96256 71238 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Id = col_character(),\n  ..   BIRTHDATE = col_date(format = \"\"),\n  ..   DEATHDATE = col_date(format = \"\"),\n  ..   SSN = col_character(),\n  ..   DRIVERS = col_character(),\n  ..   PASSPORT = col_character(),\n  ..   PREFIX = col_character(),\n  ..   FIRST = col_character(),\n  ..   LAST = col_character(),\n  ..   SUFFIX = col_character(),\n  ..   MAIDEN = col_character(),\n  ..   MARITAL = col_character(),\n  ..   RACE = col_character(),\n  ..   ETHNICITY = col_character(),\n  ..   GENDER = col_character(),\n  ..   BIRTHPLACE = col_character(),\n  ..   ADDRESS = col_character(),\n  ..   CITY = col_character(),\n  ..   STATE = col_character(),\n  ..   COUNTY = col_character(),\n  ..   FIPS = col_double(),\n  ..   ZIP = col_character(),\n  ..   LAT = col_double(),\n  ..   LON = col_double(),\n  ..   HEALTHCARE_EXPENSES = col_double(),\n  ..   HEALTHCARE_COVERAGE = col_double(),\n  ..   INCOME = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nsummary(patients)\n\n      Id              BIRTHDATE            DEATHDATE         \n Length:86          Min.   :1918-12-18   Min.   :1980-02-04  \n Class :character   1st Qu.:1956-09-07   1st Qu.:1999-02-19  \n Mode  :character   Median :1973-07-22   Median :2007-02-09  \n                    Mean   :1971-05-21   Mean   :2005-05-07  \n                    3rd Qu.:1987-07-27   3rd Qu.:2016-01-04  \n                    Max.   :2004-12-24   Max.   :2021-09-26  \n                                         NA's   :73          \n     SSN              DRIVERS            PASSPORT            PREFIX         \n Length:86          Length:86          Length:86          Length:86         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    FIRST               LAST              SUFFIX             MAIDEN         \n Length:86          Length:86          Length:86          Length:86         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   MARITAL              RACE            ETHNICITY            GENDER         \n Length:86          Length:86          Length:86          Length:86         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n  BIRTHPLACE          ADDRESS              CITY              STATE          \n Length:86          Length:86          Length:86          Length:86         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    COUNTY               FIPS           ZIP                 LAT       \n Length:86          Min.   :25001   Length:86          Min.   :41.55  \n Class :character   1st Qu.:25009   Class :character   1st Qu.:41.95  \n Mode  :character   Median :25017   Mode  :character   Median :42.31  \n                    Mean   :25015                      Mean   :42.21  \n                    3rd Qu.:25021                      3rd Qu.:42.46  \n                    Max.   :25027                      Max.   :42.82  \n                    NA's   :21                                        \n      LON         HEALTHCARE_EXPENSES HEALTHCARE_COVERAGE     INCOME      \n Min.   :-73.09   Min.   :   9291     Min.   :      0     Min.   :  1565  \n 1st Qu.:-71.45   1st Qu.:  39582     1st Qu.:  65610     1st Qu.: 30205  \n Median :-71.14   Median : 108692     Median : 322025     Median : 69924  \n Mean   :-71.27   Mean   : 206222     Mean   : 471978     Mean   :161151  \n 3rd Qu.:-70.97   3rd Qu.: 262415     3rd Qu.: 690279     3rd Qu.:128855  \n Max.   :-70.17   Max.   :1058955     Max.   :1893513     Max.   :840567  \n                                                                          \n\n\n\n#create NAME column combining FIRST and LAST names\npatients &lt;- patients %&gt;%\n    rename(PATIENT = Id) %&gt;%\n  unite(NAME, FIRST, LAST, sep = \" \")\n\n#trim whitespace NAME\npatients$NAME &lt;- trimws(patients$NAME)\n\n#trim whitespace COUNTY\npatients$CITY &lt;- trimws(patients$CITY)\n\n#clean up GENDER, RACE, ETHNICITY, and INCOME sections\npatients &lt;- patients %&gt;%\n  mutate(\n    GENDER = tolower(GENDER),\n    GENDER = case_when(\n      GENDER %in% c(\"male\", \"m\", \"man\") ~ \"Male\",\n      GENDER %in% c(\"female\", \"f\", \"woman\") ~ \"Female\",\n      TRUE ~ NA_character_  # assign NA to any non-standard values\n    ),\n# city (patient)\n    CITY =tolower(CITY),\n# race (patient)\n    RACE = tolower(RACE),  # convert race to lower case for consistency\n\n# ethnicity (patient)\n    ETHNICITY = tolower(ETHNICITY),  # convert ethnicity to lower case for consistency\n\n# marital (patient)\n    MARITAL = ifelse(MARITAL == \"M\", \"Married\",\n                    ifelse(MARITAL == \"D\", \"Divorced\",\n                    ifelse(MARITAL == \"W\", \"Widowed\",\n                    ifelse(MARITAL == \"S\", \"Single\", MARITAL)))),\n\n# income (patient)\n    INCOME = as.numeric(INCOME)  # convert income to numeric if necessary\n  ) %&gt;%\n  drop_na(GENDER, RACE) \n\nI am only keeping the demographic data below (gender, race, marital status, income, and age) which will be used as an attribute for each patient.\n\n#Create AGE from BIRTHDATE\npatients &lt;- patients %&gt;%\n  mutate(\n    BIRTHDATE = as.Date(BIRTHDATE),  # Ensure 'dob' is in Date format\n    AGE = interval(BIRTHDATE, today()) / years(1)  # Calculate age in years\n  ) %&gt;%\n  mutate(\n    AGE = floor(AGE)  # complete years only, removing decimal\n  )\n# Only keep patient name and demographics. This will be utilized as the attribute data for analysis.\npat_attr &lt;- patients%&gt;% \n  select(NAME, GENDER, RACE, MARITAL, CITY, INCOME, AGE)\nhead(pat_attr)\n\n# A tibble: 6 × 7\n  NAME                   GENDER RACE  MARITAL  CITY       INCOME   AGE\n  &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Annice210 Gleason633   Female white Married  brookline    1565    37\n2 Julianne852 Barrows492 Female white Widowed  hamilton    39537    65\n3 Alesha810 Heaney114    Female white Divorced framingham 114339    46\n4 Sandee884 Rice937      Female white &lt;NA&gt;     taunton     96256    26\n5 Mia349 Runte676        Female white Divorced chelmsford  71238    44\n6 Damian46 Dach178       Male   white &lt;NA&gt;     swansea     74155    26\n\n\n\npat_race &lt;- ggplot(pat_attr,aes(RACE)) + geom_bar()\npat_gender &lt;- ggplot(pat_attr,aes(GENDER)) + geom_bar()\n\npat_race + pat_gender + plot_annotation(title = \"Patient Race and Gender Breakdown\")\n\n\n\nggplot(pat_attr,aes(MARITAL)) + geom_bar() + labs(title = \"Patient Marital Status\")\n\n\n\npat_income &lt;- ggplot(pat_attr, aes(x = 1, y = INCOME)) +\n    geom_jitter(width = 0.2) +\n    labs(x = NULL, y = \"Income\") +\n    theme_minimal() + labs(title = \"Patient Income\")\n\nsummary(pat_attr$INCOME)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1565   30205   69924  161151  128855  840567 \n\npat_age &lt;- ggplot(pat_attr,aes(AGE)) + geom_bar()\n\nggplot(data = patients %&gt;% \n         count(CITY) %&gt;% \n         filter(n &gt; 2),  # Filter for counts higher than 10\n       aes(x = CITY, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Patients Cities\", \"\\n*filtered to show &gt;2 Patients per City\"))"
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#provider-data",
    "href": "posts/Post_One - Copy/post_1_drug.html#provider-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "PROVIDER DATA",
    "text": "PROVIDER DATA\nThe following table is the data available in the provider dataset.\n\nproviders &lt;- read_csv(\"synthea_sample_data_csv_latest/providers.csv\") %&gt;%\n    rename(PROVIDER = Id)\n\nRows: 815 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Id, ORGANIZATION, NAME, GENDER, SPECIALITY, ADDRESS, CITY, STATE, ZIP\ndbl (4): LAT, LON, ENCOUNTERS, PROCEDURES\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(providers)\n\n# A tibble: 6 × 13\n  PROVIDER  ORGANIZATION NAME  GENDER SPECIALITY ADDRESS CITY  STATE ZIP     LAT\n  &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 86726ad9… 74ab949d-17… Ted9… M      GENERAL P… 881 Ma… Fitc… MA    01420  42.6\n2 47fdff5b… 588f6ce6-b8… Tiff… F      GENERAL P… 461 WA… JAMA… MA    0213…  42.3\n3 b31700a0… 324b4137-57… Herm… F      GENERAL P… 134 NO… NORT… MA    0186…  42.6\n4 0ada8fec… b6398e07-49… Shan… M      GENERAL P… 19 TAC… WORC… MA    0160…  42.3\n5 31214beb… faffaf6a-ee… Jaun… F      GENERAL P… 66 WAS… STOU… MA    0207…  42.1\n6 38a7cc67… 17a4bae5-8b… Olym… F      GENERAL P… 512 MA… SHRE… MA    0154…  42.3\n# ℹ 3 more variables: LON &lt;dbl&gt;, ENCOUNTERS &lt;dbl&gt;, PROCEDURES &lt;dbl&gt;\n\n\nI am only keeping the demographic data below (gender) which will be used as an attribute for each provider.\n\n#trim whitespace NAME\nproviders$NAME &lt;- trimws(providers$NAME)\nproviders &lt;- providers %&gt;%\n  mutate(\n    GENDER = tolower(GENDER),\n    GENDER = case_when(\n      GENDER %in% c(\"male\", \"m\", \"man\") ~ \"Male\",\n      GENDER %in% c(\"female\", \"f\", \"woman\") ~ \"Female\",\n      TRUE ~ NA_character_  # assign NA to any non-standard values\n    ),\n    CITY =tolower(CITY)\n  )"
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#encounter-data",
    "href": "posts/Post_One - Copy/post_1_drug.html#encounter-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "ENCOUNTER DATA",
    "text": "ENCOUNTER DATA\n\nencounters &lt;- read_csv(\"synthea_sample_data_csv_latest/encounters.csv\")\n\nRows: 6109 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): Id, PATIENT, ORGANIZATION, PROVIDER, PAYER, ENCOUNTERCLASS, DESCRI...\ndbl  (5): CODE, BASE_ENCOUNTER_COST, TOTAL_CLAIM_COST, PAYER_COVERAGE, REASO...\ndttm (2): START, STOP\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(encounters)\n\n# A tibble: 6 × 15\n  Id       START               STOP                PATIENT ORGANIZATION PROVIDER\n  &lt;chr&gt;    &lt;dttm&gt;              &lt;dttm&gt;              &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;   \n1 1b544ce… 2000-11-11 13:33:09 2000-11-11 14:33:09 fd7d27… db28cc9a-fd… 715b985…\n2 0d642d8… 2001-03-30 13:33:09 2001-03-30 14:33:09 fd7d27… db28cc9a-fd… 715b985…\n3 99d190e… 2001-11-28 13:33:09 2001-11-28 14:33:09 fd7d27… db28cc9a-fd… 715b985…\n4 cc07637… 2004-09-03 13:33:09 2004-09-03 14:31:19 fd7d27… 3d5fbf38-c7… 2655ff5…\n5 05a2433… 2005-09-09 13:33:09 2005-09-09 14:16:34 fd7d27… 3d5fbf38-c7… 2655ff5…\n6 8844f58… 2008-09-12 13:33:09 2008-09-12 14:28:22 fd7d27… 3d5fbf38-c7… 2655ff5…\n# ℹ 9 more variables: PAYER &lt;chr&gt;, ENCOUNTERCLASS &lt;chr&gt;, CODE &lt;dbl&gt;,\n#   DESCRIPTION &lt;chr&gt;, BASE_ENCOUNTER_COST &lt;dbl&gt;, TOTAL_CLAIM_COST &lt;dbl&gt;,\n#   PAYER_COVERAGE &lt;dbl&gt;, REASONCODE &lt;dbl&gt;, REASONDESCRIPTION &lt;chr&gt;"
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#combine-patient-provider-and-encounter-data",
    "href": "posts/Post_One - Copy/post_1_drug.html#combine-patient-provider-and-encounter-data",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "Combine Patient, Provider, and Encounter Data",
    "text": "Combine Patient, Provider, and Encounter Data\nI am taking this step here so that I have a master dataset (encounters_attributes) and so that I can create an edgelist more easily.\n\n# Perform a left join to merge encounters with provider_attributes based on PROVIDER\nencounters_cleaning &lt;- left_join(encounters, providers, by = \"PROVIDER\")\n# Replace the PROVIDER column with the corresponding names from the NAME column\nencounters_cleaning$PROVIDER &lt;- encounters_cleaning$NAME\n# Remove the NAME column if no longer needed\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  select(-NAME)\n#Repeat for Provider\nencounters_cleaning &lt;- left_join(encounters_cleaning, patients, by = \"PATIENT\")\nencounters_cleaning$PATIENT &lt;- encounters_cleaning$NAME\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  select(-NAME) \n#Clearly identify the Encounter ID\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  rename(ENCOUNTER_ID = Id)"
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#check-dimensions-between-datasets",
    "href": "posts/Post_One - Copy/post_1_drug.html#check-dimensions-between-datasets",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "Check Dimensions between Datasets",
    "text": "Check Dimensions between Datasets\nIn later analysis I noticed that while there are more providers in the provider.csv, than there are providers listed in the encounters.csv. I will clean the data to only include providers that appear in the encounters.csv.\n\ncheck_prov &lt;- encounters_cleaning %&gt;%\n  group_by(PROVIDER, GENDER.x) %&gt;%\n  summarize(COUNT = n())\n\n`summarise()` has grouped output by 'PROVIDER'. You can override using the\n`.groups` argument.\n\ncheck_prov_enc &lt;- providers %&gt;% \n  group_by(NAME, PROVIDER)\n\n\ndim(check_prov)\n\n[1] 222   3\n\ndim(check_prov_enc)\n\n[1] 815  13\n\n\n\n# Perform semi-join to keep providers present in both datasets\nproviders_only_in_providers_df &lt;- check_prov_enc %&gt;%\n  anti_join(check_prov, by = c(\"NAME\" = \"PROVIDER\"))\n\n# Print the dimensions of the filtered dataset\nprint(dim(providers_only_in_providers_df))\n\n[1] 592  13\n\nprint(providers_only_in_providers_df)\n\n# A tibble: 592 × 13\n# Groups:   NAME, PROVIDER [592]\n   PROVIDER ORGANIZATION NAME  GENDER SPECIALITY ADDRESS CITY  STATE ZIP     LAT\n   &lt;chr&gt;    &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 47fdff5… 588f6ce6-b8… Tiff… Female GENERAL P… 461 WA… jama… MA    0213…  42.3\n 2 b31700a… 324b4137-57… Herm… Female GENERAL P… 134 NO… nort… MA    0186…  42.6\n 3 31214be… faffaf6a-ee… Jaun… Female GENERAL P… 66 WAS… stou… MA    0207…  42.1\n 4 38a7cc6… 17a4bae5-8b… Olym… Female GENERAL P… 512 MA… shre… MA    0154…  42.3\n 5 5b8e0a3… 4112b8b1-59… Ambr… Male   GENERAL P… 37 ROU… sand… MA    0256…  41.8\n 6 5cb9747… e76b5eb0-0c… Gise… Female GENERAL P… 1400 V… west… MA    02132  42.3\n 7 633f248… c241b977-41… Kip4… Male   GENERAL P… 94 MAI… hyan… MA    0260…  41.7\n 8 4886d4a… ef5390b4-cb… Mila… Male   GENERAL P… 360 ME… mald… MA    0214…  42.4\n 9 774bf03… 6fafb5d4-ec… Shel… Female GENERAL P… 320 WE… west… MA    02379  42.0\n10 f4e1828… aa682136-a4… Ánge… Female GENERAL P… 501 CO… norw… MA    0206…  42.2\n# ℹ 582 more rows\n# ℹ 3 more variables: LON &lt;dbl&gt;, ENCOUNTERS &lt;dbl&gt;, PROCEDURES &lt;dbl&gt;\n\n\n\n# Perform anti-join to remove providers only present in check_prov_enc from the original dataset\nproviders_filtered &lt;- providers %&gt;%\n  anti_join(providers_only_in_providers_df, by = c(\"NAME\" = \"NAME\"))\n\n# Print the dimensions of the resulting dataset\nprint(dim(providers_filtered))\n\n[1] 223  13\n\n\nResult is 223, though it should be 222.\n\n# Find duplicate rows based on the NAME column\nduplicate_rows &lt;- providers_filtered[duplicated(providers_filtered$NAME) | duplicated(providers_filtered$NAME, fromLast = TRUE), ]\n\n# Print the duplicate rows\nprint(duplicate_rows %&gt;% select(PROVIDER, CITY))\n\n# A tibble: 2 × 2\n  PROVIDER                             CITY      \n  &lt;chr&gt;                                &lt;chr&gt;     \n1 be12b8b5-2618-3d5e-a976-199d56505cd0 leominster\n2 8e8ca291-3456-359b-9a13-0a6dc7016381 reading   \n\n\nAh Maynard.\n\n# Find duplicate rows based on the NAME column\nMaynard_rows &lt;- encounters_cleaning %&gt;% filter (PROVIDER == \"Maynard46 Buckridge80\")\n\n# Print the duplicate rows\nprint(Maynard_rows %&gt;% group_by(CITY.x)) %&gt;% select(PROVIDER, CITY.x)\n\n# A tibble: 22 × 51\n# Groups:   CITY.x [1]\n   ENCOUNTER_ID   START               STOP                PATIENT ORGANIZATION.x\n   &lt;chr&gt;          &lt;dttm&gt;              &lt;dttm&gt;              &lt;chr&gt;   &lt;chr&gt;         \n 1 a4e40cc3-e8e2… 1958-10-16 18:06:02 1958-10-16 18:51:39 Tommy8… 817f4acb-0184…\n 2 64f7e2f4-4fef… 1960-10-27 18:06:02 1960-10-27 18:47:34 Tommy8… 817f4acb-0184…\n 3 c194d751-9164… 1978-11-16 18:06:02 1978-11-16 18:49:04 Tommy8… 817f4acb-0184…\n 4 8f814ff1-65a5… 1979-11-22 18:06:02 1979-11-22 18:47:03 Tommy8… 817f4acb-0184…\n 5 d99e97ef-b857… 1981-12-03 18:06:02 1981-12-03 19:01:22 Tommy8… 817f4acb-0184…\n 6 c3a214d7-4f71… 1982-12-09 18:06:02 1982-12-09 19:00:00 Tommy8… 817f4acb-0184…\n 7 4a9f1c7b-574c… 1985-12-26 18:06:02 1985-12-26 18:51:22 Tommy8… 817f4acb-0184…\n 8 e8e4f402-08a2… 1987-01-01 18:06:02 1987-01-01 18:46:31 Tommy8… 817f4acb-0184…\n 9 24e91e6e-4ec8… 1989-01-12 18:06:02 1989-01-12 18:38:56 Tommy8… 817f4acb-0184…\n10 83cc31e3-4efc… 1991-01-24 18:06:02 1991-01-24 19:02:22 Tommy8… 817f4acb-0184…\n# ℹ 12 more rows\n# ℹ 46 more variables: PROVIDER &lt;chr&gt;, PAYER &lt;chr&gt;, ENCOUNTERCLASS &lt;chr&gt;,\n#   CODE &lt;dbl&gt;, DESCRIPTION &lt;chr&gt;, BASE_ENCOUNTER_COST &lt;dbl&gt;,\n#   TOTAL_CLAIM_COST &lt;dbl&gt;, PAYER_COVERAGE &lt;dbl&gt;, REASONCODE &lt;dbl&gt;,\n#   REASONDESCRIPTION &lt;chr&gt;, ORGANIZATION.y &lt;chr&gt;, GENDER.x &lt;chr&gt;,\n#   SPECIALITY &lt;chr&gt;, ADDRESS.x &lt;chr&gt;, CITY.x &lt;chr&gt;, STATE.x &lt;chr&gt;,\n#   ZIP.x &lt;chr&gt;, LAT.x &lt;dbl&gt;, LON.x &lt;dbl&gt;, ENCOUNTERS &lt;dbl&gt;, …\n\n\n# A tibble: 22 × 2\n# Groups:   CITY.x [1]\n   PROVIDER              CITY.x \n   &lt;chr&gt;                 &lt;chr&gt;  \n 1 Maynard46 Buckridge80 reading\n 2 Maynard46 Buckridge80 reading\n 3 Maynard46 Buckridge80 reading\n 4 Maynard46 Buckridge80 reading\n 5 Maynard46 Buckridge80 reading\n 6 Maynard46 Buckridge80 reading\n 7 Maynard46 Buckridge80 reading\n 8 Maynard46 Buckridge80 reading\n 9 Maynard46 Buckridge80 reading\n10 Maynard46 Buckridge80 reading\n# ℹ 12 more rows\n\n\nI’ll choose the Maynard in Reading and remove the Maynard in Leominster.\n\nproviders_filtered &lt;- providers_filtered %&gt;%\n  filter(PROVIDER != \"be12b8b5-2618-3d5e-a976-199d56505cd0\")\n# Print the dimensions of the resulting dataset\nprint(dim(providers_filtered))\n\n[1] 222  13\n\n\n\ncheck_pat &lt;- encounters_cleaning %&gt;%\n  group_by(PATIENT, GENDER.y) %&gt;%\n  summarize(COUNT = n())\n\n`summarise()` has grouped output by 'PATIENT'. You can override using the\n`.groups` argument.\n\ncheck_pat_enc &lt;- patients %&gt;%\n  group_by(NAME,PATIENT)\n\n\ndim(check_pat)\n\n[1] 86  3\n\ndim(check_pat_enc)\n\n[1] 86 27\n\n\nPatients have the same dimensions."
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#patient-data-2",
    "href": "posts/Post_One - Copy/post_1_drug.html#patient-data-2",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "PATIENT DATA 2",
    "text": "PATIENT DATA 2\n\nggplot(providers_filtered, aes(GENDER)) +geom_bar() + labs(title = \"Provider Gender Breakdown\")\n\n\n\nggplot(data = providers_filtered %&gt;% \n         count(CITY) %&gt;% \n         filter(n &gt; 5),  # Filter for counts higher than 10\n       aes(x = CITY, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Provider Cities\", \"\\n*filtered to show &gt;5 Providers per City\"))"
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#encounter-data-2",
    "href": "posts/Post_One - Copy/post_1_drug.html#encounter-data-2",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "ENCOUNTER DATA 2",
    "text": "ENCOUNTER DATA 2\n\nggplot(encounters, aes(ENCOUNTERCLASS)) + geom_bar() + coord_flip()+ labs(title = \"Type of Visit\")\n\n\n\nggplot(data = encounters %&gt;% \n         count(DESCRIPTION) %&gt;% \n         filter(n &gt; 50),  # Filter for counts higher than 10\n       aes(x = DESCRIPTION, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Visit Description\", \"\\n*filtered to show &gt;50 visits\"))\n\n\n\nggplot(data = encounters %&gt;% \n         count(REASONDESCRIPTION) %&gt;% \n         filter(n &gt; 50),  # Filter for counts higher than 10\n       aes(x = reorder(REASONDESCRIPTION, n), y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Reason Patient Visited Provider\", \"\\n*filtered to show &gt;50 visits\"))\n\n\n\n\nAside from NA (which does not stand for Narcotics Anonymous) the most frequent reason a patient visits a provider is for “Dependent drug abuse (disorder)”. This is exactly what I would have anticipated seeing in this dataset, considering I called for only patients with a high likelyhood of being drug dependent.\nThe second most frequent reason for visiting a provider is “Chronic kidney disease stage 4 (disorder)”. One insight I have been given is that kidney disease may involve a lot of trips to the doctors for dialysis. I may look into this dataset to see if I’m right, but this is more a side tangent."
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#join-datasets",
    "href": "posts/Post_One - Copy/post_1_drug.html#join-datasets",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "Join Datasets",
    "text": "Join Datasets\n\n# Perform a left join to merge encounters with provider_attributes based on PROVIDER\nencounters_cleaned &lt;- left_join(encounters, providers_filtered, by = \"PROVIDER\")\n# Replace the PROVIDER column with the corresponding names from the NAME column\nencounters_cleaned$PROVIDER &lt;- encounters_cleaned$NAME\n# Remove the NAME column if no longer needed\nencounters_cleaned &lt;- encounters_cleaned %&gt;%\n  select(-NAME)\n#Repeat for Provider\nencounters_cleaned &lt;- left_join(encounters_cleaned, patients, by = \"PATIENT\")\nencounters_cleaned$PATIENT &lt;- encounters_cleaned$NAME\nencounters_cleaned &lt;- encounters_cleaned %&gt;%\n  select(-NAME) \n#Clearly identify the Encounter ID\nencounters_cleaned &lt;- encounters_cleaned %&gt;%\n  rename(ENCOUNTER_ID = Id)\n\n\nencounter_attributes &lt;- encounters_cleaned %&gt;%\n  select(ENCOUNTER_ID, PATIENT, PROVIDER, GENDER.x, GENDER.y, RACE, MARITAL, ETHNICITY, INCOME, CITY.x, CITY.y)\n# View the updated dataframe\nhead(encounter_attributes)\n\n# A tibble: 6 × 11\n  ENCOUNTER_ID PATIENT PROVIDER GENDER.x GENDER.y RACE  MARITAL ETHNICITY INCOME\n  &lt;chr&gt;        &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;\n1 1b544ceb-bf… Annice… Clement… Male     Female   white Married nonhispa…   1565\n2 0d642d81-96… Annice… Clement… Male     Female   white Married nonhispa…   1565\n3 99d190e1-67… Annice… Clement… Male     Female   white Married nonhispa…   1565\n4 cc076374-d3… Annice… Enrique… Female   Female   white Married nonhispa…   1565\n5 05a24332-4d… Annice… Enrique… Female   Female   white Married nonhispa…   1565\n6 8844f58d-3e… Annice… Enrique… Female   Female   white Married nonhispa…   1565\n# ℹ 2 more variables: CITY.x &lt;chr&gt;, CITY.y &lt;chr&gt;"
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#edgelist",
    "href": "posts/Post_One - Copy/post_1_drug.html#edgelist",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "EDGELIST",
    "text": "EDGELIST\n\n# Create Edgelist & Assign Weight by Count of Encounter\nencounters_el &lt;- encounter_attributes %&gt;%\n  group_by(PATIENT, PROVIDER) %&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PATIENT'. You can override using the\n`.groups` argument.\n\nhead(encounters_el)\n\n# A tibble: 6 × 3\n# Groups:   PATIENT [2]\n  PATIENT             PROVIDER                  COUNT\n  &lt;chr&gt;               &lt;chr&gt;                     &lt;int&gt;\n1 Adam631 Hoppe518    Elijah719 White193            8\n2 Adam631 Hoppe518    Fidel864 Swift555             2\n3 Adam631 Hoppe518    Virgen207 Hyatt152            3\n4 Adam631 Hoppe518    Zachery872 Pagac496          31\n5 Alesha810 Heaney114 Kristopher775 Schiller186    13\n6 Alesha810 Heaney114 Laine739 Torphy630            4\n\ndim(encounters_el)\n\n[1] 341   3"
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#combined-attribute-list",
    "href": "posts/Post_One - Copy/post_1_drug.html#combined-attribute-list",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "COMBINED ATTRIBUTE LIST",
    "text": "COMBINED ATTRIBUTE LIST\n\n#combine pro and pat attr\npat_attr$type &lt;- \"PATIENT\"\npro_attr &lt;- providers_filtered %&gt;%\n  select(NAME, GENDER, CITY)\npro_attr$type &lt;- \"PROVIDER\"\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n\n# A tibble: 6 × 8\n  NAME                   GENDER RACE  MARITAL  CITY       INCOME   AGE type   \n  &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1 Annice210 Gleason633   Female white Married  brookline    1565    37 PATIENT\n2 Julianne852 Barrows492 Female white Widowed  hamilton    39537    65 PATIENT\n3 Alesha810 Heaney114    Female white Divorced framingham 114339    46 PATIENT\n4 Sandee884 Rice937      Female white &lt;NA&gt;     taunton     96256    26 PATIENT\n5 Mia349 Runte676        Female white Divorced chelmsford  71238    44 PATIENT\n6 Damian46 Dach178       Male   white &lt;NA&gt;     swansea     74155    26 PATIENT\n\n\n\n#create combined attribute list\nattribute_list &lt;- do.call(list, both_attr)"
  },
  {
    "objectID": "posts/Post_One - Copy/post_1_drug.html#network",
    "href": "posts/Post_One - Copy/post_1_drug.html#network",
    "title": "Data Cleaning, Exploration, and Network Analysis",
    "section": "NETWORK",
    "text": "NETWORK\n\n# create bipartite network with attributes\nencounters.st.3 &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\nencounters.st.3\n\n Network attributes:\n  vertices = 308 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = 86 \n  total edges= 341 \n    missing edges= 0 \n    non-missing edges= 341 \n\n Vertex attribute names: \n    AGE CITY GENDER INCOME MARITAL NAME RACE type vertex.names \n\n Edge attribute names: \n    COUNT"
  },
  {
    "objectID": "posts/Post_Three - Copy/post_3_drug.html",
    "href": "posts/Post_Three - Copy/post_3_drug.html",
    "title": "Network Block Modeling - Patients",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\n\nThis post will explore the Synthetic Mass network data in more detail.\n\nRead in Data\n\npat_attr &lt;- read_csv(\"post1drug_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr &lt;- read_csv(\"post1drug_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning &lt;- read_csv(\"post1drug_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned &lt;- read_csv(\"post1drug_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes &lt;- read_csv(\"post1drug_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  &lt;- read_csv(\"post1drug_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 &lt;- read_csv(\"post1drug_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list &lt;- read.csv(\"post1drug_data/attribute_list.csv\")\n\n\n\nCreate bipartite network with attributes\n\nencounters.stat &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n\n\n#create igraph\nencounters.ig &lt;- graph_from_biadjacency_matrix(encounters.stat)\n\n\nencounters.stat2 &lt;- asNetwork(encounters.ig)\n\n\nprojected_graph &lt;- bipartite_projection(encounters.ig)\npatient_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\npatient.stat &lt;- asNetwork(projected_graph$proj1)\n\npatient.se &lt;- equiv.clust(patient_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\nnames(patient.se)\n\n[1] \"cluster\"        \"metric\"         \"equiv.fun\"      \"cluster.method\"\n[5] \"glabels\"        \"plabels\"       \n\n\n\nplot(patient.se, main = \"patient\")\nrect.hclust(patient.se$cluster, k = 6)\n\n\n\n\n\npat_blk_model.patient.org &lt;- blockmodel(patient_matrix,\n patient.se, k = 6)\n\n\n pat_blk_model.patient.org$block.model\n\n            Block 1    Block 2   Block 3     Block 4   Block 5 Block 6\nBlock 1 0.019557823 0.02678571 0.0127551 0.006802721 0.0000000       0\nBlock 2 0.026785714 1.00000000 0.0000000 0.010416667 0.1458333       1\nBlock 3 0.012755102 0.00000000 1.0000000 0.000000000 0.0625000       1\nBlock 4 0.006802721 0.01041667 0.0000000 1.000000000 0.0000000       0\nBlock 5 0.000000000 0.14583333 0.0625000 0.000000000 0.6000000       0\nBlock 6 0.000000000 1.00000000 1.0000000 0.000000000 0.0000000     NaN\n\n\n\nplot.block&lt;-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(pat_blk_model.patient.org, main = \"patient\")\n\n\n\n\n\n#pat_blks6 &lt;- blockmodeling::optRandomParC(patient_matrix,k=6, rep=20, approaches=\"ss\", blocks=\"com\")\n\n\n# Save the blks2 object to a file\n#saveRDS(pat_blks6, \"pat_blks6_results.rds\")\n\n# Later, when you want to use it again, you can read it back into R\npat_blks6 &lt;- readRDS(\"pat_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\npat_blk_mod &lt;- blockmodel(patient_matrix, pat_blks6$best$best1$clu,\n                      plabels = rownames(patient_matrix))\n# print blockmodel object\npat_blk_mod$block.model\n\n        Block 1    Block 2    Block 3     Block 4    Block 5     Block 6\nBlock 1       1 1.00000000 0.00000000 0.000000000 1.00000000 0.000000000\nBlock 2       1 0.70000000 0.05000000 0.000000000 0.05333333 0.008000000\nBlock 3       0 0.05000000 1.00000000 0.000000000 0.06666667 0.015000000\nBlock 4       0 0.00000000 0.00000000 1.000000000 0.01111111 0.006666667\nBlock 5       1 0.05333333 0.06666667 0.011111111 1.00000000 0.028000000\nBlock 6       0 0.00800000 0.01500000 0.006666667 0.02800000 0.018775510\n\n\n#assign attributes\n\nglimpse(pat_blk_mod)\n\nList of 11\n $ block.membership: int [1:86] 1 1 2 2 2 2 2 3 3 3 ...\n $ order.vector    : int [1:86] 31 67 19 28 63 75 85 8 9 10 ...\n $ block.content   : chr \"density\"\n $ blocked.data    : num [1:86, 1:86] 0 1 1 1 1 1 1 0 0 0 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:86] \"Johnnie679 Hand679\" \"Rudy520 Hettinger594\" \"Dortha70 Rutherford999\" \"Ivan258 Hills818\" ...\n  .. ..$ : chr [1:86] \"Johnnie679 Hand679\" \"Rudy520 Hettinger594\" \"Dortha70 Rutherford999\" \"Ivan258 Hills818\" ...\n $ block.model     : num [1:6, 1:6] 1 1 0 0 1 0 1 0.7 0.05 0 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ plabels         : chr [1:86] \"Johnnie679 Hand679\" \"Rudy520 Hettinger594\" \"Dortha70 Rutherford999\" \"Ivan258 Hills818\" ...\n $ glabels         : int [1:86] 1 2 3 4 5 6 7 8 9 10 ...\n $ rlabels         : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ cluster.method  : chr \"Prespecified\"\n $ equiv.fun       : chr \"None\"\n $ equiv.metric    : chr \"None\"\n - attr(*, \"class\")= chr \"blockmodel\"\n\n\n\npat_attr$block &lt;- pat_blk_mod$block.membership\nhead(pat_attr)\n\n# A tibble: 6 × 9\n  NAME                   GENDER RACE  MARITAL  CITY     INCOME   AGE type  block\n  &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt;\n1 Annice210 Gleason633   Female white Married  brookli…   1565    37 PATI…     1\n2 Julianne852 Barrows492 Female white Widowed  hamilton  39537    65 PATI…     1\n3 Alesha810 Heaney114    Female white Divorced framing… 114339    46 PATI…     2\n4 Sandee884 Rice937      Female white &lt;NA&gt;     taunton   96256    26 PATI…     2\n5 Mia349 Runte676        Female white Divorced chelmsf…  71238    44 PATI…     2\n6 Damian46 Dach178       Male   white &lt;NA&gt;     swansea   74155    26 PATI…     2\n\n#write.csv(pat_attr, \"pat_attr.csv\")\n\n\nplot.block(pat_blk_mod, main = \"patient\",\n           cex.lab = .000001)\n\n\n\n\n\n#assign block membership to vertex attribute\npatient.stat%v%\"role\"&lt;-pat_blk_mod$block.membership[match(patient.stat%v%\"vertex.names\",pat_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(patient.stat,\n               node.color=\"role\", \n               node.size=sna::degree(patient.stat, gmode=\"graph\"),\n               node.alpha = .5)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n\n\n\n\nlibrary(ade4)\n\nWarning: package 'ade4' was built under R version 4.3.3\n\n\n\nencounters.adj.ig &lt;- igraph::as_biadjacency_matrix(encounters.ig)\n\npatients_jaccard &lt;- dist.binary(encounters.adj.ig,\n            method = 1, # method=1 Jaccard index\n            upper = TRUE,\n            diag = FALSE)\n\npatients_jaccard &lt;- as.matrix(patients_jaccard)\ndiag(patients_jaccard) &lt;- 0\n\n\n#binarize\npatients_jaccard_bi &lt;- ifelse(patients_jaccard &gt; 0.99, 1, 0)\n\n\n#create igraph object\npatients_jaccard.ig &lt;- graph_from_adjacency_matrix(patients_jaccard_bi, mode = \"undirected\")\nsummary(patients_jaccard.ig)\n\nIGRAPH 905f5e9 UN-- 86 3390 -- \n+ attr: name (v/c)\n\n\n\nplot(patients_jaccard.ig,  edge.width = 0.0002, edge.color = \"lightgray\",  vertex.size = 2, vertex.label = NA)\n\n\n\n\n\n# Load the igraph package\nlibrary(igraph)\n\n# Create an igraph object from the blockmodel\ng &lt;- graph_from_adjacency_matrix(patient_matrix, mode = \"undirected\", weighted = FALSE)\n\n# Plot the graph without labels\nplot(g,      \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 2, \n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Patient Network\")"
  },
  {
    "objectID": "posts/Post_Four - Copy/post_4_drug.html",
    "href": "posts/Post_Four - Copy/post_4_drug.html",
    "title": "Network Block Modeling - Providers",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\n\nThis post will explore the Synthetic Mass network data in more detail.\n\nRead in Data\n\npat_attr &lt;- read_csv(\"post1drug_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr &lt;- read_csv(\"post1drug_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning &lt;- read_csv(\"post1drug_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned &lt;- read_csv(\"post1drug_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes &lt;- read_csv(\"post1drug_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  &lt;- read_csv(\"post1drug_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 &lt;- read_csv(\"post1drug_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list &lt;- read.csv(\"post1drug_data/attribute_list.csv\")\n\n\n\nCreate bipartite network with attributes\n\nencounters.stat &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n\n\n#create igraph\nencounters.ig &lt;- graph_from_biadjacency_matrix(encounters.stat)\n\n\nencounters.stat2 &lt;- asNetwork(encounters.ig)\n\n\nprojected_graph &lt;- bipartite_projection(encounters.ig)\nprovider_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj2))\n\nprovider.stat &lt;- asNetwork(projected_graph$proj2)\n\nprovider.se &lt;- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\nnames(provider.se)\n\n[1] \"cluster\"        \"metric\"         \"equiv.fun\"      \"cluster.method\"\n[5] \"glabels\"        \"plabels\"       \n\n\n\nplot(provider.se, main = \"provider\")\nrect.hclust(provider.se$cluster, k = 12)\n\n\n\n\n\nblk_model.provider.org &lt;- blockmodel(provider_matrix,\n provider.se, k = 6)\n\n\n blk_model.provider.org$block.model\n\n            Block 1   Block 2   Block 3     Block 4     Block 5    Block 6\nBlock 1 0.017318436 0.2444444 0.1222222 0.002222222 0.002046784 0.01481481\nBlock 2 0.244444444       NaN 1.0000000 0.000000000 0.210526316 1.00000000\nBlock 3 0.122222222 1.0000000       NaN 0.000000000 0.315789474 0.00000000\nBlock 4 0.002222222 0.0000000 0.0000000 0.466666667 0.000000000 0.01111111\nBlock 5 0.002046784 0.2105263 0.3157895 0.000000000 0.239766082 0.00000000\nBlock 6 0.014814815 1.0000000 0.0000000 0.011111111 0.000000000 1.00000000\n\n\n\nplot.block&lt;-function(x=blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(blk_model.provider.org, main = \"provider\")\n\n\n\n\n\n#prov_blks6 &lt;- blockmodeling::optRandomParC(provider_matrix, k=6, rep=10, approaches=\"ss\", blocks=\"com\")\n\n\n# Save the prov_blks6 object to a file\n#saveRDS(prov_blks6, \"prov_blks6_results.rds\")\n\n# Later, when you want to use it again, you can read it back into R\nprov_blks6 &lt;- readRDS(\"prov_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\nprov_blk_mod &lt;- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n# print blockmodel object\nprov_blk_mod$block.model\n\n           Block 1   Block 2     Block 3     Block 4    Block 5     Block 6\nBlock 1 1.00000000 1.0000000 0.017204301 0.016666667 0.00000000 0.000000000\nBlock 2 1.00000000       NaN 0.000000000 0.000000000 1.00000000 0.857142857\nBlock 3 0.01720430 0.0000000 0.016841223 0.009032258 0.01080270 0.002764977\nBlock 4 0.01666667 0.0000000 0.009032258 0.733333333 0.00000000 0.000000000\nBlock 5 0.00000000 1.0000000 0.010802701 0.000000000 0.07973422 0.000000000\nBlock 6 0.00000000 0.8571429 0.002764977 0.000000000 0.00000000 0.714285714\n\n\n\nglimpse(prov_blk_mod)\n\nList of 11\n $ block.membership: int [1:222] 1 1 1 1 1 1 2 3 3 3 ...\n $ order.vector    : int [1:222] 104 110 114 175 182 183 9 1 2 4 ...\n $ block.content   : chr \"density\"\n $ blocked.data    : num [1:222, 1:222] 0 1 1 1 1 1 1 0 0 0 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:222] \"Freeda113 Crooks415\" \"Clemente531 Schamberger479\" \"Zachery872 Rau926\" \"Gino587 Block661\" ...\n  .. ..$ : chr [1:222] \"Freeda113 Crooks415\" \"Clemente531 Schamberger479\" \"Zachery872 Rau926\" \"Gino587 Block661\" ...\n $ block.model     : num [1:6, 1:6] 1 1 0.0172 0.0167 0 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ plabels         : chr [1:222] \"Freeda113 Crooks415\" \"Clemente531 Schamberger479\" \"Zachery872 Rau926\" \"Gino587 Block661\" ...\n $ glabels         : int [1:222] 1 2 3 4 5 6 7 8 9 10 ...\n $ rlabels         : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ cluster.method  : chr \"Prespecified\"\n $ equiv.fun       : chr \"None\"\n $ equiv.metric    : chr \"None\"\n - attr(*, \"class\")= chr \"blockmodel\"\n\n\n\npro_attr$block &lt;- prov_blk_mod$block.membership \n\nhead(pro_attr)\n\n# A tibble: 6 × 5\n  NAME                   GENDER CITY       type     block\n  &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;    &lt;int&gt;\n1 Ted955 Reilly981       Male   fitchburg  PROVIDER     1\n2 Shane235 Lueilwitz711  Male   worcester  PROVIDER     1\n3 Jules135 Emard19       Male   leominster PROVIDER     1\n4 Jarvis643 Ankunding277 Male   fall river PROVIDER     1\n5 Thad495 Leannon79      Male   peabody    PROVIDER     1\n6 Bud153 Parisian75      Male   worcester  PROVIDER     1\n\n#write.csv(pro_attr, \"pro_attr.csv\")\n\n\nplot.block(prov_blk_mod, main = \"Provider 6 Block Model\",\n           cex.lab = .000001)\n\n\n\n\n\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"&lt;-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5)  + ggtitle(\"Provider 6 Block Model Network\")\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n\n\n\n#Next Steps Jaccard similarity\n\nlibrary(ade4)\n\nWarning: package 'ade4' was built under R version 4.3.3\n\n\n\nencounters.adj.ig &lt;- igraph::as_biadjacency_matrix(encounters.ig)\n\nproviders_jaccard &lt;- dist.binary(t(encounters.adj.ig),\n            method = 1, # method=1 Jaccard index\n            upper = TRUE,\n            diag = FALSE)\n\n\nproviders_jaccard &lt;- as.matrix(providers_jaccard)\ndiag(providers_jaccard) &lt;- 0\n\n\n#binarize\nproviders_jaccard_bi &lt;- ifelse(providers_jaccard &gt; 0.99, 1, 0)\n\n\n#create igraph object\nproviders_jaccard.ig &lt;- graph_from_adjacency_matrix(providers_jaccard_bi, mode = \"undirected\")\nproviders_jaccard.ig\n\nIGRAPH 2dce25b UN-- 222 24034 -- \n+ attr: name (v/c)\n+ edges from 2dce25b (vertex names):\n [1] Elijah719 White193--Kristopher775 Schiller186\n [2] Elijah719 White193--Laine739 Torphy630       \n [3] Elijah719 White193--Leonarda398 Schumm995    \n [4] Elijah719 White193--Mathew182 Howe413        \n [5] Elijah719 White193--Ted955 Reilly981         \n [6] Elijah719 White193--Vicente970 Armstrong51   \n [7] Elijah719 White193--Daniel959 Wolff180       \n [8] Elijah719 White193--Elmer371 Gusikowski974   \n+ ... omitted several edges\n\n\n\nplot(providers_jaccard.ig,  edge.width = 0.0002, edge.color = \"lightgray\",  vertex.size = 2, vertex.label = NA)\n\n\n\n\n\n# Load the igraph package\nlibrary(igraph)\n\n# Create an igraph object from the blockmodel\ng &lt;- graph_from_adjacency_matrix(provider_matrix, mode = \"undirected\", weighted = FALSE)\n\n# Plot the graph without labels\nplot(g,      layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 2, \n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Provider Network\")"
  },
  {
    "objectID": "posts/Post_Five - Copy/post_5_drug.html",
    "href": "posts/Post_Five - Copy/post_5_drug.html",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\nThis post will explore the Synthetic Mass network data in more detail."
  },
  {
    "objectID": "posts/Post_Five - Copy/post_5_drug.html#patient",
    "href": "posts/Post_Five - Copy/post_5_drug.html#patient",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "PATIENT",
    "text": "PATIENT\n\npatient_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\npatient.stat &lt;- asNetwork(projected_graph$proj1)\n\npatient.se &lt;- equiv.clust(patient_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\n\npat_blk_model.patient.org &lt;- blockmodel(patient_matrix,\n patient.se, k = 4)\n\n\nplot.block&lt;-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(pat_blk_model.patient.org, main = \"patient\")\n\n\n\n\n\npat_blks6 &lt;- readRDS(\"pat_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\npat_blk_mod &lt;- blockmodel(patient_matrix, pat_blks6$best$best1$clu,\n                      plabels = rownames(patient_matrix))\n\n\n#assign block membership to vertex attribute\npatient.stat%v%\"role\"&lt;-pat_blk_mod$block.membership[match(patient.stat%v%\"vertex.names\",pat_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(patient.stat,\n               node.color=\"role\", \n               node.size=sna::degree(patient.stat, gmode=\"graph\"),\n               node.alpha = .5)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2"
  },
  {
    "objectID": "posts/Post_Five - Copy/post_5_drug.html#provider",
    "href": "posts/Post_Five - Copy/post_5_drug.html#provider",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "PROVIDER",
    "text": "PROVIDER\n\nprovider_matrix &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj2))\n\nprovider.stat &lt;- asNetwork(projected_graph$proj2)\n\nprovider.se &lt;- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\n\nblk_model.provider.org &lt;- blockmodel(provider_matrix,\n provider.se, k = 6)\n\n\nprov_blks6 &lt;- readRDS(\"prov_blks6_results.rds\")\n\n\n# blockmodel with optimized partition\nprov_blk_mod &lt;- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n\n\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"&lt;-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")"
  },
  {
    "objectID": "posts/Post_Five - Copy/post_5_drug.html#create-new-attribute-lists",
    "href": "posts/Post_Five - Copy/post_5_drug.html#create-new-attribute-lists",
    "title": "Network Block Modeling - Geographical Comparisson",
    "section": "Create New Attribute Lists",
    "text": "Create New Attribute Lists\n\npat_attr$block &lt;- pat_blk_mod$block.membership\npro_attr$block &lt;- prov_blk_mod$block.membership\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\n\npat_attr_list &lt;- do.call(list, pat_attr)\npro_attr_list &lt;- do.call(list, pro_attr)\nattribute_list &lt;- do.call(list, both_attr)\n\n\nprovider.st &lt;- network(provider_matrix,\n                       directed = FALSE,\n                       matrix.type = \"adjacency\",\n                       vertex.attr = pro_attr_list)\nprovider.st\n\n Network attributes:\n  vertices = 222 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 497 \n    missing edges= 0 \n    non-missing edges= 497 \n\n Vertex attribute names: \n    block CITY GENDER NAME type vertex.names \n\nNo edge attributes\n\n\n\nprovider_graph &lt;- graph_from_biadjacency_matrix(provider.st)\n\n\n#assign colors\n#colors &lt;-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors &lt;- colors[pro_attr_list$block]\nvertex_colors &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"red\", \"white\")\n\nvertex_shape &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n\n\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"SN Graph\")\n\n\n\n\nWhat other cities are on the provider list. Boston is not being properly represented, I have a feeling\n\ntable(pro_attr$CITY)\n\n\n       abington         amherst       attleboro          auburn      auburndale \n              1               2               5               1               2 \n           ayer         beverly          boston       braintree        brighton \n              1               1               2               1               2 \n       brockton       brookline         byfield       cambridge     centerville \n              2               1               1               4               1 \n    charlestown        charlton      chelmsford         chelsea   chestnut hill \n              1               1               1               1               1 \n       chicopee         danvers       dartmouth      dorchester   east sandwich \n              2               2               2               1               1 \n      fairhaven      fall river       fitchburg      foxborough      framingham \n              2               7               4               1               4 \n       franklin         gardner      greenfield          groton          hadley \n              1               2               3               1               1 \n        hanover       holliston         holyoke       hopkinton         hyannis \n              2               1               2               1               3 \n      lakeville      leominster          ludlow            lynn         mashpee \n              3               5               1               6               1 \n       medfield         melrose      middleboro       middleton         milford \n              1               2               1               1               2 \n         milton          natick         needham     new bedford     newburyport \n              2               4               2               4               3 \n         newton     north adams north dartmouth     northampton          norton \n              2               1               1               3               1 \n        norwood         peabody      pittsfield        plymouth          quincy \n              3               3               2               1               1 \n       randolph         raynham         reading        rochdale        rockland \n              2               1               2               1               1 \n     roslindale     s dartmouth      s yarmouth           salem        sandwich \n              1               1               1               1               2 \n         saugus         shirley        somerset      somerville    south boston \n              1               1               2               1               2 \n south hamilton  south yarmouth     springfield        stoneham       stoughton \n              2               2               1               4               1 \n     swampscott         swansea         taunton           upton    w brookfield \n              1               1               6               1               1 \n          waban       wakefield         walpole         waltham            ware \n              1               2               1               7               1 \n        wareham       wellesley wellesley hills    west roxbury   west yarmouth \n              3               2               1               1               1 \n      westfield        westford        westwood        weymouth       wilbraham \n              3               3               1               3               1 \n       winthrop          woburn       worcester        wrentham   yarmouth port \n              1               5              12               1               1 \n\npro_attr &lt;- pro_attr %&gt;%\n  mutate(\n    CITY =tolower(CITY)\n  )\npro_attr_list &lt;- do.call(list, pro_attr)\n\nShould have cleaned that earlier, but here we go!\n\nBoston_Neighborhoods &lt;- c(\n  \"ALLSTON\",\n  \"BRIGHTON\",\n  \"BOSTON\",\n  \"CHARLESTOWN\",\n  \"DORCHESTER\",\n  \"HYDE PARK\",\n  \"JAMAICA PLAIN\",\n  \"MATTAPAN\",\n  \"ROSLINDALE\",\n  \"ROXBURY\",\n  \"West Roxbury\",\n  \"WEST ROXBURY\"\n)\nBoston_Neighborhoods &lt;- tolower(Boston_Neighborhoods)\n\n\n#assign colors\n#colors &lt;-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors &lt;- colors[pro_attr_list$block]\nvertex_colors &lt;- ifelse(pro_attr_list$CITY %in% Boston_Neighborhoods, \"red\", \"white\")\nvertex_shape &lt;- ifelse(pro_attr_list$block == \"1\", \"circle\", \"square\")\n#vertex_shape &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n\n\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = BOSTON\")\n\n\n\n\nSo… it’s not Boston related.\nHow about Highest populations\n\nlargest_pop &lt;- c(\n\"Boston\",\n\"Worcester\",\n\"Springfield\",\n\"Cambridge\",\n\"Lowell\",\n\"Brockton\",\n\"Quincy\",\n\"Lynn\",\n\"New Bedford\",\n\"Fall River\",\n\"Lawrence\",\n\"Newton\",\n\"Somerville\",\n\"Framingham\",\n\"Haverhill\")\nlargest_pop &lt;- tolower(largest_pop)\n\n\n#assign colors\n#colors &lt;-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors &lt;- colors[pro_attr_list$block]\nvertex_colors &lt;- ifelse(pro_attr_list$CITY %in% largest_pop, \"red\", \"white\")\nvertex_shape &lt;- ifelse(pro_attr_list$block == \"1\", \"circle\", \"square\")\n#vertex_shape &lt;- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n\n\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = Largest Cities\")\n\n\n\n\n\nblock1 &lt;- pro_attr %&gt;%\n  filter(block == 1)\nblock1\n\n# A tibble: 6 × 5\n  NAME                   GENDER CITY       type     block\n  &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;    &lt;int&gt;\n1 Ted955 Reilly981       Male   fitchburg  PROVIDER     1\n2 Shane235 Lueilwitz711  Male   worcester  PROVIDER     1\n3 Jules135 Emard19       Male   leominster PROVIDER     1\n4 Jarvis643 Ankunding277 Male   fall river PROVIDER     1\n5 Thad495 Leannon79      Male   peabody    PROVIDER     1\n6 Bud153 Parisian75      Male   worcester  PROVIDER     1\n\n\n\nTed955 &lt;- encounters_cleaned %&gt;% \n    filter(PROVIDER == \"Ted955 Reilly981\") %&gt;% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n\nTed955\n\n# A tibble: 16 × 4\n# Groups:   PROVIDER, CITY.x [1]\n   PROVIDER         CITY.x    REASONDESCRIPTION                            COUNT\n   &lt;chr&gt;            &lt;chr&gt;     &lt;chr&gt;                                        &lt;int&gt;\n 1 Ted955 Reilly981 fitchburg Abnormal findings diagnostic imaging heart+…     8\n 2 Ted955 Reilly981 fitchburg Acute ST segment elevation myocardial infar…     1\n 3 Ted955 Reilly981 fitchburg Acute non-ST segment elevation myocardial i…     2\n 4 Ted955 Reilly981 fitchburg Aortic valve stenosis (disorder)                 3\n 5 Ted955 Reilly981 fitchburg Chronic congestive heart failure (disorder)      9\n 6 Ted955 Reilly981 fitchburg Dependent drug abuse (disorder)                 24\n 7 Ted955 Reilly981 fitchburg History of aortic valve replacement (situat…     2\n 8 Ted955 Reilly981 fitchburg History of coronary artery bypass grafting …     7\n 9 Ted955 Reilly981 fitchburg Hyperlipidemia                                   4\n10 Ted955 Reilly981 fitchburg Ischemic heart disease (disorder)               22\n11 Ted955 Reilly981 fitchburg Myocardial infarction (disorder)                 3\n12 Ted955 Reilly981 fitchburg Pulmonary emphysema (disorder)                   2\n13 Ted955 Reilly981 fitchburg Sinusitis (disorder)                             1\n14 Ted955 Reilly981 fitchburg Stroke                                           1\n15 Ted955 Reilly981 fitchburg Viral sinusitis (disorder)                       1\n16 Ted955 Reilly981 fitchburg &lt;NA&gt;                                            33\n\n\nGonna go ahead and say Ted’s a Cardiologist"
  }
]