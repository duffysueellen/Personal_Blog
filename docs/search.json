[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!"
  },
  {
    "objectID": "posts/my-new-post/index.html",
    "href": "posts/my-new-post/index.html",
    "title": "Future Post",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Social_Networks_Blog",
    "section": "",
    "text": "The Patient Provider Relationship, A Synthetic Social Network\n\n\nNetwork Block Modeling\n\n\n\n\ncode\n\n\nanalysis\n\n\nblock_model\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nThe Patient Provider Relationship, A Synthetic Social Network\n\n\nNetwork Exploration\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\n  \n\n\n\n\nThe Patient Provider Relationship, A Synthetic Social Network\n\n\nData Cleaning, Exploration, and Network Analysis\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 20, 2024\n\n\nSue-Ellen Duffy\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/Post_One/post_1.html",
    "href": "posts/Post_One/post_1.html",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "",
    "text": "Data for this project were taken from Synthetic Mass, which creates Synthetic patient data from Synthea.\nWhile a whole host of datasets are available within each download, I will focus this project on three datasets: patients.csv, providers.csv, and encounters.csv.\nThis post will primarily focus on data cleaning and data exploration with some exploration into social network analysis through transforming the data into an incidence matrix and plotting some attributes.\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(statnet)\nlibrary(ggplot2)\nlibrary(patchwork)"
  },
  {
    "objectID": "posts/Post_One/post_1.html#patient-data",
    "href": "posts/Post_One/post_1.html#patient-data",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "PATIENT DATA",
    "text": "PATIENT DATA\nThe following table is the data available in the patient dataset.\n\npatients &lt;- read_csv(\"synthea_sample_data_csv_latest/patients.csv\") %&gt;%\n    rename(PATIENT = Id) %&gt;%\n  unite(NAME, FIRST, LAST, sep = \" \")\n\nRows: 121 Columns: 27\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (19): Id, SSN, DRIVERS, PASSPORT, PREFIX, FIRST, LAST, SUFFIX, MAIDEN, ...\ndbl   (6): FIPS, LAT, LON, HEALTHCARE_EXPENSES, HEALTHCARE_COVERAGE, INCOME\ndate  (2): BIRTHDATE, DEATHDATE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(patients)\n\n# A tibble: 6 × 26\n  PATIENT       BIRTHDATE  DEATHDATE  SSN   DRIVERS PASSPORT PREFIX NAME  SUFFIX\n  &lt;chr&gt;         &lt;date&gt;     &lt;date&gt;     &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; \n1 b573d409-cfa… 1988-02-12 2004-12-30 999-… S99986… &lt;NA&gt;     &lt;NA&gt;   Avri… &lt;NA&gt;  \n2 2703570e-f63… 1999-03-13 NA         999-… S99998… X640979… Ms.    Norm… &lt;NA&gt;  \n3 35589a76-2a9… 2003-02-05 NA         999-… S99996… X735788… Ms.    Pegg… &lt;NA&gt;  \n4 d46186a3-507… 1986-11-07 NA         999-… S99939… X782935… Mrs.   Ashl… &lt;NA&gt;  \n5 983105f7-6f2… 1999-05-21 NA         999-… S99973… X519829… Ms.    Chri… &lt;NA&gt;  \n6 54ac079a-90a… 1988-02-12 NA         999-… S99995… X507824… Mrs.   Dion… &lt;NA&gt;  \n# ℹ 17 more variables: MAIDEN &lt;chr&gt;, MARITAL &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ETHNICITY &lt;chr&gt;, GENDER &lt;chr&gt;, BIRTHPLACE &lt;chr&gt;, ADDRESS &lt;chr&gt;, CITY &lt;chr&gt;,\n#   STATE &lt;chr&gt;, COUNTY &lt;chr&gt;, FIPS &lt;dbl&gt;, ZIP &lt;chr&gt;, LAT &lt;dbl&gt;, LON &lt;dbl&gt;,\n#   HEALTHCARE_EXPENSES &lt;dbl&gt;, HEALTHCARE_COVERAGE &lt;dbl&gt;, INCOME &lt;dbl&gt;\n\n\n\nstr(patients)\n\ntibble [121 × 26] (S3: tbl_df/tbl/data.frame)\n $ PATIENT            : chr [1:121] \"b573d409-cfaf-c585-a25b-e9d4cf510bd3\" \"2703570e-f634-d4cc-13db-2ae14e19ae59\" \"35589a76-2a97-0a89-8c2d-56defc8627af\" \"d46186a3-507c-0b22-1bfc-1f88bd7cbd7d\" ...\n $ BIRTHDATE          : Date[1:121], format: \"1988-02-12\" \"1999-03-13\" ...\n $ DEATHDATE          : Date[1:121], format: \"2004-12-30\" NA ...\n $ SSN                : chr [1:121] \"999-97-2089\" \"999-76-8207\" \"999-64-2625\" \"999-67-4853\" ...\n $ DRIVERS            : chr [1:121] \"S99986968\" \"S99998444\" \"S99996738\" \"S99939817\" ...\n $ PASSPORT           : chr [1:121] NA \"X64097979X\" \"X7357887X\" \"X78293510X\" ...\n $ PREFIX             : chr [1:121] NA \"Ms.\" \"Ms.\" \"Mrs.\" ...\n $ NAME               : chr [1:121] \"Avril120 Olson653\" \"Norma469 Langosh790\" \"Peggie783 Eichmann909\" \"Ashlie138 Williamson769\" ...\n $ SUFFIX             : chr [1:121] NA NA NA NA ...\n $ MAIDEN             : chr [1:121] NA NA NA \"Cummerata161\" ...\n $ MARITAL            : chr [1:121] NA NA NA \"M\" ...\n $ RACE               : chr [1:121] \"white\" \"white\" \"white\" \"white\" ...\n $ ETHNICITY          : chr [1:121] \"nonhispanic\" \"nonhispanic\" \"nonhispanic\" \"nonhispanic\" ...\n $ GENDER             : chr [1:121] \"F\" \"F\" \"F\" \"F\" ...\n $ BIRTHPLACE         : chr [1:121] \"Quincy  Massachusetts  US\" \"Somerville  Massachusetts  US\" \"Pittsfield  Massachusetts  US\" \"Salem  Massachusetts  US\" ...\n $ ADDRESS            : chr [1:121] \"590 Kuhic Frontage road\" \"525 Gleason Burg Suite 75\" \"230 Ratke Neck Suite 55\" \"355 Eichmann Underpass\" ...\n $ CITY               : chr [1:121] \"Newton\" \"Bridgewater\" \"Walpole\" \"Lexington\" ...\n $ STATE              : chr [1:121] \"Massachusetts\" \"Massachusetts\" \"Massachusetts\" \"Massachusetts\" ...\n $ COUNTY             : chr [1:121] \"Middlesex County\" \"Plymouth County\" \"Norfolk County\" \"Middlesex County\" ...\n $ FIPS               : num [1:121] 25017 25023 25021 25017 25017 ...\n $ ZIP                : chr [1:121] \"02461\" \"02324\" \"02081\" \"02421\" ...\n $ LAT                : num [1:121] 42.4 42 42.1 42.4 42.3 ...\n $ LON                : num [1:121] -71.2 -71 -71.2 -71.2 -71.5 ...\n $ HEALTHCARE_EXPENSES: num [1:121] 31150 50725 65580 162538 141345 ...\n $ HEALTHCARE_COVERAGE: num [1:121] 129135 100008 32578 809077 282706 ...\n $ INCOME             : num [1:121] 482269 190464 78997 6472 141475 ...\n\nsummary(patients)\n\n   PATIENT            BIRTHDATE            DEATHDATE         \n Length:121         Min.   :1915-06-30   Min.   :1974-12-14  \n Class :character   1st Qu.:1959-04-12   1st Qu.:2004-04-13  \n Mode  :character   Median :1983-05-26   Median :2010-05-15  \n                    Mean   :1979-08-14   Mean   :2008-12-31  \n                    3rd Qu.:1999-09-28   3rd Qu.:2019-12-16  \n                    Max.   :2022-08-22   Max.   :2023-10-05  \n                                         NA's   :100         \n     SSN              DRIVERS            PASSPORT            PREFIX         \n Length:121         Length:121         Length:121         Length:121        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n     NAME              SUFFIX             MAIDEN            MARITAL         \n Length:121         Length:121         Length:121         Length:121        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n     RACE            ETHNICITY            GENDER           BIRTHPLACE       \n Length:121         Length:121         Length:121         Length:121        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   ADDRESS              CITY              STATE              COUNTY         \n Length:121         Length:121         Length:121         Length:121        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n      FIPS           ZIP                 LAT             LON        \n Min.   :25001   Length:121         Min.   :41.56   Min.   :-73.26  \n 1st Qu.:25014   Class :character   1st Qu.:42.15   1st Qu.:-71.51  \n Median :25017   Mode  :character   Median :42.28   Median :-71.13  \n Mean   :25018                      Mean   :42.24   Mean   :-71.27  \n 3rd Qu.:25025                      3rd Qu.:42.40   3rd Qu.:-71.01  \n Max.   :25027                      Max.   :42.77   Max.   :-70.12  \n NA's   :19                                                         \n HEALTHCARE_EXPENSES HEALTHCARE_COVERAGE     INCOME      \n Min.   :    500     Min.   :      0     Min.   :  3365  \n 1st Qu.:  21279     1st Qu.:  23029     1st Qu.: 32577  \n Median :  65580     Median : 165466     Median : 71082  \n Mean   : 166163     Mean   : 409297     Mean   :134519  \n 3rd Qu.: 221068     3rd Qu.: 679128     3rd Qu.:135462  \n Max.   :1547205     Max.   :1955909     Max.   :931642  \n                                                         \n\n\nI am only keeping the demographic data below (gender, race, marital status, income, and age) which will be used as an attribute for each patient.\n\n#Create AGE from BIRTHDATE\npatients &lt;- patients %&gt;%\n  mutate(\n    BIRTHDATE = as.Date(BIRTHDATE),  # Ensure 'dob' is in Date format\n    AGE = interval(BIRTHDATE, today()) / years(1)  # Calculate age in years\n  ) %&gt;%\n  mutate(\n    AGE = floor(AGE)  # complete years only, removing decimal\n  )\n# Only keep patient name and demographics. This will be utilized as the attribute data for analysis.\npat_attr &lt;- patients%&gt;% \n  select(NAME, GENDER, RACE, MARITAL, INCOME, AGE)\nhead(pat_attr)\n\n# A tibble: 6 × 6\n  NAME                       GENDER RACE  MARITAL INCOME   AGE\n  &lt;chr&gt;                      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1 Avril120 Olson653          F      white &lt;NA&gt;    482269    36\n2 Norma469 Langosh790        F      white &lt;NA&gt;    190464    25\n3 Peggie783 Eichmann909      F      white &lt;NA&gt;     78997    21\n4 Ashlie138 Williamson769    F      white M         6472    37\n5 Christiane220 Ankunding277 F      white &lt;NA&gt;    141475    24\n6 Dione665 O'Kon634          F      white M       482269    36\n\n\n\npat_race &lt;- ggplot(pat_attr,aes(RACE)) + geom_bar()\npat_gender &lt;- ggplot(pat_attr,aes(GENDER)) + geom_bar()\n\npat_race + pat_gender + plot_annotation(title = \"Patient Race and Gender Breakdown\")\n\n\n\nggplot(pat_attr,aes(MARITAL)) + geom_bar() + labs(title = \"Patient Marital Status\")\n\n\n\npat_income &lt;- ggplot(pat_attr, aes(x = 1, y = INCOME)) +\n    geom_jitter(width = 0.2) +\n    labs(x = NULL, y = \"Income\") +\n    theme_minimal() + labs(title = \"Patient Income\")\n\nsummary(pat_attr$INCOME)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3365   32577   71082  134519  135462  931642 \n\npat_age &lt;- ggplot(pat_attr,aes(AGE)) + geom_bar()\n\nKey for marital status: M (married), S (single), D (divorced), W (widowed) (There is missing data here)"
  },
  {
    "objectID": "posts/Post_One/post_1.html#provider-data",
    "href": "posts/Post_One/post_1.html#provider-data",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "PROVIDER DATA",
    "text": "PROVIDER DATA\nThe following table is the data available in the provider dataset.\n\nproviders &lt;- read_csv(\"synthea_sample_data_csv_latest/providers.csv\") %&gt;%\n    rename(PROVIDER = Id)\n\nRows: 279 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Id, ORGANIZATION, NAME, GENDER, SPECIALITY, ADDRESS, CITY, STATE, ZIP\ndbl (4): LAT, LON, ENCOUNTERS, PROCEDURES\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(providers)\n\n# A tibble: 6 × 13\n  PROVIDER  ORGANIZATION NAME  GENDER SPECIALITY ADDRESS CITY  STATE ZIP     LAT\n  &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 586477e1… 74ab949d-17… Ted9… M      GENERAL P… 881 Ma… Fitc… MA    01420  42.6\n2 4b284e0c… e09d4c49-c2… Barb… F      GENERAL P… 60 HOS… LEOM… MA    0145…  42.5\n3 88668b3f… e76b5eb0-0c… Gise… F      GENERAL P… 1400 V… West… MA    02132  42.3\n4 21a7f0e9… 77645e49-3f… Vell… F      GENERAL P… 363 HI… FALL… MA    0272…  41.7\n5 49671606… aa682136-a4… Prec… F      GENERAL P… 501 CO… NORW… MA    0206…  42.2\n6 bcc6badc… d2284f74-b6… Fern… F      GENERAL P… 331 E … E FA… MA    0253…  41.6\n# ℹ 3 more variables: LON &lt;dbl&gt;, ENCOUNTERS &lt;dbl&gt;, PROCEDURES &lt;dbl&gt;\n\n\nI am only keeping the demographic data below (gender) which will be used as an attribute for each provider.\n\n# Only keep provider name and demographics. This will be utilized as the attribute data for analysis. The only demographic data available for Providers is gender.\npro_attr &lt;- providers %&gt;%\n  select(NAME, GENDER)\nhead(pro_attr)\n\n# A tibble: 6 × 2\n  NAME                      GENDER\n  &lt;chr&gt;                     &lt;chr&gt; \n1 Ted955 Reilly981          M     \n2 Barbara209 Maldonado119   F     \n3 Gisele901 Lehner980       F     \n4 Vella930 Ankunding277     F     \n5 Precious140 Runolfsson901 F     \n6 Fernande593 Mosciski958   F     \n\n\n\nggplot(pro_attr, aes(GENDER)) +geom_bar() + labs(title = \"Provider Gender Breakdown\")"
  },
  {
    "objectID": "posts/Post_One/post_1.html#patient-and-provider",
    "href": "posts/Post_One/post_1.html#patient-and-provider",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "PATIENT AND PROVIDER",
    "text": "PATIENT AND PROVIDER\n\n#combine pro and pat attr\npat_attr$type &lt;- \"PATIENT\"\npro_attr$type &lt;- \"PROVIDER\"\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n\n# A tibble: 6 × 7\n  NAME                       GENDER RACE  MARITAL INCOME   AGE type   \n  &lt;chr&gt;                      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1 Avril120 Olson653          F      white &lt;NA&gt;    482269    36 PATIENT\n2 Norma469 Langosh790        F      white &lt;NA&gt;    190464    25 PATIENT\n3 Peggie783 Eichmann909      F      white &lt;NA&gt;     78997    21 PATIENT\n4 Ashlie138 Williamson769    F      white M         6472    37 PATIENT\n5 Christiane220 Ankunding277 F      white &lt;NA&gt;    141475    24 PATIENT\n6 Dione665 O'Kon634          F      white M       482269    36 PATIENT"
  },
  {
    "objectID": "posts/Post_One/post_1.html#encounter-data",
    "href": "posts/Post_One/post_1.html#encounter-data",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "ENCOUNTER DATA",
    "text": "ENCOUNTER DATA\n\nencounters &lt;- read_csv(\"synthea_sample_data_csv_latest/encounters.csv\")\n\nRows: 11987 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): Id, PATIENT, ORGANIZATION, PROVIDER, PAYER, ENCOUNTERCLASS, DESCRI...\ndbl  (5): CODE, BASE_ENCOUNTER_COST, TOTAL_CLAIM_COST, PAYER_COVERAGE, REASO...\ndttm (2): START, STOP\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(encounters)\n\n# A tibble: 6 × 15\n  Id       START               STOP                PATIENT ORGANIZATION PROVIDER\n  &lt;chr&gt;    &lt;dttm&gt;              &lt;dttm&gt;              &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;   \n1 4afc6ab… 2013-11-02 00:34:37 2013-11-02 00:49:37 270357… 51370692-62… c0cc76b…\n2 c502ee2… 2014-11-01 12:48:31 2014-11-01 13:03:31 35589a… 57e4e5fa-d6… 896d5c7…\n3 6f3ad10… 1995-02-03 08:38:10 1995-02-03 08:53:10 b573d4… 67d2f85b-dd… 4087a49…\n4 0d9b475… 2015-02-25 16:48:31 2015-02-25 17:17:55 35589a… ca62a361-9c… 370ff56…\n5 ec0d6c6… 2013-11-09 00:34:37 2013-11-09 00:49:37 270357… 51370692-62… c0cc76b…\n6 ec41ff9… 2014-03-16 11:34:37 2014-03-16 11:49:37 270357… 51370692-62… c0cc76b…\n# ℹ 9 more variables: PAYER &lt;chr&gt;, ENCOUNTERCLASS &lt;chr&gt;, CODE &lt;dbl&gt;,\n#   DESCRIPTION &lt;chr&gt;, BASE_ENCOUNTER_COST &lt;dbl&gt;, TOTAL_CLAIM_COST &lt;dbl&gt;,\n#   PAYER_COVERAGE &lt;dbl&gt;, REASONCODE &lt;dbl&gt;, REASONDESCRIPTION &lt;chr&gt;\n\n\n\nggplot(encounters, aes(ENCOUNTERCLASS)) + geom_bar() + coord_flip()+ labs(title = \"Type of Visit\")\n\n\n\nggplot(data = encounters %&gt;% \n         count(DESCRIPTION) %&gt;% \n         filter(n &gt; 50),  # Filter for counts higher than 10\n       aes(x = DESCRIPTION, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Visit Description\", \"\\n*filtered to show &gt;50 visits\"))\n\n\n\nggplot(data = encounters %&gt;% \n         count(REASONDESCRIPTION) %&gt;% \n         filter(n &gt; 50),  # Filter for counts higher than 10\n       aes(x = REASONDESCRIPTION, y = n)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + labs(title = paste(\"Reason Patient Visited Provider\", \"\\n*filtered to show &gt;50 visits\"))\n\n\n\n\nI am noticing a lot of kidney related diseases in this dataset"
  },
  {
    "objectID": "posts/Post_One/post_1.html#edgelist",
    "href": "posts/Post_One/post_1.html#edgelist",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "EDGELIST",
    "text": "EDGELIST\n\n# Create Edgelist\nencounters_el &lt;- encounter_attributes %&gt;%\n  group_by(PATIENT, PROVIDER) %&gt;%\n  summarize(COUNT = n()) \n\n`summarise()` has grouped output by 'PATIENT'. You can override using the\n`.groups` argument.\n\nhead(encounters_el)\n\n# A tibble: 6 × 3\n# Groups:   PATIENT [2]\n  PATIENT               PROVIDER              COUNT\n  &lt;chr&gt;                 &lt;chr&gt;                 &lt;int&gt;\n1 Akiko835 Larkin917    Emilio417 Barton704      18\n2 Akiko835 Larkin917    Frederic454 Larkin917     7\n3 Akiko835 Larkin917    Jim478 Goyette777         2\n4 Akiko835 Larkin917    Kirby843 McKenzie376     19\n5 Akiko835 Larkin917    Ted955 Reilly981          1\n6 Anneliese170 Berge125 Althea11 Ankunding277     6\n\ndim(encounters_el)\n\n[1] 437   3"
  },
  {
    "objectID": "posts/Post_One/post_1.html#combined-attribute-list",
    "href": "posts/Post_One/post_1.html#combined-attribute-list",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "COMBINED ATTRIBUTE LIST",
    "text": "COMBINED ATTRIBUTE LIST\n\n#combine pro and pat attr\npat_attr$type &lt;- \"PATIENT\"\npro_attr$type &lt;- \"PROVIDER\"\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n\n# A tibble: 6 × 7\n  NAME                       GENDER RACE  MARITAL INCOME   AGE type   \n  &lt;chr&gt;                      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1 Avril120 Olson653          F      white &lt;NA&gt;    482269    36 PATIENT\n2 Norma469 Langosh790        F      white &lt;NA&gt;    190464    25 PATIENT\n3 Peggie783 Eichmann909      F      white &lt;NA&gt;     78997    21 PATIENT\n4 Ashlie138 Williamson769    F      white M         6472    37 PATIENT\n5 Christiane220 Ankunding277 F      white &lt;NA&gt;    141475    24 PATIENT\n6 Dione665 O'Kon634          F      white M       482269    36 PATIENT\n\n\n\n#create combined attribute list\nattribute_list &lt;- do.call(list, both_attr)"
  },
  {
    "objectID": "posts/Post_One/post_1.html#network",
    "href": "posts/Post_One/post_1.html#network",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "NETWORK",
    "text": "NETWORK\n\n# create bipartite network with attributes\nencounters.st.3 &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\nencounters.st.3\n\n Network attributes:\n  vertices = 374 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = 121 \n  total edges= 437 \n    missing edges= 0 \n    non-missing edges= 437 \n\n Vertex attribute names: \n    AGE GENDER INCOME MARITAL NAME RACE type vertex.names \n\n Edge attribute names: \n    COUNT"
  },
  {
    "objectID": "posts/Post_One/post_1.html#combine-patient-provider-and-encounter-data",
    "href": "posts/Post_One/post_1.html#combine-patient-provider-and-encounter-data",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "Combine Patient, Provider, and Encounter Data",
    "text": "Combine Patient, Provider, and Encounter Data\nI am taking this step here so that I have a master dataset (encounters_attributes) and so that I can create an edgelist more easily.\n\n# Perform a left join to merge encounters with provider_attributes based on PROVIDER\nencounters_cleaning &lt;- left_join(encounters, providers, by = \"PROVIDER\")\n# Replace the PROVIDER column with the corresponding names from the NAME column\nencounters_cleaning$PROVIDER &lt;- encounters_cleaning$NAME\n# Remove the NAME column if no longer needed\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  select(-NAME)\n#Repeat for Provider\nencounters_cleaning &lt;- left_join(encounters_cleaning, patients, by = \"PATIENT\")\nencounters_cleaning$PATIENT &lt;- encounters_cleaning$NAME\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  select(-NAME) \n#Clearly identify the Encounter ID\nencounters_cleaning &lt;- encounters_cleaning %&gt;%\n  rename(ENCOUNTER_ID = Id)\nencounter_attributes &lt;- encounters_cleaning %&gt;%\n  select(ENCOUNTER_ID, PATIENT, PROVIDER, GENDER.x, GENDER.y, RACE, MARITAL, ETHNICITY, INCOME)\n# View the updated dataframe\nhead(encounter_attributes)\n\n# A tibble: 6 × 9\n  ENCOUNTER_ID PATIENT PROVIDER GENDER.x GENDER.y RACE  MARITAL ETHNICITY INCOME\n  &lt;chr&gt;        &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;\n1 4afc6abc-ab… Norma4… Jeromy1… M        F        white &lt;NA&gt;    nonhispa… 190464\n2 c502ee2d-1d… Peggie… Abdul21… M        F        white &lt;NA&gt;    nonhispa…  78997\n3 6f3ad103-a2… Avril1… Marshal… M        F        white &lt;NA&gt;    nonhispa… 482269\n4 0d9b475b-5e… Peggie… Benedic… M        F        white &lt;NA&gt;    nonhispa…  78997\n5 ec0d6c63-84… Norma4… Jeromy1… M        F        white &lt;NA&gt;    nonhispa… 190464\n6 ec41ff94-ed… Norma4… Jeromy1… M        F        white &lt;NA&gt;    nonhispa… 190464"
  },
  {
    "objectID": "posts/Post_Two/post_2.html",
    "href": "posts/Post_Two/post_2.html",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(ggplot2)\nlibrary(patchwork)\nThis post will explore the Synthetic Mass network data in more detail."
  },
  {
    "objectID": "posts/Post_Two/post_2.html#graphs-with-sna",
    "href": "posts/Post_Two/post_2.html#graphs-with-sna",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "Graphs with sna",
    "text": "Graphs with sna\n\n# load the sna library to get the gplot() function\nlibrary( sna )\n\n# set the seed to reproduce the plot layout\nset.seed( 507 )\n\n# execute the plot\ngplot(\n  encounters.st.3,             \n  gmode = \"twomode\",                     # indicate it is two modes\n  usearrows = FALSE,                     # turn off the arrowheads\n  vertex.cex=2,                          # size the nodes     \n  label.cex=1.2,                         # size the labels\n  main=\"Bipartite Graph of Encounters using SNA\"                 # add a title\n)\n\n\n\n\n\nincidence_graph &lt;- graph_from_biadjacency_matrix(encounters.st.3)\n\n\ndetach(\"package:sna\")"
  },
  {
    "objectID": "posts/Post_Two/post_2.html#graphs-with-igraph",
    "href": "posts/Post_Two/post_2.html#graphs-with-igraph",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "Graphs with igraph",
    "text": "Graphs with igraph\n\nvertex_colors &lt;- ifelse(attribute_list$GENDER == \"F\", \"blue\", \"magenta\")\nV(incidence_graph)$shape &lt;- ifelse(V(incidence_graph)$type, \"square\", \"circle\")\n\n# Define edge colors based on COUNT attribute\nedge_colors &lt;- ifelse(encounters_el$COUNT &lt; 5, \"yellow\", \n                      ifelse(encounters_el$COUNT &gt;= 5 & encounters_el$COUNT &lt;= 19, \"lightblue\", \"red\"))\n\n# Check if the length of edge_colors matches the number of edges\nif (length(edge_colors) == ecount(incidence_graph)) {\n  # Set edge attributes based on counts\n  E(incidence_graph)$color &lt;- edge_colors\n} else {\n  print(\"Length of edge_colors does not match the number of edges in the graph.\")\n}\n\nE(incidence_graph)$color &lt;- edge_colors\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph,\n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 3, \n     vertex.color = vertex_colors,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Patient Provider Incidence Graph\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\",\n       legend = c(\"1-4\", \"5-19\", \"20+\"),  # You can customize these labels\n       col = c(\"yellow\", \"lightblue\", \"red\"),  # Line colors corresponding to edge colors\n       lwd = 2,                            # Line width\n       title = \"Edges: # of Visits\")              # Legend title\n\n\n\n\n\n#Calculating centrality\ntypes &lt;- V(incidence_graph)$type\ndeg&lt;- degree(incidence_graph)\n\nbet &lt;- betweenness(incidence_graph)\nclos &lt;- closeness(incidence_graph)\neig &lt;- eigen_centrality(incidence_graph)$vector\nconst &lt;- constraint(incidence_graph)\ncent_df &lt;- data.frame(types, deg, bet, clos, eig, const)\nhead(cent_df[order(cent_df$deg, decreasing = TRUE),], 10)\n\n                           types deg        bet         clos        eig\nTed955 Reilly981            TRUE  28 27013.6588 0.0012239902 1.00000000\nTimmy68 Nolan344           FALSE   7   885.6299 0.0007002801 0.02480592\nTrula820 Johns824          FALSE   7  6649.9824 0.0010000000 0.20635920\nChun678 Hirthe744          FALSE   6  1404.0134 0.0009578544 0.24432907\nCorey514 Gaylord332        FALSE   6  2402.5000 0.0009578544 0.19651997\nDennis979 Dickens475       FALSE   6  1785.4929 0.0009652510 0.22004854\nEnola75 Tromp100           FALSE   6   758.6271 0.0009560229 0.29716393\nJacqualine965 Aufderhar910 FALSE   6  3265.0333 0.0010080645 0.22137300\nJed345 Muller251           FALSE   6  3019.5333 0.0010080645 0.22693121\nMamie949 Leannon79         FALSE   6   799.1374 0.0009560229 0.28361363\n                                const\nTed955 Reilly981           0.03571429\nTimmy68 Nolan344           0.14285714\nTrula820 Johns824          0.14285714\nChun678 Hirthe744          0.16666667\nCorey514 Gaylord332        0.16666667\nDennis979 Dickens475       0.16666667\nEnola75 Tromp100           0.16666667\nJacqualine965 Aufderhar910 0.16666667\nJed345 Muller251           0.16666667\nMamie949 Leannon79         0.16666667\n\n\n\nV(incidence_graph)$size &lt;- degree(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Degree Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Degree\")\n\n\n\n\nHere we can see there is one Provider that sees the most patients, with degree centrality = 28. The next largest degree centrality are in the 5 to 7 range and the majority of those nodes are patients.\n\nV(incidence_graph)$size &lt;- closeness(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Closeness Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Closeness\")\n\n\n\n\nHere we see two of the dyads on the outer right side of this incidence graph have the largest closeness score. This is because their network is complete (they are both connected to one another)."
  },
  {
    "objectID": "posts/Post_Three/post_3.html",
    "href": "posts/Post_Three/post_3.html",
    "title": "The Patient Provider Relationship, A Synthetic Social Network",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\n\n\nlibrary(ggplot2)\nlibrary(patchwork)\n\nThis post will explore the Synthetic Mass network data in more detail.\n\nRead in Data\n\npat_attr &lt;- read_csv(\"post_one_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr &lt;- read_csv(\"post_one_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning &lt;- read_csv(\"post_one_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes &lt;- read_csv(\"post_one_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  &lt;- read_csv(\"post_one_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 &lt;- read_csv(\"post_one_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list &lt;- read.csv(\"post_one_data/attribute_list.csv\")\n\n\n\nPrep Data for Analysis\n\n#combine pro and pat attr\npat_attr$type &lt;- \"PATIENT\"\npro_attr$type &lt;- \"PROVIDER\"\nboth_attr &lt;- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n\n# A tibble: 6 × 7\n  NAME                       GENDER RACE  MARITAL INCOME   AGE type   \n  &lt;chr&gt;                      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1 Avril120 Olson653          F      white &lt;NA&gt;    482269    36 PATIENT\n2 Norma469 Langosh790        F      white &lt;NA&gt;    190464    25 PATIENT\n3 Peggie783 Eichmann909      F      white &lt;NA&gt;     78997    21 PATIENT\n4 Ashlie138 Williamson769    F      white M         6472    37 PATIENT\n5 Christiane220 Ankunding277 F      white &lt;NA&gt;    141475    24 PATIENT\n6 Dione665 O'Kon634          F      white M       482269    36 PATIENT\n\n\n\n\nCreate bipartite network with attributes\n\nencounters.stat &lt;- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n\n\n#create igraph\nencounters.ig &lt;- graph_from_biadjacency_matrix(encounters.stat)\n\n\nencounters.stat2 &lt;- asNetwork(encounters.ig)\n\n\n#encounters.se &lt;- equiv.clust(encounters.stat,  equiv.fun = \"sedist\", method = \"euclidean\", mode = \"graph\", cluster.method = \"complete\")\n#Error:  This function is suited for one-mode networks only\n\n\nlibrary(dBlockmodeling)\n#blk&lt;-tmklm(encounters.stat, RC=8, CC=10, TLIMIT = 6)\n\n\nprojected_graph &lt;- bipartite_projection(encounters.ig)\nadj_matrix1 &lt;- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\nproj1.stat &lt;- asNetwork(projected_graph$proj1)\n\nproj1.se &lt;- equiv.clust(adj_matrix1,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\nnames(proj1.se)\n\n[1] \"cluster\"        \"metric\"         \"equiv.fun\"      \"cluster.method\"\n[5] \"glabels\"        \"plabels\"       \n\nplot(proj1.se, main = \"Proj1\")\nrect.hclust(proj1.se$cluster, k = 6)\n\n\n\nblk_model.proj1.org &lt;- blockmodel(adj_matrix1,\n proj1.se, k = 2)\n\n\n blk_model.proj1.org$block.model\n\n           Block 1    Block 2\nBlock 1 1.00000000 0.02880184\nBlock 2 0.02880184 0.01963534\n\n\n\nplot.block&lt;-function(x=blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(blk_model.proj1.org, main = \"proj1\")\n\n\n\n\n\n# Load the igraph package\nlibrary(igraph)\n\n# Create an igraph object from the blockmodel\ng &lt;- graph_from_adjacency_matrix(projected_graph$proj1, mode = \"directed\", weighted = FALSE)\n\nWarning: The `adjmatrix` argument of `graph_from_adjacency_matrix()` must be a matrix as\nof igraph 1.6.0.\n\n# Plot the graph without labels\nplot(g, layout = layout.fruchterman.reingold, vertex.label = NA, vertex.size = 100, edge.width = 1)\n\n\n\n\n\nblks &lt;- blockmodeling::optRandomParC(adj_matrix1,\n                                     k=6,\n                                     rep=10,\n                                     approaches=\"ss\",\n                                     blocks=\"com\")\n\n\n\nStarting optimization of the partiton 1 of 10 partitions.\nStarting partition: 1 1 1 1 1 1 1 1 1 1 1 1 1 4 1 1 1 1 1 1 1 1 1 6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 2 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \nFinal error: 275.4492 \nFinal partition:    4 5 2 5 2 3 3 1 5 1 5 1 5 3 5 2 5 5 5 5 5 2 5 4 1 2 1 2 4 3 5 5 5 5 2 2 5 5 5 1 5 4 5 5 5 4 5 4 5 2 4 2 5 2 5 5 5 5 4 5 1 5 5 4 4 2 5 5 5 5 2 5 5 5 5 5 5 5 5 3 1 5 5 5 2 5 5 1 5 2 5 1 5 5 5 5 5 5 1 1 5 1 1 5 1 4 5 1 1 3 5 6 5 4 5 5 5 5 5 5 5 \n\n\nStarting optimization of the partiton 2 of 10 partitions.\nStarting partition: 4 3 6 6 6 1 5 6 3 5 6 5 1 5 3 6 4 4 4 1 4 2 6 1 5 3 4 2 1 3 4 4 6 3 5 3 5 1 2 4 4 5 6 1 3 3 3 4 2 1 5 2 6 4 3 2 3 1 2 4 5 1 4 5 2 2 3 4 1 1 3 4 1 1 6 5 5 5 2 6 5 3 4 6 2 1 4 4 1 5 4 6 5 3 6 5 2 5 2 5 6 2 6 2 2 1 3 3 2 2 3 2 2 1 6 3 2 6 1 6 1 \nFinal error: 281.4378 \nFinal partition:    2 4 2 4 2 4 4 1 4 1 4 1 4 4 4 5 4 4 4 4 4 6 4 6 1 5 4 5 2 4 4 4 4 4 5 2 4 4 4 1 1 6 4 4 4 6 4 6 4 5 6 5 4 5 4 4 4 3 5 4 1 1 4 6 6 2 4 3 4 4 6 4 4 4 4 4 4 4 4 3 4 4 4 4 2 4 4 1 4 5 4 1 4 4 4 4 4 4 1 1 4 1 1 4 1 5 4 1 4 4 3 6 4 6 4 1 4 4 4 4 4 \n\n\nStarting optimization of the partiton 3 of 10 partitions.\nStarting partition: 4 1 1 5 5 6 6 6 2 1 2 3 5 4 2 4 6 1 6 2 4 1 2 1 6 1 5 6 3 4 2 6 3 6 2 4 3 5 1 1 5 4 3 6 4 1 6 6 4 5 2 4 5 3 1 2 6 1 6 1 2 4 6 1 2 4 5 5 3 4 6 3 4 3 3 5 4 2 1 5 4 3 1 3 5 6 2 4 5 5 2 3 3 5 2 1 4 1 6 6 4 3 2 5 1 2 3 5 5 3 2 2 3 3 5 4 6 2 3 3 1 \nFinal error: 278.1989 \nFinal partition:    4 3 4 3 4 3 3 2 3 2 3 3 3 3 3 4 6 3 3 3 3 5 3 4 2 4 2 4 4 3 6 3 3 6 4 5 6 3 3 6 2 4 3 3 3 4 3 4 3 4 4 4 3 4 6 3 3 3 5 3 1 2 3 4 4 5 3 3 3 3 5 3 3 3 3 3 3 3 3 3 2 3 3 3 5 3 3 6 3 4 6 2 3 3 3 3 3 3 6 3 3 2 2 3 2 5 3 3 1 3 3 4 3 4 3 2 3 3 3 3 3 \n\n\nStarting optimization of the partiton 4 of 10 partitions.\nStarting partition: 6 5 2 3 2 4 3 5 1 1 2 6 1 4 1 3 5 2 4 6 3 3 2 4 5 3 2 3 3 4 5 2 1 4 5 1 3 5 1 5 4 1 5 4 2 2 3 4 3 4 3 3 6 6 2 4 2 5 6 1 3 4 1 6 4 4 6 4 2 5 1 3 6 2 1 2 2 6 5 6 6 5 3 1 6 1 1 6 1 4 3 2 1 5 1 4 2 5 3 5 4 6 2 3 2 6 3 5 1 1 4 6 2 6 5 5 4 6 5 2 6 \nFinal error: 283.2838 \nFinal partition:    6 5 6 5 6 1 1 2 5 4 1 1 5 1 1 3 1 1 5 5 5 3 1 6 4 3 4 6 6 1 1 5 5 1 6 3 1 1 1 1 4 6 1 1 5 6 5 6 5 6 6 6 5 6 1 5 5 1 3 5 2 4 5 6 6 3 5 1 5 4 3 1 5 1 5 5 1 5 5 1 4 1 5 5 3 5 5 1 1 3 1 4 5 5 5 5 5 1 1 5 5 4 2 5 2 3 5 5 2 1 1 6 1 6 5 4 5 5 5 5 5 \n\n\nStarting optimization of the partiton 5 of 10 partitions.\nStarting partition: 1 5 2 6 4 4 3 2 1 3 4 1 3 4 1 2 5 6 6 2 2 1 6 6 4 4 1 5 3 6 1 3 3 4 5 4 2 6 6 6 3 1 3 6 1 3 5 5 1 3 2 5 2 1 6 5 1 4 6 5 1 1 1 6 5 4 2 6 4 5 6 4 4 3 6 3 1 3 1 5 6 5 1 4 3 2 4 1 3 2 3 2 1 1 1 5 6 6 2 4 6 1 3 6 4 1 3 5 1 1 4 5 3 6 5 3 3 4 5 2 2 \nFinal error: 280.2381 \nFinal partition:    5 4 2 4 2 3 3 3 4 3 4 3 4 3 3 2 3 3 4 1 4 5 3 2 3 2 1 2 2 3 3 4 3 3 2 5 3 4 4 3 4 2 3 4 4 2 1 2 4 2 2 2 4 2 3 4 4 4 5 4 6 6 4 2 2 5 4 4 4 4 5 4 4 3 4 1 4 4 4 3 1 4 4 4 5 4 4 3 4 2 3 3 4 4 4 4 4 3 3 3 4 3 3 4 3 5 4 4 6 3 4 2 4 2 4 6 4 4 3 4 4 \n\n\nStarting optimization of the partiton 6 of 10 partitions.\nStarting partition: 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 5 5 5 5 5 5 5 5 6 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 1 5 5 5 5 5 5 5 5 5 5 5 \nFinal error: 272.987 \nFinal partition:    2 3 4 3 2 1 1 5 3 3 3 3 3 1 3 4 3 3 3 3 3 2 3 2 3 4 3 2 2 1 3 3 3 3 2 4 3 3 3 5 3 2 3 3 3 2 3 2 3 4 2 4 3 4 3 3 3 3 4 3 5 5 3 2 2 4 3 3 3 3 2 3 3 3 3 3 3 3 3 1 3 3 3 3 4 3 3 5 3 4 3 3 3 3 3 3 3 3 5 5 3 3 5 3 5 4 3 3 5 1 3 6 3 2 3 5 3 3 3 3 3 \n\n\nStarting optimization of the partiton 7 of 10 partitions.\nStarting partition: 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 3 6 6 6 6 4 6 6 6 6 6 6 6 1 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 2 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 \nFinal error: 292.7175 \nFinal partition:    3 2 4 2 4 2 2 6 2 6 2 2 2 2 2 4 2 2 2 2 2 3 2 1 6 4 2 5 3 2 2 2 2 2 4 4 2 2 2 6 6 3 2 2 2 3 2 3 2 5 3 5 2 5 2 2 2 2 5 2 6 6 2 3 3 4 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 6 2 4 2 6 2 2 2 2 2 2 6 6 2 6 6 2 6 5 2 6 6 2 2 1 2 3 2 6 2 2 2 2 2 \n\n\nStarting optimization of the partiton 8 of 10 partitions.\nStarting partition: 4 4 4 6 4 1 4 4 4 5 4 4 4 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \nFinal error: 290.249 \nFinal partition:    5 6 5 6 2 6 6 4 6 6 6 4 6 6 6 3 6 6 6 6 6 2 6 2 6 3 6 2 5 6 6 6 6 6 2 5 6 6 6 4 4 1 6 6 6 1 6 1 6 3 1 3 6 3 6 6 6 6 3 6 4 4 6 1 1 5 6 6 6 6 2 6 6 6 6 6 6 6 6 6 6 6 6 6 5 6 6 4 6 3 6 6 6 6 6 6 6 6 4 4 6 6 4 6 4 3 6 4 6 6 6 2 6 1 6 4 6 6 6 6 6 \n\n\nStarting optimization of the partiton 9 of 10 partitions.\nStarting partition: 1 6 4 3 2 2 3 3 6 5 4 4 3 1 5 1 4 5 5 2 1 5 2 2 3 4 4 6 4 1 6 6 5 4 4 1 5 2 1 6 6 6 6 1 4 2 5 4 3 2 6 1 6 5 4 6 2 3 4 1 3 4 2 4 1 6 6 1 5 4 2 5 6 3 6 6 1 5 6 4 3 1 5 5 5 1 6 5 3 1 6 5 6 1 6 6 5 6 2 4 2 3 3 5 1 2 6 4 4 6 2 6 6 6 1 5 4 6 3 4 4 \nFinal error: 283.7673 \nFinal partition:    2 3 2 3 2 3 3 1 3 1 5 5 6 3 5 2 3 5 3 3 3 2 3 2 1 2 3 2 2 3 3 6 3 5 2 2 3 5 5 1 6 2 5 5 6 2 3 2 6 2 2 2 3 2 5 6 6 3 2 6 4 4 6 2 2 2 6 3 3 6 2 5 6 3 6 3 5 6 6 3 3 6 3 6 2 6 6 5 6 2 5 1 6 6 6 6 6 3 1 1 6 1 1 6 1 2 6 6 4 3 3 2 6 2 3 4 3 6 3 6 3 \n\n\nStarting optimization of the partiton 10 of 10 partitions.\nStarting partition: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 6 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \nFinal error: 282.3776 \nFinal partition:    2 6 2 6 2 6 6 3 6 6 3 3 6 6 3 2 3 3 6 3 6 2 3 2 6 2 6 2 2 6 3 6 6 3 2 5 3 3 3 3 1 2 3 3 6 2 3 2 6 2 2 2 6 2 3 6 6 6 5 6 4 4 6 2 2 5 6 6 6 6 2 3 6 3 6 3 3 6 6 6 6 6 6 6 5 6 6 3 6 2 3 6 6 6 6 6 6 3 3 6 6 6 3 6 3 5 6 6 1 6 6 2 6 2 6 4 6 6 6 6 6 \n\n\nOptimization of all partitions completed\n1 solution(s) with minimal error = 272.987 found. \n\n\n\n# blockmodel with optimized partition\nblk_mod &lt;- blockmodel(adj_matrix1, blks$best$best1$clu,\n                      plabels = rownames(adj_matrix1))\n# print blockmodel object\nblk_mod$block.model\n\n            Block 1    Block 2     Block 3     Block 4     Block 5 Block 6\nBlock 1 0.533333333 0.00000000 0.006578947 0.013888889 0.000000000       1\nBlock 2 0.000000000 1.00000000 0.021929825 1.000000000 0.018181818       1\nBlock 3 0.006578947 0.02192982 0.018947368 0.007675439 0.009569378       0\nBlock 4 0.013888889 1.00000000 0.007675439 1.000000000 0.250000000       1\nBlock 5 0.000000000 0.01818182 0.009569378 0.250000000 0.200000000       0\nBlock 6 1.000000000 1.00000000 0.000000000 1.000000000 0.000000000     NaN\n\n\n\nplot.block(blk_mod, main = \"proj1\",\n           cex.lab = .000001)\n\n\n\n\n\n#assign block membership to vertex attribute\nproj1.stat%v%\"role\"&lt;-blk_mod$block.membership[match(proj1.stat%v%\"vertex.names\",blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(proj1.stat,\n               node.color=\"role\", \n               node.size=sna::degree(proj1.stat, gmode=\"graph\"),\n               node.alpha = .5)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n\n\n\n\n\nCalculating centrality\n\ntypes &lt;- V(encounters.ig)$type\ndeg&lt;- igraph::degree(encounters.ig)\n\nbet &lt;- igraph::betweenness(encounters.ig)\nclos &lt;- igraph::closeness(encounters.ig)\neig &lt;- eigen_centrality(encounters.ig)$vector\nconst &lt;- constraint(encounters.ig)\ncent_df &lt;- data.frame(types, deg, bet, clos, eig, const)\nhead(cent_df[order(cent_df$deg, decreasing = TRUE),], 10)\n\n                           types deg        bet         clos        eig\nTed955 Reilly981            TRUE  28 27013.6588 0.0012239902 1.00000000\nTimmy68 Nolan344           FALSE   7   885.6299 0.0007002801 0.02480592\nTrula820 Johns824          FALSE   7  6649.9824 0.0010000000 0.20635920\nChun678 Hirthe744          FALSE   6  1404.0134 0.0009578544 0.24432907\nCorey514 Gaylord332        FALSE   6  2402.5000 0.0009578544 0.19651997\nDennis979 Dickens475       FALSE   6  1785.4929 0.0009652510 0.22004854\nEnola75 Tromp100           FALSE   6   758.6271 0.0009560229 0.29716393\nJacqualine965 Aufderhar910 FALSE   6  3265.0333 0.0010080645 0.22137300\nJed345 Muller251           FALSE   6  3019.5333 0.0010080645 0.22693121\nMamie949 Leannon79         FALSE   6   799.1374 0.0009560229 0.28361363\n                                const\nTed955 Reilly981           0.03571429\nTimmy68 Nolan344           0.14285714\nTrula820 Johns824          0.14285714\nChun678 Hirthe744          0.16666667\nCorey514 Gaylord332        0.16666667\nDennis979 Dickens475       0.16666667\nEnola75 Tromp100           0.16666667\nJacqualine965 Aufderhar910 0.16666667\nJed345 Muller251           0.16666667\nMamie949 Leannon79         0.16666667\n\n\n\n\nTriad Dyad Census\n\ntriads_incidence&lt;-igraph::triad_census(encounters.ig)\n\nWarning in igraph::triad_census(encounters.ig): At\nvendor/cigraph/src/misc/motifs.c:1140 : Triad census called on an undirected\ngraph. All connections will be treated as mutual.\n\ntriads_incidence\n\n [1] 8487860       0  159964       0       0       0       0       0       0\n[10]       0    1300       0       0       0       0       0\n\nigraph::dyad.census(encounters.ig)\n\nWarning: `dyad.census()` was deprecated in igraph 2.0.0.\nℹ Please use `dyad_census()` instead.\n\n\nWarning: `dyad_census()` requires a directed graph.\n\n\n$mut\n[1] 437\n\n$asym\n[1] 0\n\n$null\n[1] 69314\n\nigraph::transitivity(encounters.ig)\n\n[1] 0\n\nigraph::transitivity(encounters.ig, type = \"global\")\n\n[1] 0\n\nmean_distance(encounters.ig)\n\n[1] 6.166661\n\n\n\n\nComponent Structure and Membership\n\nnames(igraph::components(encounters.ig))\n\n[1] \"membership\" \"csize\"      \"no\"        \n\nigraph::components(encounters.ig)$no # number of components\n\n[1] 22\n\nigraph::components(encounters.ig)$csize #Size of each component\n\n [1] 249   8  18   4   6  10   3   5   3   4   5   9   6   7   2   3   5  10   7\n[20]   3   5   2\n\ndegree.wt=igraph::strength(encounters.ig)"
  }
]