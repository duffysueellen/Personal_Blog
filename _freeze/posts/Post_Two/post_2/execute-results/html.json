{
  "hash": "df4b14524e687c76b1edc7ac3bab3bd8",
  "result": {
    "markdown": "---\ntitle: \"Network Exploration\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-04-21\"\ncategories: [code, analysis]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n:::\n\n\nThis post will explore the Synthetic Mass network data in more detail.\n\n# Read in Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post_one_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post_one_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post_one_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post_one_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post_one_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post_one_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post_one_data/attribute_list.csv\")\n```\n:::\n\n\n# Prep Data for Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#combine pro and pat attr\npat_attr$type <- \"PATIENT\"\npro_attr$type <- \"PROVIDER\"\nboth_attr <- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 7\n  NAME                       GENDER RACE  MARITAL INCOME   AGE type   \n  <chr>                      <chr>  <chr> <chr>    <dbl> <dbl> <chr>  \n1 Avril120 Olson653          F      white <NA>    482269    36 PATIENT\n2 Norma469 Langosh790        F      white <NA>    190464    25 PATIENT\n3 Peggie783 Eichmann909      F      white <NA>     78997    21 PATIENT\n4 Ashlie138 Williamson769    F      white M         6472    37 PATIENT\n5 Christiane220 Ankunding277 F      white <NA>    141475    24 PATIENT\n6 Dione665 O'Kon634          F      white M       482269    36 PATIENT\n```\n:::\n:::\n\n\n# Create bipartite network with attributes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.st.3 <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\nencounters.st.3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 374 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = 121 \n  total edges= 437 \n    missing edges= 0 \n    non-missing edges= 437 \n\n Vertex attribute names: \n    AGE GENDER INCOME MARITAL NAME RACE type vertex.names X \n\n Edge attribute names: \n    COUNT \n```\n:::\n\n```{.r .cell-code}\nhead(network.vertex.names( encounters.st.3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Akiko835 Larkin917\"      \"Anneliese170 Berge125\"  \n[3] \"Annice210 McClure239\"    \"Anthony633 Renner328\"   \n[5] \"Arleen939 Kling921\"      \"Ashlie138 Williamson769\"\n```\n:::\n:::\n\n\n# Graphs\n\n## Graphs with sna\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the sna library to get the gplot() function\nlibrary( sna )\n\n# set the seed to reproduce the plot layout\nset.seed( 507 )\n\n# execute the plot\ngplot(\n  encounters.st.3,             \n  gmode = \"twomode\",                     # indicate it is two modes\n  usearrows = FALSE,                     # turn off the arrowheads\n  vertex.cex=2,                          # size the nodes     \n  label.cex=1.2,                         # size the labels\n  main=\"Bipartite Graph of Encounters using SNA\"                 # add a title\n)\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nincidence_graph <- graph_from_biadjacency_matrix(encounters.st.3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndetach(\"package:sna\")\n```\n:::\n\n\n## Graphs with igraph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvertex_colors <- ifelse(attribute_list$GENDER == \"F\", \"blue\", \"magenta\")\nV(incidence_graph)$shape <- ifelse(V(incidence_graph)$type, \"square\", \"circle\")\n\n# Define edge colors based on COUNT attribute\nedge_colors <- ifelse(encounters_el$COUNT < 5, \"yellow\", \n                      ifelse(encounters_el$COUNT >= 5 & encounters_el$COUNT <= 19, \"lightblue\", \"red\"))\n\n# Check if the length of edge_colors matches the number of edges\nif (length(edge_colors) == ecount(incidence_graph)) {\n  # Set edge attributes based on counts\n  E(incidence_graph)$color <- edge_colors\n} else {\n  print(\"Length of edge_colors does not match the number of edges in the graph.\")\n}\n\nE(incidence_graph)$color <- edge_colors\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph,\n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 3, \n     vertex.color = vertex_colors,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Patient Provider Incidence Graph\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\",\n       legend = c(\"1-4\", \"5-19\", \"20+\"),  # You can customize these labels\n       col = c(\"yellow\", \"lightblue\", \"red\"),  # Line colors corresponding to edge colors\n       lwd = 2,                            # Line width\n       title = \"Edges: # of Visits\")              # Legend title\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Calculating centrality\ntypes <- V(incidence_graph)$type\ndeg<- degree(incidence_graph)\n\nbet <- betweenness(incidence_graph)\nclos <- closeness(incidence_graph)\neig <- eigen_centrality(incidence_graph)$vector\nconst <- constraint(incidence_graph)\ncent_df <- data.frame(types, deg, bet, clos, eig, const)\nhead(cent_df[order(cent_df$deg, decreasing = TRUE),], 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           types deg        bet         clos        eig\nTed955 Reilly981            TRUE  28 27013.6588 0.0012239902 1.00000000\nTimmy68 Nolan344           FALSE   7   885.6299 0.0007002801 0.02480592\nTrula820 Johns824          FALSE   7  6649.9824 0.0010000000 0.20635920\nChun678 Hirthe744          FALSE   6  1404.0134 0.0009578544 0.24432907\nCorey514 Gaylord332        FALSE   6  2402.5000 0.0009578544 0.19651997\nDennis979 Dickens475       FALSE   6  1785.4929 0.0009652510 0.22004854\nEnola75 Tromp100           FALSE   6   758.6271 0.0009560229 0.29716393\nJacqualine965 Aufderhar910 FALSE   6  3265.0333 0.0010080645 0.22137300\nJed345 Muller251           FALSE   6  3019.5333 0.0010080645 0.22693121\nMamie949 Leannon79         FALSE   6   799.1374 0.0009560229 0.28361363\n                                const\nTed955 Reilly981           0.03571429\nTimmy68 Nolan344           0.14285714\nTrula820 Johns824          0.14285714\nChun678 Hirthe744          0.16666667\nCorey514 Gaylord332        0.16666667\nDennis979 Dickens475       0.16666667\nEnola75 Tromp100           0.16666667\nJacqualine965 Aufderhar910 0.16666667\nJed345 Muller251           0.16666667\nMamie949 Leannon79         0.16666667\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nV(incidence_graph)$size <- degree(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Degree Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Degree\")\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nHere we can see there is one Provider that sees the most patients, with degree centrality = 28. The next largest degree centrality are in the 5 to 7 range and the majority of those nodes are patients.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nV(incidence_graph)$size <- closeness(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Closeness Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Closeness\")\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nHere we see two of the dyads on the outer right side of this incidence graph have the largest closeness score. This is because their network is complete (they are both connected to one another).\n\n# Triad Dyad Census\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntriads_incidence<-igraph::triad_census(incidence_graph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in igraph::triad_census(incidence_graph): At\nvendor/cigraph/src/misc/motifs.c:1140 : Triad census called on an undirected\ngraph. All connections will be treated as mutual.\n```\n:::\n\n```{.r .cell-code}\ntriads_incidence\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 8487860       0  159964       0       0       0       0       0       0\n[10]       0    1300       0       0       0       0       0\n```\n:::\n\n```{.r .cell-code}\ndyad.census(incidence_graph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `dyad.census()` was deprecated in igraph 2.0.0.\nâ„¹ Please use `dyad_census()` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `dyad_census()` requires a directed graph.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 437\n\n$asym\n[1] 0\n\n$null\n[1] 69314\n```\n:::\n\n```{.r .cell-code}\ntransitivity(incidence_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\ntransitivity(incidence_graph, type = \"global\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nmean_distance(incidence_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.166661\n```\n:::\n:::\n\n\n# Component Structure and Membership\n\nFirst, let's look at the network component structure. This gives a list with: membership by node, size of each component, and the total number of components.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(components(incidence_graph))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"membership\" \"csize\"      \"no\"        \n```\n:::\n\n```{.r .cell-code}\ncomponents(incidence_graph)$no # number of components\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22\n```\n:::\n\n```{.r .cell-code}\ncomponents(incidence_graph)$csize #Size of each component\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 249   8  18   4   6  10   3   5   3   4   5   9   6   7   2   3   5  10   7\n[20]   3   5   2\n```\n:::\n\n```{.r .cell-code}\ndegree.wt=strength(incidence_graph)\n```\n:::\n\n\n# Graph Cluster\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglou <- graph_from_data_frame(encounters_el[, 1:2], directed = FALSE)\nlou <- cluster_louvain(glou)\nset.seed(1)\nplot(lou, glou, vertex.label = NA, vertex.size=2)\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nset.seed(1)\nplot(lou, glou, vertex.label = NA, vertex.size=5, mark.groups = NULL)\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\nset.seed(1)\nplot(lou, glou, vertex.label = NA, vertex.size = 5, mark.border = NA)\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglou <- graph_from_data_frame(encounters_el[, 1:2], directed = FALSE)\nwalktrap <- cluster_leading_eigen(glou)\nset.seed(1)\nplot(walktrap, glou, vertex.label = NA, vertex.size=2)\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\nset.seed(1)\nplot(walktrap, glou, vertex.label = NA, vertex.size=5, mark.groups = NULL)\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n```{.r .cell-code}\nset.seed(1)\nplot(walktrap, glou, vertex.label = NA, vertex.size = 5, mark.border = NA)\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n:::\n\n\n# Graph Providers and Patients Separately\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojected_graph <- bipartite_projection(incidence_graph)\n#providers\nhead(projected_graph$proj2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6 x 253 sparse Matrix of class \"dgCMatrix\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n  [[ suppressing 253 column names 'Emilio417 Barton704', 'Frederic454 Larkin917', 'Jim478 Goyette777' ... ]]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                               \nEmilio417 Barton704   . 1 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . .\nFrederic454 Larkin917 1 . 1 2 1 . . . . . . . . . . . . . . . . . . . . . . . .\nJim478 Goyette777     1 1 . 1 1 . . . . . . . . . . . . . . . . . . . . . . . .\nKirby843 McKenzie376  1 2 1 . 1 . . . . . . . . . . . . . . . . . . . . . . . .\nTed955 Reilly981      1 1 1 1 . . . . 1 2 . . 1 2 1 1 1 1 . 1 . . . . . 1 . . 3\nAlthea11 Ankunding277 . . . . . . 1 1 . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nEmilio417 Barton704   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFrederic454 Larkin917 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nJim478 Goyette777     . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKirby843 McKenzie376  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nTed955 Reilly981      . . 2 . . . . . . 2 . . . 1 . . . 1 1 . . . . . . . . . .\nAlthea11 Ankunding277 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nEmilio417 Barton704   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFrederic454 Larkin917 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nJim478 Goyette777     . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKirby843 McKenzie376  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nTed955 Reilly981      . . . 1 1 5 1 2 1 . 1 1 1 1 . . 1 2 . 2 1 1 2 2 . 1 . . .\nAlthea11 Ankunding277 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nEmilio417 Barton704   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFrederic454 Larkin917 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nJim478 Goyette777     . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKirby843 McKenzie376  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nTed955 Reilly981      . . 1 . 1 . . . 1 1 4 2 3 . . . . . . 3 . 1 1 1 1 . . . 1\nAlthea11 Ankunding277 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nEmilio417 Barton704   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFrederic454 Larkin917 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nJim478 Goyette777     . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKirby843 McKenzie376  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nTed955 Reilly981      1 1 1 1 1 . . 1 1 1 1 1 1 1 2 2 1 . . . 1 . . . . . . . .\nAlthea11 Ankunding277 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nEmilio417 Barton704   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFrederic454 Larkin917 . . . . 1 . . . . . . . . . . . . . . . . . . . . . . . .\nJim478 Goyette777     . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKirby843 McKenzie376  . . . . 1 . . . . . . . . . . . . . . . . . . . . . . 1 .\nTed955 Reilly981      . . . 1 2 1 1 . . . . . . . . . 1 1 1 1 1 1 . . . . . . 1\nAlthea11 Ankunding277 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nEmilio417 Barton704   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFrederic454 Larkin917 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nJim478 Goyette777     . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKirby843 McKenzie376  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nTed955 Reilly981      . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . .\nAlthea11 Ankunding277 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nEmilio417 Barton704   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFrederic454 Larkin917 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nJim478 Goyette777     . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKirby843 McKenzie376  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nTed955 Reilly981      . . . . 1 . . . . . . . . . . . . . . . . . . . . . . . .\nAlthea11 Ankunding277 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                               \nEmilio417 Barton704   . . . . . . . . . . . . . . . . . . . . .\nFrederic454 Larkin917 . . . . . . . . . . . . . . . 1 . . . . .\nJim478 Goyette777     . . . . . . . . . . . . . . . . . . . . .\nKirby843 McKenzie376  . . . . . . . . . . . . . . . 1 . . . . .\nTed955 Reilly981      1 . . . . . . . 1 1 . . . 1 . . . . . . .\nAlthea11 Ankunding277 . . . . . . . . . . . . . . . . . . . . .\n```\n:::\n\n```{.r .cell-code}\nprovider_communities <- cluster_louvain(projected_graph$proj2)\nprovider_membership <- membership(provider_communities)\nhead(provider_membership,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Emilio417 Barton704 Frederic454 Larkin917     Jim478 Goyette777 \n                    1                     1                     1 \n Kirby843 McKenzie376      Ted955 Reilly981 Althea11 Ankunding277 \n                    1                     1                     2 \n   Jerrell6 Rippin620   Linette249 Runte676     Irene779 Garza151 \n                    2                     2                     3 \nRandy380 Bergstrom287 \n                    3 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#patients\nhead(projected_graph$proj1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6 x 121 sparse Matrix of class \"dgCMatrix\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n  [[ suppressing 121 column names 'Akiko835 Larkin917', 'Anneliese170 Berge125', 'Annice210 McClure239' ... ]]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                               \nAkiko835 Larkin917      . . 1 . 1 . . . . . . . . . . 1 . . . . . 1 . 1 . 1 . 1\nAnneliese170 Berge125   . . . . . . . . . . . . . . . . . . . . 1 . . . . . . .\nAnnice210 McClure239    1 . . . 1 . . . . . . . . . . 1 . . . . . 1 . 1 . 1 . 1\nAnthony633 Renner328    . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nArleen939 Kling921      1 . 1 . . . . . 2 1 . . . . . 1 . . . . . 1 . 1 1 1 . 2\nAshlie138 Williamson769 . . . . . . . . . . . . . . . 1 . . . . . . . . . . . .\n                                                                               \nAkiko835 Larkin917      1 . . . . . 1 1 . . . . . 1 . . . 1 . 1 . 1 1 1 . 1 . .\nAnneliese170 Berge125   . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nAnnice210 McClure239    1 . . . . . 1 1 . . . 1 . 1 . . . 1 . 1 . 2 1 1 . 1 . .\nAnthony633 Renner328    . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nArleen939 Kling921      1 . . . . . 1 1 . . . . . 1 . . . 1 . 1 . 1 1 1 . 1 . .\nAshlie138 Williamson769 . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nAkiko835 Larkin917      . . 1 . . . . 1 1 1 . . . 1 1 . . . . . . . . . . . . .\nAnneliese170 Berge125   . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nAnnice210 McClure239    . . 1 . . . . 1 1 1 . . . . 1 . . . . . . . . . . . . .\nAnthony633 Renner328    . . . . . . . . . . . . 1 . . . . . . . . . . . . . . .\nArleen939 Kling921      . . 1 . . . . 1 1 1 . . . . 1 . . . . . . . . . . . . .\nAshlie138 Williamson769 . . . . . . . . . . . . . . . . . . . . . . . 1 . . . .\n                                                                               \nAkiko835 Larkin917      1 . . . . 1 . . . . . . . . . . . . . . . 1 . . . . . 1\nAnneliese170 Berge125   . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nAnnice210 McClure239    1 . . . . 1 . . . . . . . . . 1 . . . . . 1 . . . . . 1\nAnthony633 Renner328    . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nArleen939 Kling921      1 . . . . 1 . . . . . . . . . . . . . . . 1 . . . . . 1\nAshlie138 Williamson769 . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1\n                                         \nAkiko835 Larkin917      . 1 . 2 . . . . .\nAnneliese170 Berge125   . . . . . . . . .\nAnnice210 McClure239    . 1 . . . . . . .\nAnthony633 Renner328    . 1 . . . . . . .\nArleen939 Kling921      . 1 . . 2 . . . .\nAshlie138 Williamson769 . . . . . . . . .\n```\n:::\n\n```{.r .cell-code}\npatient_communities <- cluster_louvain(projected_graph$proj1)\npatient_membership <- membership(patient_communities)\nhead(patient_membership, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Akiko835 Larkin917   Anneliese170 Berge125    Annice210 McClure239 \n                      1                       2                       3 \n   Anthony633 Renner328      Arleen939 Kling921 Ashlie138 Williamson769 \n                      1                       4                       5 \n      Avril120 Olson653       Basil991 Hilll811    Benjamin360 Hintz995 \n                      5                       6                       4 \n Brendan864 MacGyver246 \n                      4 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(projected_graph$proj1, vertex.color = membership(patient_communities),\n     vertex.label = NA, edge.arrow.size = 0.5)\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(projected_graph$proj2, vertex.color = membership(provider_communities),\n     vertex.label = NA, edge.arrow.size = 0.5)\n```\n\n::: {.cell-output-display}\n![](post_2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "post_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}