{
  "hash": "36fde181b4fbc75e231c98d9729681f3",
  "result": {
    "markdown": "---\ntitle: \"Network Block Modeling - Geographical Comparisson\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-04-26\"\ncategories: [code, analysis, block_model]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(tigris)\nlibrary(stplanr)\n```\n:::\n\n\nThis post will explore the Synthetic Mass network data in more detail.\n\n# Read in Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post1_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post1_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post1_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned <- read_csv(\"post1_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post1_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post1_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post1_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post1_data/attribute_list.csv\")\npat_blks6 <- readRDS(\"pat_blks6_results.rds\")\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n\n# Create bipartite network with attributes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#create igraph\nencounters.ig <- graph_from_biadjacency_matrix(encounters.stat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat2 <- asNetwork(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprojected_graph <- bipartite_projection(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(encounters_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ENCOUNTER_ID\"        \"START\"               \"STOP\"               \n [4] \"PATIENT\"             \"ORGANIZATION.x\"      \"PROVIDER\"           \n [7] \"PAYER\"               \"ENCOUNTERCLASS\"      \"CODE\"               \n[10] \"DESCRIPTION\"         \"BASE_ENCOUNTER_COST\" \"TOTAL_CLAIM_COST\"   \n[13] \"PAYER_COVERAGE\"      \"REASONCODE\"          \"REASONDESCRIPTION\"  \n[16] \"ORGANIZATION.y\"      \"GENDER.x\"            \"SPECIALITY\"         \n[19] \"ADDRESS.x\"           \"CITY.x\"              \"STATE.x\"            \n[22] \"ZIP.x\"               \"LAT.x\"               \"LON.x\"              \n[25] \"ENCOUNTERS\"          \"PROCEDURES\"          \"BIRTHDATE\"          \n[28] \"DEATHDATE\"           \"SSN\"                 \"DRIVERS\"            \n[31] \"PASSPORT\"            \"PREFIX\"              \"SUFFIX\"             \n[34] \"MAIDEN\"              \"MARITAL\"             \"RACE\"               \n[37] \"ETHNICITY\"           \"GENDER.y\"            \"BIRTHPLACE\"         \n[40] \"ADDRESS.y\"           \"CITY.y\"              \"STATE.y\"            \n[43] \"COUNTY\"              \"FIPS\"                \"ZIP.y\"              \n[46] \"LAT.y\"               \"LON.y\"               \"HEALTHCARE_EXPENSES\"\n[49] \"HEALTHCARE_COVERAGE\" \"INCOME\"              \"AGE\"                \n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## PATIENT\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatient_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\npatient.stat <- asNetwork(projected_graph$proj1)\n\npatient.se <- equiv.clust(patient_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat_blk_model.patient.org <- blockmodel(patient_matrix,\n patient.se, k = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.block<-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(pat_blk_model.patient.org, main = \"patient\")\n```\n\n::: {.cell-output-display}\n![](post_6_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat_blks6 <- readRDS(\"pat_blks6_results.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\npat_blk_mod <- blockmodel(patient_matrix, pat_blks6$best$best1$clu,\n                      plabels = rownames(patient_matrix))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\npatient.stat%v%\"role\"<-pat_blk_mod$block.membership[match(patient.stat%v%\"vertex.names\",pat_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(patient.stat,\n               node.color=\"role\", \n               node.size=sna::degree(patient.stat, gmode=\"graph\"),\n               node.alpha = .5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output-display}\n![](post_6_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## PROVIDER\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))\n\nprovider.stat <- asNetwork(projected_graph$proj2)\n\nprovider.se <- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblk_model.provider.org <- blockmodel(provider_matrix,\n provider.se, k = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\nprov_blk_mod <- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"<-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")\n```\n\n::: {.cell-output-display}\n![](post_6_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Create New Attribute Lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr$block <- pat_blk_mod$block.membership\npro_attr$block <- prov_blk_mod$block.membership\nboth_attr <- bind_rows(pat_attr, pro_attr)\n\npat_attr_list <- do.call(list, pat_attr)\npro_attr_list <- do.call(list, pro_attr)\nattribute_list <- do.call(list, both_attr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider.st <- network(provider_matrix,\n                       directed = FALSE,\n                       matrix.type = \"adjacency\",\n                       vertex.attr = pro_attr_list)\nprovider.st\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 253 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 554 \n    missing edges= 0 \n    non-missing edges= 554 \n\n Vertex attribute names: \n    block CITY GENDER NAME type vertex.names \n\nNo edge attributes\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider_graph <- graph_from_biadjacency_matrix(provider.st)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\n#colors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors <- colors[pro_attr_list$block]\nvertex_colors <- ifelse(pro_attr_list$CITY == \"BOSTON\", \"red\", \"white\")\n\nvertex_shape <- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"SN Graph\")\n```\n\n::: {.cell-output-display}\n![](post_6_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nWhat other cities are on the provider list. Boston is not being properly represented, I have a feeling\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pro_attr$CITY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n         ALLSTON          AMHERST          ANDOVER        ARLINGTON \n               1                2                1                3 \n          AUBURN       AUBURNDALE       BELLINGHAM          BEVERLY \n               1                2                1                2 \n          Boston           BOSTON      BRIDGEWATER         BRIGHTON \n               1                5                2                2 \n        BROCKTON        BROOKLINE        CAMBRIDGE      CHARLESTOWN \n               1                2                4                1 \n        CHARLTON          CHATHAM       CHELMSFORD          CHELSEA \n               1                1                1                2 \n        CHICOPEE        DARTMOUTH           DEDHAM       DORCHESTER \n               2                1                5                2 \n      E FALMOUTH        Fairhaven        FAIRHAVEN       FALL RIVER \n               1                1                3                4 \n        FALMOUTH        Fitchburg       FOXBOROUGH       FRAMINGHAM \n               3                1                1                2 \n      GEORGETOWN           GROTON          HANOVER     HARWICH PORT \n               1                1                2                1 \n       HAVERHILL          HINGHAM        HOLLISTON          HOLYOKE \n               3                2                1                2 \n       HOPKINTON          HYANNIS        HYDE PARK    Jamaica Plain \n               2                2                1                1 \n   JAMAICA PLAIN         LAWRENCE       LEOMINSTER        LEXINGTON \n               2                3                2                3 \n          LOWELL           LUDLOW             Lynn             LYNN \n               3                1                1                1 \n          MALDEN      MARLBOROUGH         MATTAPAN          MEDFORD \n               1                5                2                2 \n         MELROSE          METHUEN       MIDDLEBORO          MILFORD \n               2                2                1                3 \n          MILTON           NATICK          NEEDHAM      NEW BEDFORD \n               3                3                2                3 \n     NEWBURYPORT           NEWTON      NORTH ADAMS    NORTH ANDOVER \n               1                5                1                1 \n NORTH DARTMOUTH      NORTHAMPTON     NORTHBOROUGH          NORWELL \n               1                1                1                3 \n         NORWOOD       OAK BLUFFS          PEABODY         PEMBROKE \n               6                1                2                1 \n      PITTSFIELD         PLYMOUTH           QUINCY         RANDOLPH \n               3                6                3                2 \n         RAYNHAM          READING         ROCHDALE       ROSLINDALE \n               2                1                1                4 \n          ROWLEY          ROXBURY       S YARMOUTH            SALEM \n               1                1                1                2 \n        SCITUATE           SHARON       SHREWSBURY       SOMERVILLE \n               3                1                1                3 \n  SOUTH YARMOUTH     SOUTHBOROUGH      SPRINGFIELD         STONEHAM \n               2                1                2                2 \n       STOUGHTON        TEWKSBURY            UPTON         UXBRIDGE \n               2                2                1                1 \n         WALPOLE          WALTHAM          WAREHAM        WELLESLEY \n               2                7                3                1 \nWEST BRIDGEWATER     West Roxbury     WEST ROXBURY      WESTBOROUGH \n               3                1                1                4 \n        WESTFORD         WESTWOOD         WEYMOUTH        WILBRAHAM \n               3                1                2                1 \n    WILLIAMSTOWN         WINTHROP           WOBURN        Worcester \n               1                1                6                1 \n       WORCESTER \n              17 \n```\n:::\n\n```{.r .cell-code}\npro_attr <- pro_attr %>%\n  mutate(\n    CITY =tolower(CITY)\n  )\npro_attr_list <- do.call(list, pro_attr)\n```\n:::\n\n\nShould have cleaned that earlier, but here we go!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBoston_Neighborhoods <- c(\n  \"ALLSTON\",\n  \"BRIGHTON\",\n  \"BOSTON\",\n  \"CHARLESTOWN\",\n  \"DORCHESTER\",\n  \"HYDE PARK\",\n  \"JAMAICA PLAIN\",\n  \"MATTAPAN\",\n  \"ROSLINDALE\",\n  \"ROXBURY\",\n  \"West Roxbury\",\n  \"WEST ROXBURY\"\n)\nBoston_Neighborhoods <- tolower(Boston_Neighborhoods)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\n#colors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors <- colors[pro_attr_list$block]\nvertex_colors <- ifelse(pro_attr_list$CITY %in% Boston_Neighborhoods, \"red\", \"white\")\nvertex_shape <- ifelse(pro_attr_list$block == \"1\", \"circle\", \"square\")\n#vertex_shape <- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = BOSTON\")\n```\n\n::: {.cell-output-display}\n![](post_6_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nSo... it's not Boston related.\n\nHow about Highest populations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlargest_pop <- c(\n\"Boston\",\n\"Worcester\",\n\"Springfield\",\n\"Cambridge\",\n\"Lowell\",\n\"Brockton\",\n\"Quincy\",\n\"Lynn\",\n\"New Bedford\",\n\"Fall River\",\n\"Lawrence\",\n\"Newton\",\n\"Somerville\",\n\"Framingham\",\n\"Haverhill\")\nlargest_pop <- tolower(largest_pop)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\n#colors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors <- colors[pro_attr_list$block]\nvertex_colors <- ifelse(pro_attr_list$CITY %in% largest_pop, \"red\", \"white\")\nvertex_shape <- ifelse(pro_attr_list$block == \"1\", \"circle\", \"square\")\n#vertex_shape <- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = Largest Cities\")\n```\n\n::: {.cell-output-display}\n![](post_6_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblock1 <- pro_attr %>%\n  filter(block == 1)\nblock1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n   NAME                      GENDER CITY         type     block\n   <chr>                     <chr>  <chr>        <chr>    <int>\n 1 Ted955 Reilly981          M      fitchburg    PROVIDER     1\n 2 Barbara209 Maldonado119   F      leominster   PROVIDER     1\n 3 Gisele901 Lehner980       F      west roxbury PROVIDER     1\n 4 Vella930 Ankunding277     F      fall river   PROVIDER     1\n 5 Precious140 Runolfsson901 F      norwell      PROVIDER     1\n 6 Fernande593 Mosciski958   F      e falmouth   PROVIDER     1\n 7 Jolie499 Parisian75       F      worcester    PROVIDER     1\n 8 Archie818 McCullough561   M      medford      PROVIDER     1\n 9 Maxima831 Fahey393        F      plymouth     PROVIDER     1\n10 Mickey576 Borer986        F      worcester    PROVIDER     1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTed955 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Ted955 Reilly981\") %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nTed955%>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 4\n# Groups:   PROVIDER, CITY.x [1]\n   PROVIDER         CITY.x    REASONDESCRIPTION                            COUNT\n   <chr>            <chr>     <chr>                                        <int>\n 1 Ted955 Reilly981 Fitchburg Chronic congestive heart failure (disorder)     86\n 2 Ted955 Reilly981 Fitchburg Ischemic heart disease (disorder)               30\n 3 Ted955 Reilly981 Fitchburg Abnormal findings diagnostic imaging heart+…    11\n 4 Ted955 Reilly981 Fitchburg Aortic valve stenosis (disorder)                 6\n 5 Ted955 Reilly981 Fitchburg History of coronary artery bypass grafting …     6\n 6 Ted955 Reilly981 Fitchburg Aortic valve regurgitation (disorder)            4\n 7 Ted955 Reilly981 Fitchburg Myocardial infarction (disorder)                 3\n 8 Ted955 Reilly981 Fitchburg Acute non-ST segment elevation myocardial i…     2\n 9 Ted955 Reilly981 Fitchburg Mitral valve regurgitation (disorder)            2\n10 Ted955 Reilly981 Fitchburg Acute ST segment elevation myocardial infar…     1\n11 Ted955 Reilly981 Fitchburg Stroke                                           1\n```\n:::\n:::\n\n\nGonna go ahead and say Ted's a Cardiologist\n\nMaybe there are other doctors that are in block one that are also cardiologists?\n\n::: {.cell}\n\n```{.r .cell-code}\nBarbara209 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Barbara209 Maldonado119\") %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nBarbara209 %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n# Groups:   PROVIDER, CITY.x [1]\n  PROVIDER                CITY.x     REASONDESCRIPTION                     COUNT\n  <chr>                   <chr>      <chr>                                 <int>\n1 Barbara209 Maldonado119 LEOMINSTER Allergy to substance (finding)            4\n2 Barbara209 Maldonado119 LEOMINSTER <NA>                                      4\n3 Barbara209 Maldonado119 LEOMINSTER Essential hypertension (disorder)         3\n4 Barbara209 Maldonado119 LEOMINSTER Viral sinusitis (disorder)                2\n5 Barbara209 Maldonado119 LEOMINSTER Acute infective cystitis (disorder)       1\n6 Barbara209 Maldonado119 LEOMINSTER Chronic pain                              1\n7 Barbara209 Maldonado119 LEOMINSTER Cow's milk (substance)                    1\n8 Barbara209 Maldonado119 LEOMINSTER Perennial allergic rhinitis with sea…     1\n9 Barbara209 Maldonado119 LEOMINSTER Streptococcal sore throat (disorder)      1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGisele901 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Gisele901 Lehner980\") %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nGisele901 %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n# Groups:   PROVIDER, CITY.x [1]\n  PROVIDER            CITY.x       REASONDESCRIPTION                       COUNT\n  <chr>               <chr>        <chr>                                   <int>\n1 Gisele901 Lehner980 West Roxbury End-stage renal disease (disorder)        117\n2 Gisele901 Lehner980 West Roxbury <NA>                                       91\n3 Gisele901 Lehner980 West Roxbury Chronic kidney disease stage 4 (disord…    50\n4 Gisele901 Lehner980 West Roxbury Acute bronchitis (disorder)                 2\n5 Gisele901 Lehner980 West Roxbury Screening for malignant neoplasm of co…     2\n6 Gisele901 Lehner980 West Roxbury Concussion with no loss of consciousne…     1\n7 Gisele901 Lehner980 West Roxbury Familial Alzheimer's disease of early …     1\n8 Gisele901 Lehner980 West Roxbury Suspected prostate cancer (situation)       1\n9 Gisele901 Lehner980 West Roxbury Viral sinusitis (disorder)                  1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters_reasons <- encounters_cleaned %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n    summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nencounters_reasons %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 938 × 4\n# Groups:   PROVIDER, CITY.x [253]\n   PROVIDER                CITY.x     REASONDESCRIPTION                    COUNT\n   <chr>                   <chr>      <chr>                                <int>\n 1 Alvin56 Crona259        METHUEN    Chronic kidney disease stage 4 (dis…   619\n 2 Rhett759 Padberg411     ROCHDALE   Chronic kidney disease stage 4 (dis…   576\n 3 Rudolf736 Vandervort697 MILTON     Chronic kidney disease stage 4 (dis…   504\n 4 Johna806 Klein929       DARTMOUTH  End-stage renal disease (disorder)     444\n 5 Ross213 Wisozk929       Fairhaven  Chronic kidney disease stage 4 (dis…   418\n 6 Merrilee429 Daugherty69 Boston     Chronic kidney disease stage 4 (dis…   387\n 7 Bea654 Daniel959        OAK BLUFFS Chronic kidney disease stage 4 (dis…   366\n 8 Sulema841 Ryan260       WAREHAM    Chronic kidney disease stage 4 (dis…   319\n 9 Floy720 Greenfelder433  SOMERVILLE End-stage renal disease (disorder)     298\n10 Leopoldo762 Keebler762  CAMBRIDGE  Chronic kidney disease stage 4 (dis…   284\n# ℹ 928 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAlvin56 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Alvin56 Crona259\") %>% \n    group_by(PROVIDER, PATIENT, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'PATIENT', 'CITY.x'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nAlvin56 %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 5\n# Groups:   PROVIDER, PATIENT, CITY.x [2]\n   PROVIDER         PATIENT                CITY.x  REASONDESCRIPTION       COUNT\n   <chr>            <chr>                  <chr>   <chr>                   <int>\n 1 Alvin56 Crona259 Margart214 Bogisich202 METHUEN Chronic kidney disease…   619\n 2 Alvin56 Crona259 Margart214 Bogisich202 METHUEN <NA>                       99\n 3 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Acute bronchitis (diso…     2\n 4 Alvin56 Crona259 Margart214 Bogisich202 METHUEN Screening for malignan…     2\n 5 Alvin56 Crona259 Margart214 Bogisich202 METHUEN Viral sinusitis (disor…     2\n 6 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Anemia (disorder)           1\n 7 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Chronic pain (finding)      1\n 8 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Fracture of rib             1\n 9 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Screening for malignan…     1\n10 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Sterilization requeste…     1\n11 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN Viral sinusitis (disor…     1\n12 Alvin56 Crona259 Jesusa437 Mayer370     METHUEN <NA>                        1\n13 Alvin56 Crona259 Margart214 Bogisich202 METHUEN Tubal pregnancy             1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMargart214 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Margart214 Bogisich202\") %>% \n    group_by(PROVIDER, PATIENT, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'PATIENT', 'CITY.x'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nMargart214 %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 5\n# Groups:   PROVIDER, PATIENT, CITY.x [0]\n# ℹ 5 variables: PROVIDER <chr>, PATIENT <chr>, CITY.x <chr>,\n#   REASONDESCRIPTION <chr>, COUNT <int>\n```\n:::\n:::",
    "supporting": [
      "post_6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}