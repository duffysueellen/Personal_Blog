{
  "hash": "980f56a698d9259dbe7ca9776038abc1",
  "result": {
    "markdown": "---\ntitle: \"Network Exploration\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-04-21\"\ncategories: [code, analysis]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n:::\n\n\nThis post will explore the Synthetic Mass network data in more detail.\n\n# Read in Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post1drug_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post1drug_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post1drug_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned <- read_csv(\"post1drug_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post1drug_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post1drug_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post1drug_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post1drug_data/attribute_list.csv\")\n```\n:::\n\n\n# Prep Data for Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#combine pro and pat attr\npat_attr$type <- \"PATIENT\"\npro_attr$type <- \"PROVIDER\"\nboth_attr <- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 8\n  NAME                   GENDER RACE  MARITAL  CITY       INCOME   AGE type   \n  <chr>                  <chr>  <chr> <chr>    <chr>       <dbl> <dbl> <chr>  \n1 Annice210 Gleason633   Female white Married  brookline    1565    37 PATIENT\n2 Julianne852 Barrows492 Female white Widowed  hamilton    39537    65 PATIENT\n3 Alesha810 Heaney114    Female white Divorced framingham 114339    46 PATIENT\n4 Sandee884 Rice937      Female white <NA>     taunton     96256    26 PATIENT\n5 Mia349 Runte676        Female white Divorced chelmsford  71238    44 PATIENT\n6 Damian46 Dach178       Male   white <NA>     swansea     74155    26 PATIENT\n```\n:::\n:::\n\n\n# Create bipartite network with attributes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.st.3 <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\nencounters.st.3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 308 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = 86 \n  total edges= 341 \n    missing edges= 0 \n    non-missing edges= 341 \n\n Vertex attribute names: \n    AGE CITY GENDER INCOME MARITAL NAME RACE type vertex.names X \n\n Edge attribute names: \n    COUNT \n```\n:::\n\n```{.r .cell-code}\nhead(network.vertex.names( encounters.st.3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Adam631 Hoppe518\"        \"Alesha810 Heaney114\"    \n[3] \"Alissa315 Altenwerth646\" \"Analisa263 Kohler843\"   \n[5] \"Annice210 Gleason633\"    \"Anthony633 Kutch271\"    \n```\n:::\n:::\n\n\n# Graphs\n\n## Graphs with sna\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the sna library to get the gplot() function\nlibrary( sna )\n\n# set the seed to reproduce the plot layout\nset.seed( 507 )\n\n# execute the plot\ngplot(\n  encounters.st.3,             \n  gmode = \"twomode\",                     # indicate it is two modes\n  usearrows = FALSE,                     # turn off the arrowheads\n  vertex.cex=2,                          # size the nodes     \n  label.cex=1.2,                         # size the labels\n  main=\"Bipartite Graph of Encounters using SNA\"                 # add a title\n)\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nincidence_graph <- graph_from_biadjacency_matrix(encounters.st.3)\n```\n:::\n\n\ndetach(\"package:sna\")\n\n## Graphs with igraph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvertex_colors <- ifelse(attribute_list$GENDER == \"Female\", \"pink\", \"turquoise\")\nV(incidence_graph)$shape <- ifelse(V(incidence_graph)$type, \"square\", \"circle\")\n\n# Define edge colors based on COUNT attribute\nedge_colors <- ifelse(encounters_el$COUNT < 5, \"lightblue\", \n                      ifelse(encounters_el$COUNT <= 20, \"blue\", \n                              ifelse(encounters_el$COUNT <= 100, \"darkblue\", \"red\")))\n\n\n# Check if the length of edge_colors matches the number of edges\nif (length(edge_colors) == ecount(incidence_graph)) {\n  # Set edge attributes based on counts\n  E(incidence_graph)$color <- edge_colors\n} else {\n  print(\"Length of edge_colors does not match the number of edges in the graph.\")\n}\n\nE(incidence_graph)$color <- edge_colors\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph,\n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 3, \n     vertex.color = vertex_colors,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Patient Provider Incidence Graph\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"pink\", \"turquoise\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\",\n       legend = c(\"1-4\", \"5-19\", \"20-99\", \"100+\"),  # You can customize these labels\n       col = c(\"lightblue\", \"blue\", \"darkblue\", \"red\"),  # Line colors corresponding to edge colors\n       lwd = 2,                            # Line width\n       title = \"Edges: # of Visits\")              # Legend title\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Calculating centrality\ntypes <- V(incidence_graph)$type\ndeg<- igraph::degree(incidence_graph)\nbet <- igraph::betweenness(incidence_graph)\nclos <- igraph::closeness(incidence_graph)\neig <- eigen_centrality(incidence_graph)$vector\nconst <- constraint(incidence_graph)\ncent_df <- data.frame(types, deg, bet, clos, eig, const)\nhead(cent_df[order(cent_df$deg, decreasing = TRUE),], 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       types deg        bet         clos         eig      const\nTed955 Reilly981        TRUE  17 18288.5694 0.0014025245 1.000000000 0.05882353\nJewel43 Kassulke119     TRUE   9  5293.0889 0.0010405827 0.122089385 0.11111111\nRamon749 Kozey370      FALSE   8  5920.4667 0.0011904762 0.314695380 0.12500000\nSabine292 Feil794      FALSE   7  8039.1255 0.0012135922 0.284892155 0.14285714\nTomika243 Walker122    FALSE   7   927.8167 0.0006793478 0.001624020 0.14285714\nGordon377 Marquardt819 FALSE   6  2112.5000 0.0011135857 0.284460108 0.16666667\nLan153 Schmidt332      FALSE   6   941.7033 0.0008726003 0.035407942 0.16666667\nStanley702 Cremin516   FALSE   6   823.4333 0.0006784261 0.001472952 0.16666667\nCortez851 Price929      TRUE   6  4823.0333 0.0007843137 0.004928315 0.16666667\nAnderson154 Lemke654    TRUE   6  2266.9251 0.0009569378 0.231038624 0.16666667\n```\n:::\n\n```{.r .cell-code}\n#provider only\npro_cent_df <- cent_df %>%\n  filter(types ==\"TRUE\")\nhead(pro_cent_df[order(pro_cent_df$deg, decreasing = TRUE),], 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      types deg         bet         clos         eig      const\nTed955 Reilly981       TRUE  17 18288.56945 0.0014025245 1.000000000 0.05882353\nJewel43 Kassulke119    TRUE   9  5293.08892 0.0010405827 0.122089385 0.11111111\nCortez851 Price929     TRUE   6  4823.03333 0.0007843137 0.004928315 0.16666667\nAnderson154 Lemke654   TRUE   6  2266.92508 0.0009569378 0.231038624 0.16666667\nRandy380 Bergstrom287  TRUE   6   592.40699 0.0009354537 0.351045458 0.16666667\nKarla801 Cummerata161  TRUE   4   962.23333 0.0009149131 0.150977394 0.25000000\nThanh759 Weber641      TRUE   4   123.18801 0.0007446016 0.023410004 0.25000000\nMertie42 Lakin515      TRUE   4   673.44586 0.0007733952 0.036012291 0.25000000\nFidel864 Swift555      TRUE   3    39.28333 0.0006779661 0.009873917 0.33333333\nVirgen207 Hyatt152     TRUE   3   664.43333 0.0009132420 0.058784103 0.33333333\n```\n:::\n\n```{.r .cell-code}\nsummary(pro_cent_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  types              deg              bet                clos          \n Mode:logical   Min.   : 1.000   Min.   :    0.00   Min.   :0.0004787  \n TRUE:222       1st Qu.: 1.000   1st Qu.:    0.00   1st Qu.:0.0006925  \n                Median : 1.000   Median :    0.00   Median :0.0009033  \n                Mean   : 1.536   Mean   :  239.29   Mean   :0.0343315  \n                3rd Qu.: 2.000   3rd Qu.:    8.95   3rd Qu.:0.0541667  \n                Max.   :17.000   Max.   :18288.57   Max.   :0.2000000  \n      eig               const        \n Min.   :0.000000   Min.   :0.05882  \n 1st Qu.:0.000000   1st Qu.:0.50000  \n Median :0.003459   Median :1.00000  \n Mean   :0.026668   Mean   :0.82997  \n 3rd Qu.:0.047516   3rd Qu.:1.00000  \n Max.   :1.000000   Max.   :1.00000  \n```\n:::\n\n```{.r .cell-code}\n#patient only\npat_cent_df <- cent_df %>%\n  filter(types ==\"FALSE\")\nhead(pat_cent_df[order(pat_cent_df$deg, decreasing = TRUE),], 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        types deg       bet         clos         eig     const\nRamon749 Kozey370       FALSE   8 5920.4667 0.0011904762 0.314695380 0.1250000\nSabine292 Feil794       FALSE   7 8039.1255 0.0012135922 0.284892155 0.1428571\nTomika243 Walker122     FALSE   7  927.8167 0.0006793478 0.001624020 0.1428571\nGordon377 Marquardt819  FALSE   6 2112.5000 0.0011135857 0.284460108 0.1666667\nLan153 Schmidt332       FALSE   6  941.7033 0.0008726003 0.035407942 0.1666667\nStanley702 Cremin516    FALSE   6  823.4333 0.0006784261 0.001472952 0.1666667\nCarl856 Rempel203       FALSE   5  830.0000 0.0008605852 0.030456389 0.2000000\nChanell45 Morissette863 FALSE   5  704.1182 0.0008620690 0.034515722 0.2000000\nCherise743 Prosacco716  FALSE   5  618.7667 0.0006775068 0.001379585 0.2000000\nCindi877 Hane680        FALSE   5  219.5667 0.0007727975 0.099507009 0.2000000\n```\n:::\n\n```{.r .cell-code}\nsummary(pat_cent_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   types              deg             bet              clos          \n Mode :logical   Min.   :2.000   Min.   :   0.5   Min.   :0.0005319  \n FALSE:86        1st Qu.:3.000   1st Qu.:  15.0   1st Qu.:0.0007770  \n                 Median :4.000   Median : 422.6   Median :0.0008897  \n                 Mean   :3.965   Mean   : 727.9   Mean   :0.0453422  \n                 3rd Qu.:4.000   3rd Qu.: 708.9   3rd Qu.:0.0666667  \n                 Max.   :8.000   Max.   :8039.1   Max.   :0.3333333  \n      eig              const       \n Min.   :0.00000   Min.   :0.1250  \n 1st Qu.:0.00000   1st Qu.:0.2500  \n Median :0.01549   Median :0.2500  \n Mean   :0.07111   Mean   :0.2712  \n 3rd Qu.:0.06090   3rd Qu.:0.3333  \n Max.   :0.36702   Max.   :0.5000  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nV(incidence_graph)$size <- igraph::degree(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Degree Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"pink\", \"turquoise\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Degree\")\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nHere we can see there is one Provider that sees the most patients, with degree centrality = 28. The next largest degree centrality are in the 5 to 7 range and the majority of those nodes are patients.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nV(incidence_graph)$size <- igraph::closeness(incidence_graph)\n\n# set the seed to reproduce the plot layout\nset.seed( 235 )\n\nplot(incidence_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.color = vertex_colors,\n     edge.color = \"gray\",\n     edge.label = NA,\n     vertex.label = NA,\n     main = \"Patient Provider Incidence Graph with Closeness Information\")\n# Define legend for vertex colors\nlegend(\"bottomright\",\n       legend = c(\"Female\", \"Male\"),  # You can customize these labels\n       fill = c(\"magenta\", \"blue\"),   # Fill colors corresponding to vertex colors\n       title = \"Nodes: Gender\")              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n\n# Define legend for edge colors\nlegend(\"topleft\", \n       legend = \"Vertex Size\", \n       pch = 1, \n       pt.cex = seq(0.5, 3, length.out = 5), \n       title = \"Closeness\")\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nHere we see two of the dyads on the outer right side of this incidence graph have the largest closeness score. This is because their network is complete (they are both connected to one another).\n\n# Triad Dyad Census\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntriads_incidence<-igraph::triad_census(incidence_graph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in igraph::triad_census(incidence_graph): At\nvendor/cigraph/src/misc/motifs.c:1140 : Triad census called on an undirected\ngraph. All connections will be treated as mutual.\n```\n:::\n\n```{.r .cell-code}\ntriads_incidence\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4718886       0  102594       0       0       0       0       0       0\n[10]       0     876       0       0       0       0       0\n```\n:::\n\n```{.r .cell-code}\nigraph::dyad_census(incidence_graph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `dyad_census()` requires a directed graph.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 341\n\n$asym\n[1] 0\n\n$null\n[1] 46937\n```\n:::\n\n```{.r .cell-code}\ntransitivity(incidence_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\ntransitivity(incidence_graph, type = \"global\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nmean_distance(incidence_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.160216\n```\n:::\n:::\n\n\n# Component Structure and Membership\n\nFirst, let's look at the network component structure. This gives a list with: membership by node, size of each component, and the total number of components.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(igraph::components(incidence_graph))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"membership\" \"csize\"      \"no\"        \n```\n:::\n\n```{.r .cell-code}\nigraph::components(incidence_graph)$no # number of components\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n```{.r .cell-code}\nigraph::components(incidence_graph)$csize #Size of each component\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 211   7   6   7   4   6   9   7   4   4   5   8   9   8   4   4   5\n```\n:::\n\n```{.r .cell-code}\ndegree.wt=strength(incidence_graph)\n```\n:::\n\n\n# Graph Cluster\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglou <- graph_from_data_frame(encounters_el[, 1:2], directed = FALSE)\nlou <- cluster_louvain(glou)\nset.seed(1)\nplot(lou, glou, vertex.label = NA, vertex.size=2)\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nset.seed(1)\nplot(lou, glou, vertex.label = NA, vertex.size=5, mark.groups = NULL)\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n\n```{.r .cell-code}\nset.seed(1)\nplot(lou, glou, vertex.label = NA, vertex.size = 5, mark.border = NA)\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-13-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglou <- graph_from_data_frame(encounters_el[, 1:2], directed = FALSE)\nwalktrap <- cluster_leading_eigen(glou)\nset.seed(1)\nplot(walktrap, glou, vertex.label = NA, vertex.size=2)\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nset.seed(1)\nplot(walktrap, glou, vertex.label = NA, vertex.size=5, mark.groups = NULL)\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\nset.seed(1)\nplot(walktrap, glou, vertex.label = NA, vertex.size = 5, mark.border = NA)\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n:::\n\n\n# Graph Providers and Patients Separately\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojected_graph <- bipartite_projection(incidence_graph)\n#providers\nhead(projected_graph$proj2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6 x 222 sparse Matrix of class \"dgCMatrix\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n  [[ suppressing 222 column names 'Elijah719 White193', 'Fidel864 Swift555', 'Virgen207 Hyatt152' ... ]]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                               \nElijah719 White193        . 1 1 1 . . . . . . . . . . . . . . . . . . . . . . .\nFidel864 Swift555         1 . 1 2 . . . . . . . . . . . . . . . . . . . . . . .\nVirgen207 Hyatt152        1 1 . 2 . . . 2 1 1 . . . . . . . . . . . . . . . . .\nZachery872 Pagac496       1 2 2 . . . . 1 . . . . . . . . . . . . . . . . . . .\nKristopher775 Schiller186 . . . . . 1 1 . . . . . . . . . . . . . . . . . . . .\nLaine739 Torphy630        . . . . 1 . 1 . . . . . . . . . . . . . . . . . . . .\n                                                                               \nElijah719 White193        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFidel864 Swift555         . . . . . . . . . . . . . . . . . . . . . . . . . . .\nVirgen207 Hyatt152        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nZachery872 Pagac496       . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKristopher775 Schiller186 . . . . . . . . . . . . . . . . . . . . . . . . . . .\nLaine739 Torphy630        . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nElijah719 White193        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFidel864 Swift555         . . . . . . . . . . . . . . . . . . . . . . . . . . .\nVirgen207 Hyatt152        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nZachery872 Pagac496       . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKristopher775 Schiller186 . . . . . . . . . . . . . . . . . . . . . . . . . . .\nLaine739 Torphy630        . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nElijah719 White193        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFidel864 Swift555         . . . . . . . . . . . . . 1 1 . . . . . . . . . . . .\nVirgen207 Hyatt152        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nZachery872 Pagac496       . . . . . . . . . . . . . . 1 . . . . . . . . . . . .\nKristopher775 Schiller186 . . . . . . . . . . . . . . . . . . . . . . . . . . .\nLaine739 Torphy630        . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nElijah719 White193        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFidel864 Swift555         . . . . . . . . . . . . . . . . . . . . . . . . . . .\nVirgen207 Hyatt152        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nZachery872 Pagac496       . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKristopher775 Schiller186 . . . . . . . . . . . . . . . . . . . . . . . . . . .\nLaine739 Torphy630        . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nElijah719 White193        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFidel864 Swift555         . . . . . . . . . . 1 . . . . . . . . . . . . . . . .\nVirgen207 Hyatt152        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nZachery872 Pagac496       . . . . . . . . . . 1 . . . . . . . . . . . . . . . .\nKristopher775 Schiller186 . . . . . . . . . . . . . . . . . . . . . . . . . . .\nLaine739 Torphy630        . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nElijah719 White193        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFidel864 Swift555         . . . . . . . . . . . . . . . . . . . . . . . . . . .\nVirgen207 Hyatt152        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nZachery872 Pagac496       . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKristopher775 Schiller186 . . . . . . . . . . . . . . . . . . . . . . . . . . .\nLaine739 Torphy630        . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nElijah719 White193        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nFidel864 Swift555         . . . . . . . . . . . . . . . . . . . . . 1 1 . . . .\nVirgen207 Hyatt152        . . . . . . . . . . . . . . . . . . . . . . . . . . .\nZachery872 Pagac496       . . . . . . . . . . . . . . . . . . . . . . . . . . .\nKristopher775 Schiller186 . . . . . . . . . . . . . . . . . . . . . . . . . . .\nLaine739 Torphy630        . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                     \nElijah719 White193        . . . . . .\nFidel864 Swift555         . . . . . .\nVirgen207 Hyatt152        . . . . . .\nZachery872 Pagac496       . . . . . .\nKristopher775 Schiller186 . . . . . .\nLaine739 Torphy630        . . . . . .\n```\n:::\n\n```{.r .cell-code}\nprovider_communities <- cluster_louvain(projected_graph$proj2)\nprovider_membership <- membership(provider_communities)\nhead(provider_membership,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Elijah719 White193         Fidel864 Swift555        Virgen207 Hyatt152 \n                        1                         1                         1 \n      Zachery872 Pagac496 Kristopher775 Schiller186        Laine739 Torphy630 \n                        1                         2                         2 \n    Leonarda398 Schumm995         Mathew182 Howe413          Ted955 Reilly981 \n                        2                         1                         3 \n   Vicente970 Armstrong51 \n                        1 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#patients\nhead(projected_graph$proj1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6 x 86 sparse Matrix of class \"dgCMatrix\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n  [[ suppressing 86 column names 'Adam631 Hoppe518', 'Alesha810 Heaney114', 'Alissa315 Altenwerth646' ... ]]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                               \nAdam631 Hoppe518        . . 1 . . . . . . . . . . . . . . . . . . . . . . . . .\nAlesha810 Heaney114     . . . . . 1 . . . . . . . . . . . . . . . . . . . . . .\nAlissa315 Altenwerth646 1 . . . . . . . . . . . . . . . . . . . . 1 . . 1 1 . .\nAnalisa263 Kohler843    . . . . . . . . . . . 1 . . . . . . . . . . . . . . . .\nAnnice210 Gleason633    . . . . . . . . . . . . . . . . . . . . . . . . . 2 . .\nAnthony633 Kutch271     . 1 . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nAdam631 Hoppe518        . . . 2 . . . . . . . . . . . . . . . . . . . . . . 2 .\nAlesha810 Heaney114     . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nAlissa315 Altenwerth646 . . 1 2 1 . . . . . . 1 . . 1 1 . . . 1 . . 1 1 . . . .\nAnalisa263 Kohler843    . . . . . . . . . . . . . . 1 1 . . . . . . . . . . . .\nAnnice210 Gleason633    . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nAnthony633 Kutch271     . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                                               \nAdam631 Hoppe518        . . . . . . . . . . . . . . . . . . . . . . . . . 1 . .\nAlesha810 Heaney114     . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nAlissa315 Altenwerth646 . . . . . 1 . . 1 . 1 1 . . 1 . . . . . . . . . . . . .\nAnalisa263 Kohler843    . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nAnnice210 Gleason633    . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nAnthony633 Kutch271     . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                           \nAdam631 Hoppe518        . .\nAlesha810 Heaney114     . .\nAlissa315 Altenwerth646 . .\nAnalisa263 Kohler843    . .\nAnnice210 Gleason633    . .\nAnthony633 Kutch271     . .\n```\n:::\n\n```{.r .cell-code}\npatient_communities <- cluster_louvain(projected_graph$proj1)\npatient_membership <- membership(patient_communities)\nhead(patient_membership, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Adam631 Hoppe518     Alesha810 Heaney114 Alissa315 Altenwerth646 \n                      1                       2                       1 \n   Analisa263 Kohler843    Annice210 Gleason633     Anthony633 Kutch271 \n                      3                       3                       2 \n   Benedict104 Hintz995       Carl856 Rempel203 Chanell45 Morissette863 \n                      4                       5                       5 \n     Chaya236 Sporer811 \n                      5 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(projected_graph$proj1, vertex.color = membership(patient_communities),\n     vertex.label = NA, edge.arrow.size = 0.5)\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(projected_graph$proj2, vertex.color = membership(provider_communities),\n     vertex.label = NA, edge.arrow.size = 0.5)\n```\n\n::: {.cell-output-display}\n![](post_2_drug_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "post_2_drug_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}