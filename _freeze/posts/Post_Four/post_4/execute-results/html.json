{
  "hash": "b2b08ff9f3824b5ee4f7d0f761bbc5ac",
  "result": {
    "markdown": "---\ntitle: \"The Patient Provider Relationship, A Synthetic Social Network\"\nsubtitle: \"Network Block Modeling2\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-04-25\"\ncategories: [code, analysis, block_model]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\n\n\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n:::\n\n\nThis post will explore the Synthetic Mass network data in more detail.\n\n# Read in Data\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post_one_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post_one_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post_one_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post_one_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post_one_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post_one_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post_one_data/attribute_list.csv\")\n```\n:::\n\n# Prep Data for Analysis\n\n::: {.cell}\n\n```{.r .cell-code}\n#combine pro and pat attr\npat_attr$type <- \"PATIENT\"\npro_attr$type <- \"PROVIDER\"\nboth_attr <- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 7\n  NAME                       GENDER RACE  MARITAL INCOME   AGE type   \n  <chr>                      <chr>  <chr> <chr>    <dbl> <dbl> <chr>  \n1 Avril120 Olson653          F      white <NA>    482269    36 PATIENT\n2 Norma469 Langosh790        F      white <NA>    190464    25 PATIENT\n3 Peggie783 Eichmann909      F      white <NA>     78997    21 PATIENT\n4 Ashlie138 Williamson769    F      white M         6472    37 PATIENT\n5 Christiane220 Ankunding277 F      white <NA>    141475    24 PATIENT\n6 Dione665 O'Kon634          F      white M       482269    36 PATIENT\n```\n:::\n:::\n\n\n# Create bipartite network with attributes\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#create igraph\nencounters.ig <- graph_from_biadjacency_matrix(encounters.stat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat2 <- asNetwork(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprojected_graph <- bipartite_projection(encounters.ig)\nprovider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))\n\nprovider.stat <- asNetwork(projected_graph$proj2)\n\nprovider.se <- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\nnames(provider.se)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cluster\"        \"metric\"         \"equiv.fun\"      \"cluster.method\"\n[5] \"glabels\"        \"plabels\"       \n```\n:::\n\n```{.r .cell-code}\nplot(provider.se, main = \"provider\")\nrect.hclust(provider.se$cluster, k = 6)\n```\n\n::: {.cell-output-display}\n![](post_4_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nblk_model.provider.org <- blockmodel(provider_matrix,\n provider.se, k = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n blk_model.provider.org$block.model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Block 1   Block 2     Block 3    Block 4    Block 5    Block 6\nBlock 1 0.013527738 0.2995595 0.001762115 0.00715859 0.07929515 0.05286344\nBlock 2 0.299559471       NaN 0.400000000 1.00000000 1.00000000 1.00000000\nBlock 3 0.001762115 0.4000000 0.476190476 0.00000000 0.00000000 0.00000000\nBlock 4 0.007158590 1.0000000 0.000000000 0.75000000 0.00000000 0.37500000\nBlock 5 0.079295154 1.0000000 0.000000000 0.00000000        NaN 0.00000000\nBlock 6 0.052863436 1.0000000 0.000000000 0.37500000 0.00000000        NaN\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(blk_model.provider.org, main = \"provider\")\n```\n\n::: {.cell-output-display}\n![](post_4_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the igraph package\nlibrary(igraph)\n\n# Create an igraph object from the blockmodel\ng <- graph_from_adjacency_matrix(projected_graph$provider, mode = \"directed\", weighted = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `adjmatrix` argument of `graph_from_adjacency_matrix()` must be a matrix as\nof igraph 1.6.0.\n```\n:::\n\n```{.r .cell-code}\n# Plot the graph without labels\nplot(g, layout = layout.fruchterman.reingold, vertex.label = NA, vertex.size = 100, edge.width = 1)\n```\n\n::: {.cell-output-display}\n![](post_4_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#blks <- blockmodeling::optRandomParC(provider_matrix, k=6, rep=10, approaches=\"ss\", blocks=\"com\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the blks object to a file\n#saveRDS(blks, \"blks_results.rds\")\n\n# Later, when you want to use it again, you can read it back into R\nblks <- readRDS(\"blks_results.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\nblk_mod <- blockmodel(provider_matrix, blks$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n# print blockmodel object\nblk_mod$block.model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Block 1   Block 2 Block 3     Block 4     Block 5     Block 6\nBlock 1 0.800000000 0.0000000     0.6 0.010559006 0.000000000 0.001388889\nBlock 2 0.000000000 0.6666667     0.0 0.000000000 0.388888889 0.000000000\nBlock 3 0.600000000 0.0000000     NaN 0.000000000 1.000000000 1.000000000\nBlock 4 0.010559006 0.0000000     0.0 0.015139752 0.006211180 0.004658385\nBlock 5 0.000000000 0.3888889     1.0 0.006211180 0.866666667 0.006944444\nBlock 6 0.001388889 0.0000000     1.0 0.004658385 0.006944444 0.053208138\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.block(blk_mod, main = \"provider\",\n           cex.lab = .000001)\n```\n\n::: {.cell-output-display}\n![](post_4_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"<-blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output-display}\n![](post_4_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "post_4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}