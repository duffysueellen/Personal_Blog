{
  "hash": "4bd918162b15e3eb61b715c417d14596",
  "result": {
    "markdown": "---\ntitle: \"The Patient Provider Relationship, A Synthetic Social Network\"\nsubtitle: \"Network Block Modeling\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-04-25\"\ncategories: [code, analysis, block_model]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\n\n\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n:::\n\n\nThis post will explore the Synthetic Mass network data in more detail.\n\n# Read in Data\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post_one_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post_one_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post_one_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post_one_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post_one_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post_one_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post_one_data/attribute_list.csv\")\n```\n:::\n\n# Prep Data for Analysis\n\n::: {.cell}\n\n```{.r .cell-code}\n#combine pro and pat attr\npat_attr$type <- \"PATIENT\"\npro_attr$type <- \"PROVIDER\"\nboth_attr <- bind_rows(pat_attr, pro_attr)\nhead(both_attr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 7\n  NAME                       GENDER RACE  MARITAL INCOME   AGE type   \n  <chr>                      <chr>  <chr> <chr>    <dbl> <dbl> <chr>  \n1 Avril120 Olson653          F      white <NA>    482269    36 PATIENT\n2 Norma469 Langosh790        F      white <NA>    190464    25 PATIENT\n3 Peggie783 Eichmann909      F      white <NA>     78997    21 PATIENT\n4 Ashlie138 Williamson769    F      white M         6472    37 PATIENT\n5 Christiane220 Ankunding277 F      white <NA>    141475    24 PATIENT\n6 Dione665 O'Kon634          F      white M       482269    36 PATIENT\n```\n:::\n:::\n\n\n# Create bipartite network with attributes\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#create igraph\nencounters.ig <- graph_from_biadjacency_matrix(encounters.stat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat2 <- asNetwork(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#encounters.se <- equiv.clust(encounters.stat,  equiv.fun = \"sedist\", method = \"euclidean\", mode = \"graph\", cluster.method = \"complete\")\n#Error:  This function is suited for one-mode networks only\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dBlockmodeling)\n#blk<-tmklm(encounters.stat, RC=8, CC=10, TLIMIT = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprojected_graph <- bipartite_projection(encounters.ig)\nadj_matrix1 <- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\nproj1.stat <- asNetwork(projected_graph$proj1)\n\nproj1.se <- equiv.clust(adj_matrix1,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\nnames(proj1.se)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cluster\"        \"metric\"         \"equiv.fun\"      \"cluster.method\"\n[5] \"glabels\"        \"plabels\"       \n```\n:::\n\n```{.r .cell-code}\nplot(proj1.se, main = \"Proj1\")\nrect.hclust(proj1.se$cluster, k = 6)\n```\n\n::: {.cell-output-display}\n![](post_3_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nblk_model.proj1.org <- blockmodel(adj_matrix1,\n proj1.se, k = 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n blk_model.proj1.org$block.model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Block 1    Block 2\nBlock 1 1.00000000 0.02880184\nBlock 2 0.02880184 0.01963534\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(blk_model.proj1.org, main = \"proj1\")\n```\n\n::: {.cell-output-display}\n![](post_3_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the igraph package\nlibrary(igraph)\n\n# Create an igraph object from the blockmodel\ng <- graph_from_adjacency_matrix(projected_graph$proj1, mode = \"directed\", weighted = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `adjmatrix` argument of `graph_from_adjacency_matrix()` must be a matrix as\nof igraph 1.6.0.\n```\n:::\n\n```{.r .cell-code}\n# Plot the graph without labels\nplot(g, layout = layout.fruchterman.reingold, vertex.label = NA, vertex.size = 100, edge.width = 1)\n```\n\n::: {.cell-output-display}\n![](post_3_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblks <- blockmodeling::optRandomParC(adj_matrix1,\n                                     k=6,\n                                     rep=10,\n                                     approaches=\"ss\",\n                                     blocks=\"com\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\nStarting optimization of the partiton 1 of 10 partitions.\nStarting partition: 1 1 1 1 1 1 1 1 1 1 1 1 1 4 1 1 1 1 1 1 1 1 1 6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 2 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \nFinal error: 275.4492 \nFinal partition:    4 5 2 5 2 3 3 1 5 1 5 1 5 3 5 2 5 5 5 5 5 2 5 4 1 2 1 2 4 3 5 5 5 5 2 2 5 5 5 1 5 4 5 5 5 4 5 4 5 2 4 2 5 2 5 5 5 5 4 5 1 5 5 4 4 2 5 5 5 5 2 5 5 5 5 5 5 5 5 3 1 5 5 5 2 5 5 1 5 2 5 1 5 5 5 5 5 5 1 1 5 1 1 5 1 4 5 1 1 3 5 6 5 4 5 5 5 5 5 5 5 \n\n\nStarting optimization of the partiton 2 of 10 partitions.\nStarting partition: 4 3 6 6 6 1 5 6 3 5 6 5 1 5 3 6 4 4 4 1 4 2 6 1 5 3 4 2 1 3 4 4 6 3 5 3 5 1 2 4 4 5 6 1 3 3 3 4 2 1 5 2 6 4 3 2 3 1 2 4 5 1 4 5 2 2 3 4 1 1 3 4 1 1 6 5 5 5 2 6 5 3 4 6 2 1 4 4 1 5 4 6 5 3 6 5 2 5 2 5 6 2 6 2 2 1 3 3 2 2 3 2 2 1 6 3 2 6 1 6 1 \nFinal error: 281.4378 \nFinal partition:    2 4 2 4 2 4 4 1 4 1 4 1 4 4 4 5 4 4 4 4 4 6 4 6 1 5 4 5 2 4 4 4 4 4 5 2 4 4 4 1 1 6 4 4 4 6 4 6 4 5 6 5 4 5 4 4 4 3 5 4 1 1 4 6 6 2 4 3 4 4 6 4 4 4 4 4 4 4 4 3 4 4 4 4 2 4 4 1 4 5 4 1 4 4 4 4 4 4 1 1 4 1 1 4 1 5 4 1 4 4 3 6 4 6 4 1 4 4 4 4 4 \n\n\nStarting optimization of the partiton 3 of 10 partitions.\nStarting partition: 4 1 1 5 5 6 6 6 2 1 2 3 5 4 2 4 6 1 6 2 4 1 2 1 6 1 5 6 3 4 2 6 3 6 2 4 3 5 1 1 5 4 3 6 4 1 6 6 4 5 2 4 5 3 1 2 6 1 6 1 2 4 6 1 2 4 5 5 3 4 6 3 4 3 3 5 4 2 1 5 4 3 1 3 5 6 2 4 5 5 2 3 3 5 2 1 4 1 6 6 4 3 2 5 1 2 3 5 5 3 2 2 3 3 5 4 6 2 3 3 1 \nFinal error: 278.1989 \nFinal partition:    4 3 4 3 4 3 3 2 3 2 3 3 3 3 3 4 6 3 3 3 3 5 3 4 2 4 2 4 4 3 6 3 3 6 4 5 6 3 3 6 2 4 3 3 3 4 3 4 3 4 4 4 3 4 6 3 3 3 5 3 1 2 3 4 4 5 3 3 3 3 5 3 3 3 3 3 3 3 3 3 2 3 3 3 5 3 3 6 3 4 6 2 3 3 3 3 3 3 6 3 3 2 2 3 2 5 3 3 1 3 3 4 3 4 3 2 3 3 3 3 3 \n\n\nStarting optimization of the partiton 4 of 10 partitions.\nStarting partition: 6 5 2 3 2 4 3 5 1 1 2 6 1 4 1 3 5 2 4 6 3 3 2 4 5 3 2 3 3 4 5 2 1 4 5 1 3 5 1 5 4 1 5 4 2 2 3 4 3 4 3 3 6 6 2 4 2 5 6 1 3 4 1 6 4 4 6 4 2 5 1 3 6 2 1 2 2 6 5 6 6 5 3 1 6 1 1 6 1 4 3 2 1 5 1 4 2 5 3 5 4 6 2 3 2 6 3 5 1 1 4 6 2 6 5 5 4 6 5 2 6 \nFinal error: 283.2838 \nFinal partition:    6 5 6 5 6 1 1 2 5 4 1 1 5 1 1 3 1 1 5 5 5 3 1 6 4 3 4 6 6 1 1 5 5 1 6 3 1 1 1 1 4 6 1 1 5 6 5 6 5 6 6 6 5 6 1 5 5 1 3 5 2 4 5 6 6 3 5 1 5 4 3 1 5 1 5 5 1 5 5 1 4 1 5 5 3 5 5 1 1 3 1 4 5 5 5 5 5 1 1 5 5 4 2 5 2 3 5 5 2 1 1 6 1 6 5 4 5 5 5 5 5 \n\n\nStarting optimization of the partiton 5 of 10 partitions.\nStarting partition: 1 5 2 6 4 4 3 2 1 3 4 1 3 4 1 2 5 6 6 2 2 1 6 6 4 4 1 5 3 6 1 3 3 4 5 4 2 6 6 6 3 1 3 6 1 3 5 5 1 3 2 5 2 1 6 5 1 4 6 5 1 1 1 6 5 4 2 6 4 5 6 4 4 3 6 3 1 3 1 5 6 5 1 4 3 2 4 1 3 2 3 2 1 1 1 5 6 6 2 4 6 1 3 6 4 1 3 5 1 1 4 5 3 6 5 3 3 4 5 2 2 \nFinal error: 280.2381 \nFinal partition:    5 4 2 4 2 3 3 3 4 3 4 3 4 3 3 2 3 3 4 1 4 5 3 2 3 2 1 2 2 3 3 4 3 3 2 5 3 4 4 3 4 2 3 4 4 2 1 2 4 2 2 2 4 2 3 4 4 4 5 4 6 6 4 2 2 5 4 4 4 4 5 4 4 3 4 1 4 4 4 3 1 4 4 4 5 4 4 3 4 2 3 3 4 4 4 4 4 3 3 3 4 3 3 4 3 5 4 4 6 3 4 2 4 2 4 6 4 4 3 4 4 \n\n\nStarting optimization of the partiton 6 of 10 partitions.\nStarting partition: 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 5 5 5 5 5 5 5 5 6 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 1 5 5 5 5 5 5 5 5 5 5 5 \nFinal error: 272.987 \nFinal partition:    2 3 4 3 2 1 1 5 3 3 3 3 3 1 3 4 3 3 3 3 3 2 3 2 3 4 3 2 2 1 3 3 3 3 2 4 3 3 3 5 3 2 3 3 3 2 3 2 3 4 2 4 3 4 3 3 3 3 4 3 5 5 3 2 2 4 3 3 3 3 2 3 3 3 3 3 3 3 3 1 3 3 3 3 4 3 3 5 3 4 3 3 3 3 3 3 3 3 5 5 3 3 5 3 5 4 3 3 5 1 3 6 3 2 3 5 3 3 3 3 3 \n\n\nStarting optimization of the partiton 7 of 10 partitions.\nStarting partition: 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 3 6 6 6 6 4 6 6 6 6 6 6 6 1 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 2 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 \nFinal error: 292.7175 \nFinal partition:    3 2 4 2 4 2 2 6 2 6 2 2 2 2 2 4 2 2 2 2 2 3 2 1 6 4 2 5 3 2 2 2 2 2 4 4 2 2 2 6 6 3 2 2 2 3 2 3 2 5 3 5 2 5 2 2 2 2 5 2 6 6 2 3 3 4 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 6 2 4 2 6 2 2 2 2 2 2 6 6 2 6 6 2 6 5 2 6 6 2 2 1 2 3 2 6 2 2 2 2 2 \n\n\nStarting optimization of the partiton 8 of 10 partitions.\nStarting partition: 4 4 4 6 4 1 4 4 4 5 4 4 4 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \nFinal error: 290.249 \nFinal partition:    5 6 5 6 2 6 6 4 6 6 6 4 6 6 6 3 6 6 6 6 6 2 6 2 6 3 6 2 5 6 6 6 6 6 2 5 6 6 6 4 4 1 6 6 6 1 6 1 6 3 1 3 6 3 6 6 6 6 3 6 4 4 6 1 1 5 6 6 6 6 2 6 6 6 6 6 6 6 6 6 6 6 6 6 5 6 6 4 6 3 6 6 6 6 6 6 6 6 4 4 6 6 4 6 4 3 6 4 6 6 6 2 6 1 6 4 6 6 6 6 6 \n\n\nStarting optimization of the partiton 9 of 10 partitions.\nStarting partition: 1 6 4 3 2 2 3 3 6 5 4 4 3 1 5 1 4 5 5 2 1 5 2 2 3 4 4 6 4 1 6 6 5 4 4 1 5 2 1 6 6 6 6 1 4 2 5 4 3 2 6 1 6 5 4 6 2 3 4 1 3 4 2 4 1 6 6 1 5 4 2 5 6 3 6 6 1 5 6 4 3 1 5 5 5 1 6 5 3 1 6 5 6 1 6 6 5 6 2 4 2 3 3 5 1 2 6 4 4 6 2 6 6 6 1 5 4 6 3 4 4 \nFinal error: 283.7673 \nFinal partition:    2 3 2 3 2 3 3 1 3 1 5 5 6 3 5 2 3 5 3 3 3 2 3 2 1 2 3 2 2 3 3 6 3 5 2 2 3 5 5 1 6 2 5 5 6 2 3 2 6 2 2 2 3 2 5 6 6 3 2 6 4 4 6 2 2 2 6 3 3 6 2 5 6 3 6 3 5 6 6 3 3 6 3 6 2 6 6 5 6 2 5 1 6 6 6 6 6 3 1 1 6 1 1 6 1 2 6 6 4 3 3 2 6 2 3 4 3 6 3 6 3 \n\n\nStarting optimization of the partiton 10 of 10 partitions.\nStarting partition: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 6 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \nFinal error: 282.3776 \nFinal partition:    2 6 2 6 2 6 6 3 6 6 3 3 6 6 3 2 3 3 6 3 6 2 3 2 6 2 6 2 2 6 3 6 6 3 2 5 3 3 3 3 1 2 3 3 6 2 3 2 6 2 2 2 6 2 3 6 6 6 5 6 4 4 6 2 2 5 6 6 6 6 2 3 6 3 6 3 3 6 6 6 6 6 6 6 5 6 6 3 6 2 3 6 6 6 6 6 6 3 3 6 6 6 3 6 3 5 6 6 1 6 6 2 6 2 6 4 6 6 6 6 6 \n\n\nOptimization of all partitions completed\n1 solution(s) with minimal error = 272.987 found. \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\nblk_mod <- blockmodel(adj_matrix1, blks$best$best1$clu,\n                      plabels = rownames(adj_matrix1))\n# print blockmodel object\nblk_mod$block.model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Block 1    Block 2     Block 3     Block 4     Block 5 Block 6\nBlock 1 0.533333333 0.00000000 0.006578947 0.013888889 0.000000000       1\nBlock 2 0.000000000 1.00000000 0.021929825 1.000000000 0.018181818       1\nBlock 3 0.006578947 0.02192982 0.018947368 0.007675439 0.009569378       0\nBlock 4 0.013888889 1.00000000 0.007675439 1.000000000 0.250000000       1\nBlock 5 0.000000000 0.01818182 0.009569378 0.250000000 0.200000000       0\nBlock 6 1.000000000 1.00000000 0.000000000 1.000000000 0.000000000     NaN\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.block(blk_mod, main = \"proj1\",\n           cex.lab = .000001)\n```\n\n::: {.cell-output-display}\n![](post_3_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\nproj1.stat%v%\"role\"<-blk_mod$block.membership[match(proj1.stat%v%\"vertex.names\",blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(proj1.stat,\n               node.color=\"role\", \n               node.size=sna::degree(proj1.stat, gmode=\"graph\"),\n               node.alpha = .5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output-display}\n![](post_3_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Calculating centrality\n\n::: {.cell}\n\n```{.r .cell-code}\ntypes <- V(encounters.ig)$type\ndeg<- igraph::degree(encounters.ig)\n\nbet <- igraph::betweenness(encounters.ig)\nclos <- igraph::closeness(encounters.ig)\neig <- eigen_centrality(encounters.ig)$vector\nconst <- constraint(encounters.ig)\ncent_df <- data.frame(types, deg, bet, clos, eig, const)\nhead(cent_df[order(cent_df$deg, decreasing = TRUE),], 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           types deg        bet         clos        eig\nTed955 Reilly981            TRUE  28 27013.6588 0.0012239902 1.00000000\nTimmy68 Nolan344           FALSE   7   885.6299 0.0007002801 0.02480592\nTrula820 Johns824          FALSE   7  6649.9824 0.0010000000 0.20635920\nChun678 Hirthe744          FALSE   6  1404.0134 0.0009578544 0.24432907\nCorey514 Gaylord332        FALSE   6  2402.5000 0.0009578544 0.19651997\nDennis979 Dickens475       FALSE   6  1785.4929 0.0009652510 0.22004854\nEnola75 Tromp100           FALSE   6   758.6271 0.0009560229 0.29716393\nJacqualine965 Aufderhar910 FALSE   6  3265.0333 0.0010080645 0.22137300\nJed345 Muller251           FALSE   6  3019.5333 0.0010080645 0.22693121\nMamie949 Leannon79         FALSE   6   799.1374 0.0009560229 0.28361363\n                                const\nTed955 Reilly981           0.03571429\nTimmy68 Nolan344           0.14285714\nTrula820 Johns824          0.14285714\nChun678 Hirthe744          0.16666667\nCorey514 Gaylord332        0.16666667\nDennis979 Dickens475       0.16666667\nEnola75 Tromp100           0.16666667\nJacqualine965 Aufderhar910 0.16666667\nJed345 Muller251           0.16666667\nMamie949 Leannon79         0.16666667\n```\n:::\n:::\n\n\n\n# Triad Dyad Census\n\n::: {.cell}\n\n```{.r .cell-code}\ntriads_incidence<-igraph::triad_census(encounters.ig)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in igraph::triad_census(encounters.ig): At\nvendor/cigraph/src/misc/motifs.c:1140 : Triad census called on an undirected\ngraph. All connections will be treated as mutual.\n```\n:::\n\n```{.r .cell-code}\ntriads_incidence\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 8487860       0  159964       0       0       0       0       0       0\n[10]       0    1300       0       0       0       0       0\n```\n:::\n\n```{.r .cell-code}\nigraph::dyad.census(encounters.ig)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `dyad.census()` was deprecated in igraph 2.0.0.\nâ„¹ Please use `dyad_census()` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `dyad_census()` requires a directed graph.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 437\n\n$asym\n[1] 0\n\n$null\n[1] 69314\n```\n:::\n\n```{.r .cell-code}\nigraph::transitivity(encounters.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nigraph::transitivity(encounters.ig, type = \"global\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nmean_distance(encounters.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.166661\n```\n:::\n:::\n\n\n# Component Structure and Membership\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(igraph::components(encounters.ig))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"membership\" \"csize\"      \"no\"        \n```\n:::\n\n```{.r .cell-code}\nigraph::components(encounters.ig)$no # number of components\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22\n```\n:::\n\n```{.r .cell-code}\nigraph::components(encounters.ig)$csize #Size of each component\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 249   8  18   4   6  10   3   5   3   4   5   9   6   7   2   3   5  10   7\n[20]   3   5   2\n```\n:::\n\n```{.r .cell-code}\ndegree.wt=igraph::strength(encounters.ig)\n```\n:::\n",
    "supporting": [
      "post_3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}