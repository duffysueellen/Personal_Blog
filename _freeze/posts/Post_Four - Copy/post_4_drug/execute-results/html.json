{
  "hash": "5c6e8c8f55b68d9d43dfe0e9df566310",
  "result": {
    "markdown": "---\ntitle: \"Network Block Modeling - Providers\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-04-25\"\ncategories: [code, analysis, block_model]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\n```\n:::\n\n\nThis post will explore the Synthetic Mass network data in more detail.\n\n# Read in Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post1drug_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post1drug_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post1drug_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned <- read_csv(\"post1drug_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post1drug_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post1drug_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post1drug_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post1drug_data/attribute_list.csv\")\n```\n:::\n\n\n# Create bipartite network with attributes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#create igraph\nencounters.ig <- graph_from_biadjacency_matrix(encounters.stat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat2 <- asNetwork(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprojected_graph <- bipartite_projection(encounters.ig)\nprovider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))\n\nprovider.stat <- asNetwork(projected_graph$proj2)\n\nprovider.se <- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n\nnames(provider.se)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cluster\"        \"metric\"         \"equiv.fun\"      \"cluster.method\"\n[5] \"glabels\"        \"plabels\"       \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider.se, main = \"provider\")\nrect.hclust(provider.se$cluster, k = 12)\n```\n\n::: {.cell-output-display}\n![](post_4_drug_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblk_model.provider.org <- blockmodel(provider_matrix,\n provider.se, k = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n blk_model.provider.org$block.model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Block 1   Block 2   Block 3     Block 4     Block 5    Block 6\nBlock 1 0.017318436 0.2444444 0.1222222 0.002222222 0.002046784 0.01481481\nBlock 2 0.244444444       NaN 1.0000000 0.000000000 0.210526316 1.00000000\nBlock 3 0.122222222 1.0000000       NaN 0.000000000 0.315789474 0.00000000\nBlock 4 0.002222222 0.0000000 0.0000000 0.466666667 0.000000000 0.01111111\nBlock 5 0.002046784 0.2105263 0.3157895 0.000000000 0.239766082 0.00000000\nBlock 6 0.014814815 1.0000000 0.0000000 0.011111111 0.000000000 1.00000000\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(blk_model.provider.org, main = \"provider\")\n```\n\n::: {.cell-output-display}\n![](post_4_drug_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#prov_blks6 <- blockmodeling::optRandomParC(provider_matrix, k=6, rep=10, approaches=\"ss\", blocks=\"com\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the prov_blks6 object to a file\n#saveRDS(prov_blks6, \"prov_blks6_results.rds\")\n\n# Later, when you want to use it again, you can read it back into R\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\nprov_blk_mod <- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n# print blockmodel object\nprov_blk_mod$block.model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Block 1   Block 2     Block 3     Block 4    Block 5     Block 6\nBlock 1 1.00000000 1.0000000 0.017204301 0.016666667 0.00000000 0.000000000\nBlock 2 1.00000000       NaN 0.000000000 0.000000000 1.00000000 0.857142857\nBlock 3 0.01720430 0.0000000 0.016841223 0.009032258 0.01080270 0.002764977\nBlock 4 0.01666667 0.0000000 0.009032258 0.733333333 0.00000000 0.000000000\nBlock 5 0.00000000 1.0000000 0.010802701 0.000000000 0.07973422 0.000000000\nBlock 6 0.00000000 0.8571429 0.002764977 0.000000000 0.00000000 0.714285714\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(prov_blk_mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 11\n $ block.membership: int [1:222] 1 1 1 1 1 1 2 3 3 3 ...\n $ order.vector    : int [1:222] 104 110 114 175 182 183 9 1 2 4 ...\n $ block.content   : chr \"density\"\n $ blocked.data    : num [1:222, 1:222] 0 1 1 1 1 1 1 0 0 0 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:222] \"Freeda113 Crooks415\" \"Clemente531 Schamberger479\" \"Zachery872 Rau926\" \"Gino587 Block661\" ...\n  .. ..$ : chr [1:222] \"Freeda113 Crooks415\" \"Clemente531 Schamberger479\" \"Zachery872 Rau926\" \"Gino587 Block661\" ...\n $ block.model     : num [1:6, 1:6] 1 1 0.0172 0.0167 0 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n  .. ..$ : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ plabels         : chr [1:222] \"Freeda113 Crooks415\" \"Clemente531 Schamberger479\" \"Zachery872 Rau926\" \"Gino587 Block661\" ...\n $ glabels         : int [1:222] 1 2 3 4 5 6 7 8 9 10 ...\n $ rlabels         : chr [1:6] \"Block 1\" \"Block 2\" \"Block 3\" \"Block 4\" ...\n $ cluster.method  : chr \"Prespecified\"\n $ equiv.fun       : chr \"None\"\n $ equiv.metric    : chr \"None\"\n - attr(*, \"class\")= chr \"blockmodel\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npro_attr$block <- prov_blk_mod$block.membership \n\nhead(pro_attr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 5\n  NAME                   GENDER CITY       type     block\n  <chr>                  <chr>  <chr>      <chr>    <int>\n1 Ted955 Reilly981       Male   fitchburg  PROVIDER     1\n2 Shane235 Lueilwitz711  Male   worcester  PROVIDER     1\n3 Jules135 Emard19       Male   leominster PROVIDER     1\n4 Jarvis643 Ankunding277 Male   fall river PROVIDER     1\n5 Thad495 Leannon79      Male   peabody    PROVIDER     1\n6 Bud153 Parisian75      Male   worcester  PROVIDER     1\n```\n:::\n\n```{.r .cell-code}\n#write.csv(pro_attr, \"pro_attr.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.block(prov_blk_mod, main = \"Provider 6 Block Model\",\n           cex.lab = .000001)\n```\n\n::: {.cell-output-display}\n![](post_4_drug_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"<-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5)  + ggtitle(\"Provider 6 Block Model Network\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output-display}\n![](post_4_drug_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n#Next Steps Jaccard similarity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ade4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ade4' was built under R version 4.3.3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.adj.ig <- igraph::as_biadjacency_matrix(encounters.ig)\n\nproviders_jaccard <- dist.binary(t(encounters.adj.ig),\n            method = 1, # method=1 Jaccard index\n            upper = TRUE,\n            diag = FALSE)\n\n\nproviders_jaccard <- as.matrix(providers_jaccard)\ndiag(providers_jaccard) <- 0\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#binarize\nproviders_jaccard_bi <- ifelse(providers_jaccard > 0.99, 1, 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#create igraph object\nproviders_jaccard.ig <- graph_from_adjacency_matrix(providers_jaccard_bi, mode = \"undirected\")\nproviders_jaccard.ig\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 2dce25b UN-- 222 24034 -- \n+ attr: name (v/c)\n+ edges from 2dce25b (vertex names):\n [1] Elijah719 White193--Kristopher775 Schiller186\n [2] Elijah719 White193--Laine739 Torphy630       \n [3] Elijah719 White193--Leonarda398 Schumm995    \n [4] Elijah719 White193--Mathew182 Howe413        \n [5] Elijah719 White193--Ted955 Reilly981         \n [6] Elijah719 White193--Vicente970 Armstrong51   \n [7] Elijah719 White193--Daniel959 Wolff180       \n [8] Elijah719 White193--Elmer371 Gusikowski974   \n+ ... omitted several edges\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(providers_jaccard.ig,  edge.width = 0.0002, edge.color = \"lightgray\",  vertex.size = 2, vertex.label = NA)\n```\n\n::: {.cell-output-display}\n![](post_4_drug_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the igraph package\nlibrary(igraph)\n\n# Create an igraph object from the blockmodel\ng <- graph_from_adjacency_matrix(provider_matrix, mode = \"undirected\", weighted = FALSE)\n\n# Plot the graph without labels\nplot(g,      layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 2, \n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Provider Network\")\n```\n\n::: {.cell-output-display}\n![](post_4_drug_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "post_4_drug_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}