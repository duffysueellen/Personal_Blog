{
  "hash": "6ae5ddc59f707d265b456a5785f68eae",
  "result": {
    "markdown": "---\ntitle: \"POST 10\"\nsubtitle: \"Gender Matrix\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-05-05\"\ncategories: [code, analysis, block_model]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(statnet)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(tigris)\nlibrary(stplanr)\n```\n:::\n\n\nThis post will explore the a Gender Matrix\n\n# Read in Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post5drug_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post5drug_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post5drug_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned <- read_csv(\"post5drug_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post5drug_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post5drug_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post5drug_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post5drug_data/attribute_list.csv\")\npat_blks6 <- readRDS(\"pat_blks6_results.rds\")\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n\n# Create Gender Matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#create edgelist\n# Sample dataframe\n\n# Function to calculate gender sameness\ncalculate_gender_sameness <- function(gender1, gender2) {\n  if (gender1 == \"Female\" && gender2 == \"Female\") {\n    return(1)  # Female patient and female provider\n  } else if (gender1 == \"Male\" && gender2 == \"Male\") {\n    return(2)  # Male patient and male provider\n  } else if (gender1 == \"Female\" && gender2 == \"Male\") {\n    return(3)  # Female patient and male provider\n  } else if (gender1 == \"Male\" && gender2 == \"Female\") {\n    return(4)  # Male patient and female provider\n  } else {\n    return(NA) # Unknown or missing values\n  }\n}\n\n# Apply function to create gender sameness column\nencounter_attributes$GENDER_SAMENESS <- mapply(calculate_gender_sameness, encounter_attributes$GENDER.x, encounter_attributes$GENDER.y)\n\ngender_sameness_df <- encounter_attributes %>%\n  select(PATIENT, PROVIDER, GENDER.x, GENDER.y, GENDER_SAMENESS) %>% \n  distinct(PATIENT, PROVIDER, GENDER.x, GENDER.y, GENDER_SAMENESS)\n\ngender_edgelist <- encounter_attributes %>% \n  select(PATIENT, PROVIDER, GENDER_SAMENESS) %>%\n  distinct(PATIENT, PROVIDER, GENDER_SAMENESS)\n```\n:::\n\nCheck Gender Edgelist\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gender_edgelist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  PATIENT                PROVIDER               GENDER_SAMENESS\n  <chr>                  <chr>                            <dbl>\n1 Annice210 Gleason633   Clement78 Gleason633                 4\n2 Annice210 Gleason633   Enriqueta274 Barton704               1\n3 Annice210 Gleason633   Kim439 Hyatt152                      4\n4 Julianne852 Barrows492 Buck819 Johnson679                   4\n5 Julianne852 Barrows492 Madelaine318 Walker122               1\n6 Julianne852 Barrows492 Soledad678 Calderón210               1\n```\n:::\n\n```{.r .cell-code}\ndim(gender_edgelist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 341   3\n```\n:::\n\n```{.r .cell-code}\ngender_edgelist <- data.frame(gender_edgelist)\nclass(gender_edgelist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng_attr_list <- (do.call(list, gender_sameness_df))\n```\n:::\n\n\n## Create Gender Matrix\n\n::: {.cell}\n\n```{.r .cell-code}\ng.stat <- network(gender_edgelist, directed = FALSE, bipartite = TRUE, matrix.type = \"edgelist\", vertex.attr = g_attr_list)\n# create bipartite network with attributes\ngender.ig <- graph_from_biadjacency_matrix(g.stat, weight = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nV(gender.ig)$shape <- ifelse(V(gender.ig)$type, \"square\", \"circle\")\n\n# Define color palette for the GENDER_SAMENESS attribute\ncolor_palette <- c(\"pink\", \"turquoise\", \"purple\", \"lightblue\")\n\n# Map color palette to the GENDER_SAMENESS values\nedge_colors <- color_palette[g_attr_list$GENDER_SAMENESS]\n\nvertex_colors <- ifelse(g_attr_list$GENDER.x == \"Female\", \"pink\", \"turquoise\")\n\n# Plot the graph with colored edges\nplot(gender.ig, layout = layout.fruchterman.reingold, \n     vertex.size = 2, \n     vertex.label.cex = 0.8, \n     vertex.color = vertex_colors,\n     vertex.label = NA, \n     edge.color = edge_colors,\n     edge.width = 5,\n     main = \"Patient Provider Incidence Graph with Gender Information\")\n     \n     \n# Define legend for vertex colors\nlegend(\"topleft\",\n       legend = c(\"FF\", \"MM\", \"FM\", \"MF\"),  # You can customize these labels\n       fill = c(\"pink\", \"turquoise\", \"purple\", \"lightblue\"),   # Fill colors corresponding to vertex colors\n       title = paste(\"Edges: Gender\", \"\\n\", \"Patient:Provider\"))              # Legend title\n\n# Define legend for vertex shapes\nlegend(\"topright\",\n       legend = c(\"Patient\", \"Provider\"),  # You can customize these labels\n       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes\n       title = \"Nodes: Who\")                     # Legend title\n```\n\n::: {.cell-output-display}\n![](post_10_drug_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\nThe above graph does not represent the data well. There are too many inconsistencies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the custom color palette based on the values of g_attr_list$GENDER_SAMENESS\ncustom_color_palette <- c( \"turquoise\", \"purple\", \"gray\", \"pink\")\n\n# Get unique values of g_attr_list$GENDER_SAMENESS\nunique_values <- unique(g_attr_list$GENDER_SAMENESS)\n\n# Create a color mapping between unique values and custom colors\ncolor_mapping <- setNames(custom_color_palette, unique_values)\n\n# Map the edge colors using the color mapping\nedge_colors <- sapply(g_attr_list$GENDER_SAMENESS, function(value) color_mapping[value])\n\n\n\n# Plot the graph with edge colors\nGGally::ggnet2(g.stat, \n               edge.color = edge_colors,\n               edge.size = 1,\n               node.size = 2,\n               node.color = attribute_list$GENDER)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output-display}\n![](post_10_drug_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nI also feel these can't be true. Looking at the way the colors change in vary scenarios between female and male nodes, these are not consistent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create bipartite network with attributes\nencounters.stat <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\nencounters.stat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 308 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = 86 \n  total edges= 341 \n    missing edges= 0 \n    non-missing edges= 341 \n\n Vertex attribute names: \n    AGE block CITY GENDER INCOME MARITAL NAME RACE type vertex.names X \n\n Edge attribute names: \n    COUNT \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(statnet)\n\n# Assuming g.stat and encounters.stat are network objects\n# If they are adjacency matrices, you can convert them to network objects using network() function\n\n# Calculate correlation coefficient between g.stat and encounters.stat\ncorrelation <- cor(as.sociomatrix(g.stat), as.sociomatrix(encounters.stat))\n\n# Convert the correlation matrix to a data frame\ncorrelation_df <- as.data.frame(as.table(correlation))\nnames(correlation_df) <- c(\"Network1\", \"Network2\", \"Correlation\")\n\n# Create a heatmap using ggplot2\nggplot(correlation_df, aes(Network1, Network2, fill = Correlation)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\") +\n  theme_minimal() +\n  labs(title = \"Correlation Between Network Objects\",\n       x = \"Network 1\", y = \"Network 2\")\n```\n\n::: {.cell-output-display}\n![](post_10_drug_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the network objects to adjacency matrices\nadj_matrix_g_stat <- as.sociomatrix(g.stat)\nadj_matrix_encounters_stat <- as.sociomatrix(encounters.stat)\n\n# Calculate the correlation coefficient between the adjacency matrices\ncorr_gender_encounters <- cor(adj_matrix_g_stat, adj_matrix_encounters_stat)\n\n# Flatten the adjacency matrices into vectors\nvector_g_stat <- as.vector(adj_matrix_g_stat)\nvector_encounters_stat <- as.vector(adj_matrix_encounters_stat)\n\n# Calculate the correlation coefficient between the vectors\ntotal_corr_gender_encounters <- cor(vector_g_stat, vector_encounters_stat)\n\n# Print the correlation coefficient\nprint(total_corr_gender_encounters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.09826369\n```\n:::\n:::\n\n\nA correlation of 0.098 suggests a weak positive correlation, with some tendency for the matrices to move together, but the relationship is not strong.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(statnet)\n```\n:::\n",
    "supporting": [
      "post_10_drug_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}