{
  "hash": "e47ffd99c508f4467201c7933aa366c6",
  "result": {
    "markdown": "---\ntitle: \"POST 10\"\nsubtitle: \"Gender Matrix\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-05-05\"\ncategories: [code, analysis, block_model]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(tigris)\nlibrary(stplanr)\n```\n:::\n\n\nThis post will explore the a Gender Matrix\n\n# Read in Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post5drug_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post5drug_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post5drug_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned <- read_csv(\"post5drug_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post5drug_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post5drug_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post5drug_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post5drug_data/attribute_list.csv\")\npat_blks6 <- readRDS(\"pat_blks6_results.rds\")\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n\n# Create Gender Matrix\n\n::: {.cell}\n\n```{.r .cell-code}\n#create edgelist\n# Sample dataframe\n\n# Function to calculate gender sameness\ncalculate_gender_sameness <- function(gender1, gender2) {\n  if (gender1 == \"Female\" && gender2 == \"Female\") {\n    return(1)  # Female patient and female provider\n  } else if (gender1 == \"Male\" && gender2 == \"Male\") {\n    return(2)  # Male patient and male provider\n  } else if (gender1 == \"Female\" && gender2 == \"Male\") {\n    return(3)  # Female patient and male provider\n  } else if (gender1 == \"Male\" && gender2 == \"Female\") {\n    return(4)  # Male patient and female provider\n  } else {\n    return(NA) # Unknown or missing values\n  }\n}\n\n# Apply function to create gender sameness column\nencounter_attributes$GENDER_SAMENESS <- mapply(calculate_gender_sameness, encounter_attributes$GENDER.x, encounter_attributes$GENDER.y)\n```\n:::\n\nlibrary(Matrix)\n\n## Create Binary Encounter Matrix\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract unique patients and providers\npatients <- unique(encounters_el$PATIENT)\nproviders <- unique(encounters_el$PROVIDER)\n\n# Create an empty biadjacency matrix\nencounters_matrix <- matrix(0, nrow = length(patients), ncol = length(providers),\n                            dimnames = list(patients, providers))\n\n# Populate the matrix based on encounter COUNT\nfor (i in 1:nrow(encounters_el)) {\n  patient <- encounters_el$PATIENT[i]\n  provider <- encounters_el$PROVIDER[i]\n  count <- encounters_el$COUNT[i]\n  \n  # Update matrix based on encounter COUNT\n  if (count > 0) {\n    encounters_matrix[patient, provider] <- 1  # Encounter\n  } else {\n    encounters_matrix[patient, provider] <- 0  # No encounter\n  }\n}\n```\n:::\n\n\n## Create Gender Sameness Matrix\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Extract genders of patients and providers\npatients <- rownames(encounters_matrix)\nproviders <- colnames(encounters_matrix)\n\n# Extract genders of patients and providers\npatient_genders <- encounter_attributes$GENDER.x\nprovider_genders <- encounter_attributes$GENDER.y\n\n# Step 2: Create a new matrix indicating gender sameness only for encounters\ngender_sameness_matrix <- matrix(0, nrow = length(patients), ncol = length(providers),\n                                 dimnames = list(patients, providers))\n\nfor (i in 1:length(patients)) {\n  for (j in 1:length(providers)) {\n    if (encounters_matrix[i, j] == 1) {  # Check if encounter exists\n      # Determine gender sameness based on the 1-4 scale\n      if (patient_genders[i] == \"Female\" && provider_genders[j] == \"Female\") {\n        gender_sameness_matrix[i, j] <- 1  # Female patient and female provider\n      } else if (patient_genders[i] == \"Male\" && provider_genders[j] == \"Male\") {\n        gender_sameness_matrix[i, j] <- 2  # Male patient and male provider\n      } else if (patient_genders[i] == \"Female\" && provider_genders[j] == \"Male\") {\n        gender_sameness_matrix[i, j] <- 3  # Female patient and male provider\n      } else if (patient_genders[i] == \"Male\" && provider_genders[j] == \"Female\") {\n        gender_sameness_matrix[i, j] <- 4  # Male patient and female provider\n      }\n    }\n  }\n}\n\n# Step 3: Convert the matrix into an adjacency matrix format\ngender_sameness_adj_matrix <- gender_sameness_matrix  # Use the gender sameness matrix as the adjacency matrix\n```\n:::\n\n\n## Graph\n\n::: {.cell}\n\n```{.r .cell-code}\ngender_graph <- graph_from_biadjacency_matrix(gender_sameness_adj_matrix, weight = \"TRUE\")\n\nlibrary(igraph)\n\n# Define color palette for the GENDER_SAMENESS attribute\ncolor_palette <- c(\"blue\", \"green\", \"orange\", \"red\")\n\n# Map color palette to the GENDER_SAMENESS values\nedge_colors <- color_palette[encounter_attributes$GENDER_SAMENESS]\n\n# Plot the graph with colored edges\nplot(gender_graph, vertex.size = 1, vertex.label.cex = 0.8, vertex.label = NA, edge.color = edge_colors)\n```\n\n::: {.cell-output-display}\n![](post_10_drug_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::",
    "supporting": [
      "post_10_drug_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}