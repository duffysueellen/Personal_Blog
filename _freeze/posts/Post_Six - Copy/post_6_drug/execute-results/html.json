{
  "hash": "4df2ff2fbfc6196885bf5d64341a4016",
  "result": {
    "markdown": "---\ntitle: \"POST 6\"\nsubtitle: \"Network Block Modeling - Geographical Comparisson\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-05-02\"\ncategories: [code, analysis, block_model]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(tigris)\nlibrary(stplanr)\n```\n:::\n\n\nThis post will explore block attributes in the Provider Network data.\n\n# Read in Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post5drug_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post5drug_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post5drug_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned <- read_csv(\"post5drug_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post5drug_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post5drug_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post5drug_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post5drug_data/attribute_list.csv\")\npat_blks6 <- readRDS(\"pat_blks6_results.rds\")\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n\n# Create bipartite network with attributes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#create igraph\nencounters.ig <- graph_from_biadjacency_matrix(encounters.stat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat2 <- asNetwork(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprojected_graph <- bipartite_projection(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(encounters_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ENCOUNTER_ID\"        \"START\"               \"STOP\"               \n [4] \"PATIENT\"             \"ORGANIZATION.x\"      \"PROVIDER\"           \n [7] \"PAYER\"               \"ENCOUNTERCLASS\"      \"CODE\"               \n[10] \"DESCRIPTION\"         \"BASE_ENCOUNTER_COST\" \"TOTAL_CLAIM_COST\"   \n[13] \"PAYER_COVERAGE\"      \"REASONCODE\"          \"REASONDESCRIPTION\"  \n[16] \"ORGANIZATION.y\"      \"GENDER.x\"            \"SPECIALITY\"         \n[19] \"ADDRESS.x\"           \"CITY.x\"              \"STATE.x\"            \n[22] \"ZIP.x\"               \"LAT.x\"               \"LON.x\"              \n[25] \"ENCOUNTERS\"          \"PROCEDURES\"          \"BIRTHDATE\"          \n[28] \"DEATHDATE\"           \"SSN\"                 \"DRIVERS\"            \n[31] \"PASSPORT\"            \"PREFIX\"              \"SUFFIX\"             \n[34] \"MAIDEN\"              \"MARITAL\"             \"RACE\"               \n[37] \"ETHNICITY\"           \"GENDER.y\"            \"BIRTHPLACE\"         \n[40] \"ADDRESS.y\"           \"CITY.y\"              \"STATE.y\"            \n[43] \"COUNTY\"              \"FIPS\"                \"ZIP.y\"              \n[46] \"LAT.y\"               \"LON.y\"               \"HEALTHCARE_EXPENSES\"\n[49] \"HEALTHCARE_COVERAGE\" \"INCOME\"              \"AGE\"                \n```\n:::\n:::\n\n\n\n## PROVIDER\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))\nlibrary(intergraph)\ndetach(\"package:igraph\")\nlibrary(statnet)\nprovider.stat <- asNetwork(projected_graph$proj2)\n\nprovider.se <- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblk_model.provider.org <- blockmodel(provider_matrix,\n provider.se, k = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\nprov_blk_mod <- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"<-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGGally::ggnet2(provider.stat,\n               node.color=pro_attr$block, \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\nHmm, this doesn't look at all like the graph showing blocks... Not sure what's going on here. I'll attempt to assign attributes a different way.\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes <- dumpAttr(provider.stat)\n# Extracting roles and vertex names\nroles <- attributes$vertex$role\nvertex_names <- attributes$vertex$vertex.names\n\n# Creating a dataframe\nrole_vertex_df <- data.frame(vertex.names = vertex_names, role = roles)\n\n# Displaying the first few rows of the dataframe\n\nhead(role_vertex_df %>%\n  arrange(desc(vertex.names)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            vertex.names role\n1      Zachery872 Rau926    1\n2    Zachery872 Pagac496    3\n3     Waylon572 Lakin515    3\n4     Virgen207 Hyatt152    5\n5 Vicente970 Armstrong51    5\n6      Vern731 Casper496    3\n```\n:::\n\n```{.r .cell-code}\nhead(pro_attr %>%\n  arrange(desc(NAME)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  NAME                   GENDER CITY       type     block\n  <chr>                  <chr>  <chr>      <chr>    <dbl>\n1 Zachery872 Rau926      Male   walpole    PROVIDER     1\n2 Zachery872 Pagac496    Male   melrose    PROVIDER     3\n3 Waylon572 Lakin515     Male   woburn     PROVIDER     3\n4 Virgen207 Hyatt152     Female stoneham   PROVIDER     5\n5 Vicente970 Armstrong51 Male   stoneham   PROVIDER     5\n6 Vern731 Casper496      Male   swampscott PROVIDER     3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extracting vertex attributes\nvertex_data <- data.frame(\n  role = get.vertex.attribute(provider.stat, \"role\"),\n  vertex.names = get.vertex.attribute(provider.stat, \"vertex.names\")\n)\n\n# Displaying the first few rows of the dataframe\nhead(vertex_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  role              vertex.names\n1    3        Elijah719 White193\n2    3         Fidel864 Swift555\n3    5        Virgen207 Hyatt152\n4    3       Zachery872 Pagac496\n5    3 Kristopher775 Schiller186\n6    3        Laine739 Torphy630\n```\n:::\n:::\n\n\n## Create New Attribute Lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\npro_attr_list <- do.call(list, pro_attr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider.st <- network(provider_matrix,\n                       directed = FALSE,\n                       matrix.type = \"adjacency\",\n                       vertex.attr = pro_attr_list)\n```\n:::\n\n\n\n# BLOCK ATTRIBUTES:\n\nWhere are the blocks located? Are there any overlaps?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CITY\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(CITY.x) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(desc(COUNT))\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each ENCOUNTERCLASS\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 6 × 3\n  CITY.x   COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 natick      84  62.7  \n2 walpole     34  25.4  \n3 medfield     5   3.73 \n4 milford      5   3.73 \n5 westwood     5   3.73 \n6 franklin     1   0.746\n\n$Block2\n# A tibble: 1 × 3\n  CITY.x    COUNT PERCENT\n  <chr>     <int>   <dbl>\n1 fitchburg   123     100\n\n$Block3\n# A tibble: 86 × 3\n   CITY.x      COUNT PERCENT\n   <chr>       <int>   <dbl>\n 1 attleboro     182    6.52\n 2 boston        152    5.45\n 3 worcester     141    5.05\n 4 new bedford   138    4.94\n 5 northampton   129    4.62\n 6 taunton       121    4.34\n 7 weymouth      100    3.58\n 8 melrose        91    3.26\n 9 ware           90    3.22\n10 framingham     80    2.87\n# ℹ 76 more rows\n\n$Block4\n# A tibble: 3 × 3\n  CITY.x     COUNT PERCENT\n  <chr>      <int>   <dbl>\n1 waltham      661   94.2 \n2 auburndale    28    3.99\n3 waban         13    1.85\n\n$Block5\n# A tibble: 23 × 3\n   CITY.x         COUNT PERCENT\n   <chr>          <int>   <dbl>\n 1 peabody          742   34.2 \n 2 leominster       309   14.2 \n 3 hyannis          198    9.12\n 4 attleboro        117    5.39\n 5 stoneham         107    4.93\n 6 middleton         88    4.06\n 7 cambridge         70    3.23\n 8 worcester         70    3.23\n 9 fitchburg         68    3.13\n10 south yarmouth    68    3.13\n# ℹ 13 more rows\n\n$Block6\n# A tibble: 3 × 3\n  CITY.x  COUNT PERCENT\n  <chr>   <int>   <dbl>\n1 lynn      181   95.8 \n2 peabody     6    3.17\n3 saugus      2    1.06\n```\n:::\n:::\n\n\nBlock 1 is right outside of Boston Block 2, only one provider, Fitchburg. Block 3 is everywhere. Block 4 is Heavy Waltham representation Block 5 is a bit of everyone. Block 6 is Northshore.\n\nWhat are the types of encounters within the blocks?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ENCOUNTERCLASS\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(ENCOUNTERCLASS) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(desc(COUNT))\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each ENCOUNTERCLASS\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 8 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory        63  47.0  \n2 wellness          34  25.4  \n3 outpatient        20  14.9  \n4 emergency          9   6.72 \n5 urgentcare         5   3.73 \n6 hospice            1   0.746\n7 inpatient          1   0.746\n8 snf                1   0.746\n\n$Block2\n# A tibble: 6 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory        64  52.0  \n2 inpatient         19  15.4  \n3 outpatient        18  14.6  \n4 wellness          15  12.2  \n5 emergency          6   4.88 \n6 hospice            1   0.813\n\n$Block3\n# A tibble: 10 × 3\n   ENCOUNTERCLASS COUNT PERCENT\n   <chr>          <int>   <dbl>\n 1 ambulatory      1255 45.0   \n 2 wellness         701 25.1   \n 3 outpatient       519 18.6   \n 4 emergency        197  7.06  \n 5 inpatient         63  2.26  \n 6 urgentcare        23  0.824 \n 7 home              15  0.537 \n 8 snf                9  0.322 \n 9 hospice            8  0.287 \n10 virtual            1  0.0358\n\n$Block4\n# A tibble: 7 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory       397  56.6  \n2 urgentcare       139  19.8  \n3 outpatient       102  14.5  \n4 emergency         33   4.70 \n5 wellness          27   3.85 \n6 inpatient          3   0.427\n7 hospice            1   0.142\n\n$Block5\n# A tibble: 9 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory      1126 51.9   \n2 outpatient       321 14.8   \n3 urgentcare       305 14.1   \n4 wellness         267 12.3   \n5 emergency         80  3.69  \n6 home              33  1.52  \n7 inpatient         33  1.52  \n8 snf                4  0.184 \n9 virtual            1  0.0461\n\n$Block6\n# A tibble: 8 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory        61  32.3  \n2 outpatient        53  28.0  \n3 wellness          48  25.4  \n4 urgentcare        15   7.94 \n5 emergency          7   3.70 \n6 inpatient          2   1.06 \n7 snf                2   1.06 \n8 hospice            1   0.529\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# DESCRIPTION\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(DESCRIPTION) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(desc(COUNT))\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each DESCRIPTION\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 24 × 3\n   DESCRIPTION                                                     COUNT PERCENT\n   <chr>                                                           <int>   <dbl>\n 1 Encounter for problem (procedure)                                  33   24.6 \n 2 General examination of patient (procedure)                         32   23.9 \n 3 Prenatal visit                                                      9    6.72\n 4 Encounter for symptom                                               8    5.97\n 5 Consultation for treatment                                          7    5.22\n 6 Emergency room admission (procedure)                                6    4.48\n 7 Urgent care clinic (environment)                                    5    3.73\n 8 Administration of vaccine to produce active immunity (procedur…     4    2.99\n 9 Encounter for check up                                              4    2.99\n10 Patient encounter procedure                                         4    2.99\n# ℹ 14 more rows\n\n$Block2\n# A tibble: 18 × 3\n   DESCRIPTION                                         COUNT PERCENT\n   <chr>                                               <int>   <dbl>\n 1 Encounter for problem (procedure)                      46  37.4  \n 2 Encounter for check up (procedure)                     18  14.6  \n 3 General examination of patient (procedure)             14  11.4  \n 4 Hospital admission (procedure)                          9   7.32 \n 5 Encounter for problem                                   5   4.07 \n 6 Admission to ward (procedure)                           4   3.25 \n 7 Emergency room admission (procedure)                    4   3.25 \n 8 Follow-up encounter                                     4   3.25 \n 9 Patient transfer to intensive care unit (procedure)     4   3.25 \n10 Follow-up encounter (procedure)                         3   2.44 \n11 Admission to intensive care unit (procedure)            2   1.63 \n12 Drug rehabilitation and detoxification                  2   1.63 \n13 Encounter for Problem                                   2   1.63 \n14 Encounter for symptom                                   2   1.63 \n15 Admission to hospice (procedure)                        1   0.813\n16 Admission to thoracic surgery department                1   0.813\n17 Admission to ward (procedure                            1   0.813\n18 Death Certification                                     1   0.813\n\n$Block3\n# A tibble: 43 × 3\n   DESCRIPTION                                                     COUNT PERCENT\n   <chr>                                                           <int>   <dbl>\n 1 General examination of patient (procedure)                        650   23.3 \n 2 Encounter for problem (procedure)                                 506   18.1 \n 3 Prenatal visit                                                    209    7.49\n 4 Encounter for symptom                                             190    6.81\n 5 Encounter for check up (procedure)                                188    6.74\n 6 Emergency room admission (procedure)                              175    6.27\n 7 Patient encounter procedure                                       154    5.52\n 8 Consultation for treatment                                         93    3.33\n 9 Administration of vaccine to produce active immunity (procedur…    70    2.51\n10 Outpatient procedure                                               60    2.15\n# ℹ 33 more rows\n\n$Block4\n# A tibble: 24 × 3\n   DESCRIPTION                                COUNT PERCENT\n   <chr>                                      <int>   <dbl>\n 1 Encounter for problem (procedure)            363  51.7  \n 2 Urgent care clinic (environment)             139  19.8  \n 3 Encounter for check up (procedure)            74  10.5  \n 4 General examination of patient (procedure)    26   3.70 \n 5 Emergency room admission (procedure)          22   3.13 \n 6 Patient encounter procedure                   21   2.99 \n 7 Patient encounter procedure (procedure)       10   1.42 \n 8 Prenatal visit                                 8   1.14 \n 9 Encounter for symptom                          6   0.855\n10 Consultation for treatment                     5   0.712\n# ℹ 14 more rows\n\n$Block5\n# A tibble: 29 × 3\n   DESCRIPTION                                COUNT PERCENT\n   <chr>                                      <int>   <dbl>\n 1 Encounter for problem (procedure)            915   42.2 \n 2 Urgent care clinic (environment)             302   13.9 \n 3 General examination of patient (procedure)   258   11.9 \n 4 Encounter for check up (procedure)           252   11.6 \n 5 Emergency room admission (procedure)          69    3.18\n 6 Encounter for symptom                         59    2.72\n 7 Follow-up encounter                           36    1.66\n 8 Home visit (procedure)                        33    1.52\n 9 Encounter for check up                        31    1.43\n10 Encounter for problem                         30    1.38\n# ℹ 19 more rows\n\n$Block6\n# A tibble: 22 × 3\n   DESCRIPTION                                                     COUNT PERCENT\n   <chr>                                                           <int>   <dbl>\n 1 General examination of patient (procedure)                         46   24.3 \n 2 Encounter for check up (procedure)                                 43   22.8 \n 3 Encounter for problem (procedure)                                  25   13.2 \n 4 Urgent care clinic (environment)                                   15    7.94\n 5 Follow-up encounter                                                12    6.35\n 6 Prenatal visit                                                      8    4.23\n 7 Administration of vaccine to produce active immunity (procedur…     6    3.17\n 8 Emergency room admission (procedure)                                6    3.17\n 9 Encounter for symptom                                               6    3.17\n10 Encounter for problem                                               5    2.65\n# ℹ 12 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# GENDER of PROVIDERS\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(GENDER.x) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(desc(COUNT))\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each GENDER\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 2 × 3\n  GENDER.x COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Male       123   91.8 \n2 Female      11    8.21\n\n$Block2\n# A tibble: 1 × 3\n  GENDER.x COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Male       123     100\n\n$Block3\n# A tibble: 2 × 3\n  GENDER.x COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Male      1483    53.1\n2 Female    1308    46.9\n\n$Block4\n# A tibble: 2 × 3\n  GENDER.x COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Female     507    72.2\n2 Male       195    27.8\n\n$Block5\n# A tibble: 2 × 3\n  GENDER.x COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Female    1177    54.2\n2 Male       993    45.8\n\n$Block6\n# A tibble: 2 × 3\n  GENDER.x COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Male       116    61.4\n2 Female      73    38.6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# GENDER of PATIENTS\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(GENDER.y) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(desc(COUNT))\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each GENDER\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 2 × 3\n  GENDER.y COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Female     130   97.0 \n2 Male         4    2.99\n\n$Block2\n# A tibble: 2 × 3\n  GENDER.y COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Male        99    80.5\n2 Female      24    19.5\n\n$Block3\n# A tibble: 2 × 3\n  GENDER.y COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Female    1978    70.9\n2 Male       813    29.1\n\n$Block4\n# A tibble: 2 × 3\n  GENDER.y COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Female     630    89.7\n2 Male        72    10.3\n\n$Block5\n# A tibble: 2 × 3\n  GENDER.y COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Female    1104    50.9\n2 Male      1066    49.1\n\n$Block6\n# A tibble: 2 × 3\n  GENDER.y COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Male       111    58.7\n2 Female      78    41.3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# RACE of PATIENTS\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(RACE) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(desc(COUNT))\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each RACE\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 1 × 3\n  RACE  COUNT PERCENT\n  <chr> <int>   <dbl>\n1 white   134     100\n\n$Block2\n# A tibble: 2 × 3\n  RACE  COUNT PERCENT\n  <chr> <int>   <dbl>\n1 white   120   97.6 \n2 asian     3    2.44\n\n$Block3\n# A tibble: 4 × 3\n  RACE   COUNT PERCENT\n  <chr>  <int>   <dbl>\n1 white   2076   74.4 \n2 black    394   14.1 \n3 asian    209    7.49\n4 native   112    4.01\n\n$Block4\n# A tibble: 2 × 3\n  RACE  COUNT PERCENT\n  <chr> <int>   <dbl>\n1 asian   618    88.0\n2 white    84    12.0\n\n$Block5\n# A tibble: 3 × 3\n  RACE  COUNT PERCENT\n  <chr> <int>   <dbl>\n1 white  1986   91.5 \n2 black   102    4.70\n3 asian    82    3.78\n\n$Block6\n# A tibble: 1 × 3\n  RACE  COUNT PERCENT\n  <chr> <int>   <dbl>\n1 white   189     100\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# MARITAL of PATIENTS\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(MARITAL) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(desc(COUNT))\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each MARITAL\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 3 × 3\n  MARITAL COUNT PERCENT\n  <chr>   <int>   <dbl>\n1 Married   112   83.6 \n2 Widowed    18   13.4 \n3 Single      4    2.99\n\n$Block2\n# A tibble: 4 × 3\n  MARITAL  COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Married     97   78.9 \n2 Divorced    19   15.4 \n3 Widowed      5    4.07\n4 Single       2    1.63\n\n$Block3\n# A tibble: 5 × 3\n  MARITAL  COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Married   1148   41.1 \n2 Single     882   31.6 \n3 <NA>       302   10.8 \n4 Divorced   274    9.82\n5 Widowed    185    6.63\n\n$Block4\n# A tibble: 3 × 3\n  MARITAL COUNT PERCENT\n  <chr>   <int>   <dbl>\n1 Married   628  89.5  \n2 Single     73  10.4  \n3 Widowed     1   0.142\n\n$Block5\n# A tibble: 5 × 3\n  MARITAL  COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Married   1292  59.5  \n2 Single     573  26.4  \n3 Divorced   251  11.6  \n4 Widowed     48   2.21 \n5 <NA>         6   0.276\n\n$Block6\n# A tibble: 3 × 3\n  MARITAL  COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 Married     98   51.9 \n2 Divorced    81   42.9 \n3 Single      10    5.29\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# AGE of PATIENTS\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(AGE) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(AGE)\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each AGE\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 4 × 3\n    AGE COUNT PERCENT\n  <dbl> <int>   <dbl>\n1    28     4    2.99\n2    46    31   23.1 \n3    51     4    2.99\n4    76    95   70.9 \n\n$Block2\n# A tibble: 12 × 3\n     AGE COUNT PERCENT\n   <dbl> <int>   <dbl>\n 1    45     6   4.88 \n 2    55     1   0.813\n 3    59     3   2.44 \n 4    65     5   4.07 \n 5    67     3   2.44 \n 6    68     3   2.44 \n 7    72     6   4.88 \n 8    74    70  56.9  \n 9    76     2   1.63 \n10    80     1   0.813\n11    83    22  17.9  \n12   105     1   0.813\n\n$Block3\n# A tibble: 37 × 3\n     AGE COUNT PERCENT\n   <dbl> <int>   <dbl>\n 1    19    21   0.752\n 2    22   144   5.16 \n 3    24    51   1.83 \n 4    26    67   2.40 \n 5    27    19   0.681\n 6    28    55   1.97 \n 7    30    61   2.19 \n 8    31   157   5.63 \n 9    32   136   4.87 \n10    33    69   2.47 \n# ℹ 27 more rows\n\n$Block4\n# A tibble: 5 × 3\n    AGE COUNT PERCENT\n  <dbl> <int>   <dbl>\n1    30     1   0.142\n2    46     1   0.142\n3    61   618  88.0  \n4    66    72  10.3  \n5    72    10   1.42 \n\n$Block5\n# A tibble: 25 × 3\n     AGE COUNT PERCENT\n   <dbl> <int>   <dbl>\n 1    19     1  0.0461\n 2    22     3  0.138 \n 3    27     2  0.0922\n 4    28     6  0.276 \n 5    31    17  0.783 \n 6    34     2  0.0922\n 7    37    51  2.35  \n 8    39     2  0.0922\n 9    44     4  0.184 \n10    45    16  0.737 \n# ℹ 15 more rows\n\n$Block6\n# A tibble: 4 × 3\n    AGE COUNT PERCENT\n  <dbl> <int>   <dbl>\n1    37    10    5.29\n2    57    68   36.0 \n3    80    30   15.9 \n4    83    81   42.9 \n```\n:::\n:::\n\n\n\nGroup 2: Ted\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTed955 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Ted955 Reilly981\") %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nTed955%>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 4\n# Groups:   PROVIDER, CITY.x [1]\n   PROVIDER         CITY.x    REASONDESCRIPTION                            COUNT\n   <chr>            <chr>     <chr>                                        <int>\n 1 Ted955 Reilly981 fitchburg <NA>                                            33\n 2 Ted955 Reilly981 fitchburg Dependent drug abuse (disorder)                 24\n 3 Ted955 Reilly981 fitchburg Ischemic heart disease (disorder)               22\n 4 Ted955 Reilly981 fitchburg Chronic congestive heart failure (disorder)      9\n 5 Ted955 Reilly981 fitchburg Abnormal findings diagnostic imaging heart+…     8\n 6 Ted955 Reilly981 fitchburg History of coronary artery bypass grafting …     7\n 7 Ted955 Reilly981 fitchburg Hyperlipidemia                                   4\n 8 Ted955 Reilly981 fitchburg Aortic valve stenosis (disorder)                 3\n 9 Ted955 Reilly981 fitchburg Myocardial infarction (disorder)                 3\n10 Ted955 Reilly981 fitchburg Acute non-ST segment elevation myocardial i…     2\n11 Ted955 Reilly981 fitchburg History of aortic valve replacement (situat…     2\n12 Ted955 Reilly981 fitchburg Pulmonary emphysema (disorder)                   2\n13 Ted955 Reilly981 fitchburg Acute ST segment elevation myocardial infar…     1\n14 Ted955 Reilly981 fitchburg Sinusitis (disorder)                             1\n15 Ted955 Reilly981 fitchburg Stroke                                           1\n16 Ted955 Reilly981 fitchburg Viral sinusitis (disorder)                       1\n```\n:::\n:::\n\n\nGonna go ahead and say Ted's a Cardiologist\n",
    "supporting": [
      "post_6_drug_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}