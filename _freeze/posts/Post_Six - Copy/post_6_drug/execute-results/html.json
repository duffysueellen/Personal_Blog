{
  "hash": "f62e9bcb74baf04f05142e3668f70460",
  "result": {
    "markdown": "---\ntitle: \"POST 6\"\nsubtitle: \"Network Block Modeling - Geographical Comparisson\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-05-03\"\ncategories: [code, analysis, block_model]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(tigris)\nlibrary(stplanr)\n```\n:::\n\n\nThis post will explore the Synthetic Mass network data in more detail.\n\n# Read in Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post5drug_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post5drug_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post5drug_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned <- read_csv(\"post5drug_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post5drug_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post5drug_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post5drug_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post5drug_data/attribute_list.csv\")\npat_blks6 <- readRDS(\"pat_blks6_results.rds\")\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n\n# Create bipartite network with attributes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#create igraph\nencounters.ig <- graph_from_biadjacency_matrix(encounters.stat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat2 <- asNetwork(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprojected_graph <- bipartite_projection(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(encounters_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ENCOUNTER_ID\"        \"START\"               \"STOP\"               \n [4] \"PATIENT\"             \"ORGANIZATION.x\"      \"PROVIDER\"           \n [7] \"PAYER\"               \"ENCOUNTERCLASS\"      \"CODE\"               \n[10] \"DESCRIPTION\"         \"BASE_ENCOUNTER_COST\" \"TOTAL_CLAIM_COST\"   \n[13] \"PAYER_COVERAGE\"      \"REASONCODE\"          \"REASONDESCRIPTION\"  \n[16] \"ORGANIZATION.y\"      \"GENDER.x\"            \"SPECIALITY\"         \n[19] \"ADDRESS.x\"           \"CITY.x\"              \"STATE.x\"            \n[22] \"ZIP.x\"               \"LAT.x\"               \"LON.x\"              \n[25] \"ENCOUNTERS\"          \"PROCEDURES\"          \"BIRTHDATE\"          \n[28] \"DEATHDATE\"           \"SSN\"                 \"DRIVERS\"            \n[31] \"PASSPORT\"            \"PREFIX\"              \"SUFFIX\"             \n[34] \"MAIDEN\"              \"MARITAL\"             \"RACE\"               \n[37] \"ETHNICITY\"           \"GENDER.y\"            \"BIRTHPLACE\"         \n[40] \"ADDRESS.y\"           \"CITY.y\"              \"STATE.y\"            \n[43] \"COUNTY\"              \"FIPS\"                \"ZIP.y\"              \n[46] \"LAT.y\"               \"LON.y\"               \"HEALTHCARE_EXPENSES\"\n[49] \"HEALTHCARE_COVERAGE\" \"INCOME\"              \"AGE\"                \n```\n:::\n:::\n\n\n## PATIENT\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatient_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\npatient.stat <- asNetwork(projected_graph$proj1)\n\npatient.se <- equiv.clust(patient_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat_blk_model.patient.org <- blockmodel(patient_matrix,\n patient.se, k = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.block<-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(pat_blk_model.patient.org, main = \"patient\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat_blks6 <- readRDS(\"pat_blks6_results.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\npat_blk_mod <- blockmodel(patient_matrix, pat_blks6$best$best1$clu,\n                      plabels = rownames(patient_matrix))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\npatient.stat%v%\"role\"<-pat_blk_mod$block.membership[match(patient.stat%v%\"vertex.names\",pat_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(patient.stat,\n               node.color=\"role\", \n               node.size=sna::degree(patient.stat, gmode=\"graph\"),\n               node.alpha = .5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## PROVIDER\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))\nlibrary(intergraph)\ndetach(\"package:igraph\")\nlibrary(statnet)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'statnet' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: tergm\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tergm' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ergm\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ergm' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'ergm' 4.6.0 (2023-12-17), part of the Statnet Project\n* 'news(package=\"ergm\")' for changes since last version\n* 'citation(\"ergm\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n'ergm' 4 is a major update that introduces some backwards-incompatible\nchanges. Please type 'news(package=\"ergm\")' for a list of major\nchanges.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ergm'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:statnet.common':\n\n    snctrl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: networkDynamic\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'networkDynamic' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'networkDynamic' 0.11.4 (2023-12-10?), part of the Statnet Project\n* 'news(package=\"networkDynamic\")' for changes since last version\n* 'citation(\"networkDynamic\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'tergm':\n  method                   from\n  simulate_formula.network ergm\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'tergm' 4.2.0 (2023-05-30), part of the Statnet Project\n* 'news(package=\"tergm\")' for changes since last version\n* 'citation(\"tergm\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tergm'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ergm':\n\n    snctrl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:statnet.common':\n\n    snctrl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ergm.count\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ergm.count' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'ergm.count' 4.1.1 (2022-05-24), part of the Statnet Project\n* 'news(package=\"ergm.count\")' for changes since last version\n* 'citation(\"ergm.count\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: tsna\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tsna' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'statnet' 2019.6 (2019-06-13), part of the Statnet Project\n* 'news(package=\"statnet\")' for changes since last version\n* 'citation(\"statnet\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nunable to reach CRAN\n```\n:::\n\n```{.r .cell-code}\nprovider.stat <- asNetwork(projected_graph$proj2)\n\nprovider.se <- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblk_model.provider.org <- blockmodel(provider_matrix,\n provider.se, k = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\nprov_blk_mod <- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"<-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGGally::ggnet2(provider.stat,\n               node.color=pro_attr$block, \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes <- dumpAttr(provider.stat)\n# Extracting roles and vertex names\nroles <- attributes$vertex$role\nvertex_names <- attributes$vertex$vertex.names\n\n# Creating a dataframe\nrole_vertex_df <- data.frame(vertex.names = vertex_names, role = roles)\n\n# Displaying the first few rows of the dataframe\n\nhead(role_vertex_df %>%\n  arrange(desc(vertex.names)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            vertex.names role\n1      Zachery872 Rau926    1\n2    Zachery872 Pagac496    3\n3     Waylon572 Lakin515    3\n4     Virgen207 Hyatt152    5\n5 Vicente970 Armstrong51    5\n6      Vern731 Casper496    3\n```\n:::\n\n```{.r .cell-code}\nhead(pro_attr %>%\n  arrange(desc(NAME)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  NAME                   GENDER CITY       type     block\n  <chr>                  <chr>  <chr>      <chr>    <dbl>\n1 Zachery872 Rau926      Male   walpole    PROVIDER     1\n2 Zachery872 Pagac496    Male   melrose    PROVIDER     3\n3 Waylon572 Lakin515     Male   woburn     PROVIDER     3\n4 Virgen207 Hyatt152     Female stoneham   PROVIDER     5\n5 Vicente970 Armstrong51 Male   stoneham   PROVIDER     5\n6 Vern731 Casper496      Male   swampscott PROVIDER     3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extracting vertex attributes\nvertex_data <- data.frame(\n  role = get.vertex.attribute(provider.stat, \"role\"),\n  vertex.names = get.vertex.attribute(provider.stat, \"vertex.names\")\n)\n\n# Displaying the first few rows of the dataframe\nhead(vertex_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  role              vertex.names\n1    3        Elijah719 White193\n2    3         Fidel864 Swift555\n3    5        Virgen207 Hyatt152\n4    3       Zachery872 Pagac496\n5    3 Kristopher775 Schiller186\n6    3        Laine739 Torphy630\n```\n:::\n:::\n\n\n## Create New Attribute Lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr_list <- do.call(list, pat_attr)\npro_attr_list <- do.call(list, pro_attr)\nboth_attr <- bind_rows(pat_attr, pro_attr)\nattribute_list <- do.call(list, both_attr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider.st <- network(provider_matrix,\n                       directed = FALSE,\n                       matrix.type = \"adjacency\",\n                       vertex.attr = pro_attr_list)\nprovider.st\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 222 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 497 \n    missing edges= 0 \n    non-missing edges= 497 \n\n Vertex attribute names: \n    block CITY GENDER NAME type vertex.names \n\nNo edge attributes\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'igraph' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tigris':\n\n    blocks\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:sna':\n\n    betweenness, bonpow, closeness, components, degree, dyad.census,\n    evcent, hierarchy, is.connected, neighborhood, triad.census\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:network':\n\n    %c%, %s%, add.edges, add.vertices, delete.edges, delete.vertices,\n    get.edge.attribute, get.edges, get.vertex.attribute, is.bipartite,\n    is.directed, list.edge.attributes, list.vertex.attributes,\n    set.edge.attribute, set.vertex.attribute\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:lubridate':\n\n    %--%, union\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tidyr':\n\n    crossing\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nprovider_graph <- graph_from_biadjacency_matrix(provider.st)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\n#colors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors <- colors[pro_attr_list$block]\nvertex_colors <- ifelse(pro_attr_list$CITY == \"boston\", \"red\", \"white\")\n\nvertex_shape <- ifelse(pro_attr_list$CITY == \"boston\", \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"SN Graph\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nWhat other cities are on the provider list. Boston is not being properly represented, I have a feeling\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBoston_Neighborhoods <- c(\n  \"ALLSTON\",\n  \"BRIGHTON\",\n  \"BOSTON\",\n  \"CHARLESTOWN\",\n  \"DORCHESTER\",\n  \"HYDE PARK\",\n  \"JAMAICA PLAIN\",\n  \"MATTAPAN\",\n  \"ROSLINDALE\",\n  \"ROXBURY\",\n  \"West Roxbury\",\n  \"WEST ROXBURY\"\n)\nBoston_Neighborhoods <- tolower(Boston_Neighborhoods)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\n#colors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors <- colors[pro_attr_list$block]\nvertex_colors <- ifelse(pro_attr$CITY %in% Boston_Neighborhoods, \"red\", \"white\")\nvertex_shape <- ifelse(pro_attr$block == \"2\", \"circle\", \"square\")\n#vertex_shape <- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = BOSTON\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\ncolors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\nvertex_colors <- ifelse(pro_attr$block == 2 , \"red\", \"white\")\n\nvertex_colors <- colors[pro_attr$block]\n#vertex_shape <- ifelse(pro_attr$CITY %in% Boston_Neighborhoods, \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     #vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - Blocks???\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\nSo... it's not Boston related.\n\nHow about Highest populations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlargest_pop <- c(\n\"Boston\",\n\"Worcester\",\n\"Springfield\",\n\"Cambridge\",\n\"Lowell\",\n\"Brockton\",\n\"Quincy\",\n\"Lynn\",\n\"New Bedford\",\n\"Fall River\",\n\"Lawrence\",\n\"Newton\",\n\"Somerville\",\n\"Framingham\",\n\"Haverhill\")\nlargest_pop <- tolower(largest_pop)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\n#colors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors <- colors[pro_attr_list$block]\nvertex_colors <- ifelse(pro_attr_list$CITY %in% largest_pop, \"red\", \"white\")\nvertex_shape <- ifelse(pro_attr_list$block == \"6\", \"circle\", \"square\")\n#vertex_shape <- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = Largest Cities\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblock1 <- pro_attr %>%\n  filter(block == 1)\nblock1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  NAME                       GENDER CITY     type     block\n  <chr>                      <chr>  <chr>    <chr>    <dbl>\n1 Clemente531 Schamberger479 Male   westwood PROVIDER     1\n2 Zachery872 Rau926          Male   walpole  PROVIDER     1\n3 Gino587 Block661           Male   natick   PROVIDER     1\n4 Josefina523 O'Connell601   Female medfield PROVIDER     1\n5 Jeanie708 Turner526        Female franklin PROVIDER     1\n6 Freeda113 Crooks415        Female milford  PROVIDER     1\n```\n:::\n:::\n\nBlock 1 is right outside of Boston\n\n::: {.cell}\n\n```{.r .cell-code}\nblock2 <- pro_attr %>%\n  filter(block == 2)\nblock2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n  NAME             GENDER CITY      type     block\n  <chr>            <chr>  <chr>     <chr>    <dbl>\n1 Ted955 Reilly981 Male   fitchburg PROVIDER     2\n```\n:::\n:::\n\nBlock 2, only one provider, Fitchburg.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblock3 <- pro_attr %>%\n  filter(block == 3)\nblock3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 155 × 5\n   NAME                      GENDER CITY           type     block\n   <chr>                     <chr>  <chr>          <chr>    <dbl>\n 1 Shane235 Lueilwitz711     Male   worcester      PROVIDER     3\n 2 María José279 Godínez202  Female natick         PROVIDER     3\n 3 Mickey576 Borer986        Female worcester      PROVIDER     3\n 4 Cristopher265 Heaney114   Male   taunton        PROVIDER     3\n 5 Chery887 Kohler843        Female brighton       PROVIDER     3\n 6 Margene509 Schamberger479 Female westford       PROVIDER     3\n 7 Shasta644 King743         Female norwood        PROVIDER     3\n 8 Sparkle906 Bernhard322    Female hadley         PROVIDER     3\n 9 Eldon28 Cassin499         Male   westfield      PROVIDER     3\n10 Buck819 Johnson679        Male   south hamilton PROVIDER     3\n# ℹ 145 more rows\n```\n:::\n:::\n\nBlock 3 is everywhere.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblock4 <- pro_attr %>%\n  filter(block == 4)\nblock4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n   NAME                  GENDER CITY       type     block\n   <chr>                 <chr>  <chr>      <chr>    <dbl>\n 1 Harland508 Rippin620  Male   auburndale PROVIDER     4\n 2 Lizette501 Lebsack687 Female waban      PROVIDER     4\n 3 Darnell564 Leannon79  Male   waltham    PROVIDER     4\n 4 Lynsey2 Lemke654      Female waltham    PROVIDER     4\n 5 Neville893 Schoen8    Male   waltham    PROVIDER     4\n 6 Norah104 Jenkins714   Female waltham    PROVIDER     4\n 7 Patrina117 Strosin214 Female waltham    PROVIDER     4\n 8 Kati243 Ruecker817    Female waltham    PROVIDER     4\n 9 Cortez851 Price929    Male   waltham    PROVIDER     4\n10 Dante562 Reinger292   Male   auburndale PROVIDER     4\n```\n:::\n:::\n\nBlock 4 is Heavy Waltham representation\n\n::: {.cell}\n\n```{.r .cell-code}\nblock5 <- pro_attr %>%\n  filter(block == 5)\nblock5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 43 × 5\n   NAME                   GENDER CITY       type     block\n   <chr>                  <chr>  <chr>      <chr>    <dbl>\n 1 Jules135 Emard19       Male   leominster PROVIDER     5\n 2 Jarvis643 Ankunding277 Male   fall river PROVIDER     5\n 3 Bud153 Parisian75      Male   worcester  PROVIDER     5\n 4 Cherish740 Toy286      Female leominster PROVIDER     5\n 5 Jane262 Schmeler639    Female somerset   PROVIDER     5\n 6 Joanna347 Abbott774    Female peabody    PROVIDER     5\n 7 Mathew182 Howe413      Male   stoneham   PROVIDER     5\n 8 Emory494 Schuster709   Male   stoneham   PROVIDER     5\n 9 Marth98 Mayer370       Female greenfield PROVIDER     5\n10 Rebeca548 García15     Female brockton   PROVIDER     5\n# ℹ 33 more rows\n```\n:::\n:::\n\nBlock 5 is a bit of everyone\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblock6 <- pro_attr %>%\n  filter(block == 6)\nblock6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 5\n  NAME                  GENDER CITY    type     block\n  <chr>                 <chr>  <chr>   <chr>    <dbl>\n1 Thad495 Leannon79     Male   peabody PROVIDER     6\n2 Karla801 Cummerata161 Female lynn    PROVIDER     6\n3 Alberto639 Adame662   Male   saugus  PROVIDER     6\n4 Eddie505 Keeling57    Female lynn    PROVIDER     6\n5 Lady554 Kovacek682    Female lynn    PROVIDER     6\n6 Delbert384 Carter549  Male   lynn    PROVIDER     6\n7 Louis204 Hauck852     Male   lynn    PROVIDER     6\n```\n:::\n:::\n\nBlock 6 is Northshore.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTed955 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Ted955 Reilly981\") %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nTed955%>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 4\n# Groups:   PROVIDER, CITY.x [1]\n   PROVIDER         CITY.x    REASONDESCRIPTION                            COUNT\n   <chr>            <chr>     <chr>                                        <int>\n 1 Ted955 Reilly981 fitchburg <NA>                                            33\n 2 Ted955 Reilly981 fitchburg Dependent drug abuse (disorder)                 24\n 3 Ted955 Reilly981 fitchburg Ischemic heart disease (disorder)               22\n 4 Ted955 Reilly981 fitchburg Chronic congestive heart failure (disorder)      9\n 5 Ted955 Reilly981 fitchburg Abnormal findings diagnostic imaging heart+…     8\n 6 Ted955 Reilly981 fitchburg History of coronary artery bypass grafting …     7\n 7 Ted955 Reilly981 fitchburg Hyperlipidemia                                   4\n 8 Ted955 Reilly981 fitchburg Aortic valve stenosis (disorder)                 3\n 9 Ted955 Reilly981 fitchburg Myocardial infarction (disorder)                 3\n10 Ted955 Reilly981 fitchburg Acute non-ST segment elevation myocardial i…     2\n11 Ted955 Reilly981 fitchburg History of aortic valve replacement (situat…     2\n12 Ted955 Reilly981 fitchburg Pulmonary emphysema (disorder)                   2\n13 Ted955 Reilly981 fitchburg Acute ST segment elevation myocardial infar…     1\n14 Ted955 Reilly981 fitchburg Sinusitis (disorder)                             1\n15 Ted955 Reilly981 fitchburg Stroke                                           1\n16 Ted955 Reilly981 fitchburg Viral sinusitis (disorder)                       1\n```\n:::\n:::\n\n\nGonna go ahead and say Ted's a Cardiologist\n\nMaybe there are other doctors that are in block one that are also cardiologists?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBarbara209 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Barbara209 Maldonado119\") %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nBarbara209 %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 4\n# Groups:   PROVIDER, CITY.x [0]\n# ℹ 4 variables: PROVIDER <chr>, CITY.x <chr>, REASONDESCRIPTION <chr>,\n#   COUNT <int>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGisele901 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Gisele901 Lehner980\") %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nGisele901 %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 4\n# Groups:   PROVIDER, CITY.x [0]\n# ℹ 4 variables: PROVIDER <chr>, CITY.x <chr>, REASONDESCRIPTION <chr>,\n#   COUNT <int>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters_reasons <- encounters_cleaned %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n    summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nencounters_reasons %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 765 × 4\n# Groups:   PROVIDER, CITY.x [222]\n   PROVIDER              CITY.x     REASONDESCRIPTION                      COUNT\n   <chr>                 <chr>      <chr>                                  <int>\n 1 Joanna347 Abbott774   peabody    Chronic kidney disease stage 4 (disor…   518\n 2 Patrina117 Strosin214 waltham    Chronic kidney disease stage 4 (disor…   216\n 3 Cortez851 Price929    waltham    <NA>                                     139\n 4 Joanna347 Abbott774   peabody    <NA>                                     131\n 5 Jewel43 Kassulke119   attleboro  <NA>                                     115\n 6 Jules135 Emard19      leominster <NA>                                     113\n 7 Patrina117 Strosin214 waltham    End-stage renal disease (disorder)       113\n 8 Randy380 Bergstrom287 hyannis    Dependent drug abuse (disorder)          108\n 9 Saul605 Ratke343      middleton  <NA>                                      88\n10 Bud153 Parisian75     worcester  <NA>                                      69\n# ℹ 755 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAlvin56 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Alvin56 Crona259\") %>% \n    group_by(PROVIDER, PATIENT, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'PATIENT', 'CITY.x'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nAlvin56 %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 5\n# Groups:   PROVIDER, PATIENT, CITY.x [0]\n# ℹ 5 variables: PROVIDER <chr>, PATIENT <chr>, CITY.x <chr>,\n#   REASONDESCRIPTION <chr>, COUNT <int>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMargart214 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Margart214 Bogisich202\") %>% \n    group_by(PROVIDER, PATIENT, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'PATIENT', 'CITY.x'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nMargart214 %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 5\n# Groups:   PROVIDER, PATIENT, CITY.x [0]\n# ℹ 5 variables: PROVIDER <chr>, PATIENT <chr>, CITY.x <chr>,\n#   REASONDESCRIPTION <chr>, COUNT <int>\n```\n:::\n:::\n",
    "supporting": [
      "post_6_drug_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}