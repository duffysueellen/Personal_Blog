{
  "hash": "4606bb0b0ad962646f090adff1e1d139",
  "result": {
    "markdown": "---\ntitle: \"POST 6\"\nsubtitle: \"Network Block Modeling - Geographical Comparisson\"\nauthor: \"Sue-Ellen Duffy\"\ndate: \"2024-05-03\"\ncategories: [code, analysis, block_model]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(igraph)\nlibrary(sna)\nlibrary(intergraph)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(tigris)\nlibrary(stplanr)\n```\n:::\n\n\nThis post will explore the Synthetic Mass network data in more detail.\n\n# Read in Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr <- read_csv(\"post5drug_data/pat_attr.csv\", \n    col_types = cols(...1 = col_skip()))\npro_attr <- read_csv(\"post5drug_data/pro_attr.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaning <- read_csv(\"post5drug_data//encounters_cleaning.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_cleaned <- read_csv(\"post5drug_data//encounters_cleaned.csv\", \n    col_types = cols(...1 = col_skip()))\nencounter_attributes <- read_csv(\"post5drug_data/encounter_attributes.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_el  <- read_csv(\"post5drug_data/encounters_el.csv\", \n    col_types = cols(...1 = col_skip()))\nencounters_st_3 <- read_csv(\"post5drug_data/encounters.st.3.csv\", \n    col_types = cols(...1 = col_skip()))\nattribute_list <- read.csv(\"post5drug_data/attribute_list.csv\")\npat_blks6 <- readRDS(\"pat_blks6_results.rds\")\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n\n# Create bipartite network with attributes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat <- network(encounters_el,\n                         directed = FALSE,\n                         bipartite = TRUE,\n                         matrix.type = \"edgelist\",\n                         vertex.attr = attribute_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#create igraph\nencounters.ig <- graph_from_biadjacency_matrix(encounters.stat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencounters.stat2 <- asNetwork(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprojected_graph <- bipartite_projection(encounters.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(encounters_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ENCOUNTER_ID\"        \"START\"               \"STOP\"               \n [4] \"PATIENT\"             \"ORGANIZATION.x\"      \"PROVIDER\"           \n [7] \"PAYER\"               \"ENCOUNTERCLASS\"      \"CODE\"               \n[10] \"DESCRIPTION\"         \"BASE_ENCOUNTER_COST\" \"TOTAL_CLAIM_COST\"   \n[13] \"PAYER_COVERAGE\"      \"REASONCODE\"          \"REASONDESCRIPTION\"  \n[16] \"ORGANIZATION.y\"      \"GENDER.x\"            \"SPECIALITY\"         \n[19] \"ADDRESS.x\"           \"CITY.x\"              \"STATE.x\"            \n[22] \"ZIP.x\"               \"LAT.x\"               \"LON.x\"              \n[25] \"ENCOUNTERS\"          \"PROCEDURES\"          \"BIRTHDATE\"          \n[28] \"DEATHDATE\"           \"SSN\"                 \"DRIVERS\"            \n[31] \"PASSPORT\"            \"PREFIX\"              \"SUFFIX\"             \n[34] \"MAIDEN\"              \"MARITAL\"             \"RACE\"               \n[37] \"ETHNICITY\"           \"GENDER.y\"            \"BIRTHPLACE\"         \n[40] \"ADDRESS.y\"           \"CITY.y\"              \"STATE.y\"            \n[43] \"COUNTY\"              \"FIPS\"                \"ZIP.y\"              \n[46] \"LAT.y\"               \"LON.y\"               \"HEALTHCARE_EXPENSES\"\n[49] \"HEALTHCARE_COVERAGE\" \"INCOME\"              \"AGE\"                \n```\n:::\n:::\n\n\n## PATIENT\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatient_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj1))\n\npatient.stat <- asNetwork(projected_graph$proj1)\n\npatient.se <- equiv.clust(patient_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat_blk_model.patient.org <- blockmodel(patient_matrix,\n patient.se, k = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.block<-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){\n plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n main=main, drawlines = FALSE, cex.lab=cex.lab)\n for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n x$block.membership[j-1])\n abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)\n }\n \nplot.block(pat_blk_model.patient.org, main = \"patient\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat_blks6 <- readRDS(\"pat_blks6_results.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\npat_blk_mod <- blockmodel(patient_matrix, pat_blks6$best$best1$clu,\n                      plabels = rownames(patient_matrix))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\npatient.stat%v%\"role\"<-pat_blk_mod$block.membership[match(patient.stat%v%\"vertex.names\",pat_blk_mod$plabels)]\n#plot network using \"role\" to color nodes\nGGally::ggnet2(patient.stat,\n               node.color=\"role\", \n               node.size=sna::degree(patient.stat, gmode=\"graph\"),\n               node.alpha = .5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## PROVIDER\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))\nlibrary(intergraph)\ndetach(\"package:igraph\")\nlibrary(statnet)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'statnet' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: tergm\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tergm' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ergm\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ergm' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'ergm' 4.6.0 (2023-12-17), part of the Statnet Project\n* 'news(package=\"ergm\")' for changes since last version\n* 'citation(\"ergm\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n'ergm' 4 is a major update that introduces some backwards-incompatible\nchanges. Please type 'news(package=\"ergm\")' for a list of major\nchanges.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ergm'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:statnet.common':\n\n    snctrl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: networkDynamic\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'networkDynamic' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'networkDynamic' 0.11.4 (2023-12-10?), part of the Statnet Project\n* 'news(package=\"networkDynamic\")' for changes since last version\n* 'citation(\"networkDynamic\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'tergm':\n  method                   from\n  simulate_formula.network ergm\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'tergm' 4.2.0 (2023-05-30), part of the Statnet Project\n* 'news(package=\"tergm\")' for changes since last version\n* 'citation(\"tergm\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tergm'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ergm':\n\n    snctrl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:statnet.common':\n\n    snctrl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ergm.count\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ergm.count' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'ergm.count' 4.1.1 (2022-05-24), part of the Statnet Project\n* 'news(package=\"ergm.count\")' for changes since last version\n* 'citation(\"ergm.count\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: tsna\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tsna' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'statnet' 2019.6 (2019-06-13), part of the Statnet Project\n* 'news(package=\"statnet\")' for changes since last version\n* 'citation(\"statnet\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nunable to reach CRAN\n```\n:::\n\n```{.r .cell-code}\nprovider.stat <- asNetwork(projected_graph$proj2)\n\nprovider.se <- equiv.clust(provider_matrix,\n equiv.fun = \"sedist\",\n method = \"hamming\",\n mode = \"graph\",\n cluster.method = \"complete\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblk_model.provider.org <- blockmodel(provider_matrix,\n provider.se, k = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprov_blks6 <- readRDS(\"prov_blks6_results.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# blockmodel with optimized partition\nprov_blk_mod <- blockmodel(provider_matrix, prov_blks6$best$best1$clu,\n                      plabels = rownames(provider_matrix))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign block membership to vertex attribute\nprovider.stat%v%\"role\"<-prov_blk_mod$block.membership[match(provider.stat%v%\"vertex.names\",prov_blk_mod$plabels)]\n\n#plot network using \"role\" to color nodes\nGGally::ggnet2(provider.stat,\n               node.color=\"role\", \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGGally::ggnet2(provider.stat,\n               node.color=pro_attr$block, \n               node.size=sna::degree(provider.stat, gmode=\"graph\"),\n               node.alpha = .5) + ggtitle(\"Provider 6 Block Model Network\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes <- dumpAttr(provider.stat)\n# Extracting roles and vertex names\nroles <- attributes$vertex$role\nvertex_names <- attributes$vertex$vertex.names\n\n# Creating a dataframe\nrole_vertex_df <- data.frame(vertex.names = vertex_names, role = roles)\n\n# Displaying the first few rows of the dataframe\n\nhead(role_vertex_df %>%\n  arrange(desc(vertex.names)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            vertex.names role\n1      Zachery872 Rau926    1\n2    Zachery872 Pagac496    3\n3     Waylon572 Lakin515    3\n4     Virgen207 Hyatt152    5\n5 Vicente970 Armstrong51    5\n6      Vern731 Casper496    3\n```\n:::\n\n```{.r .cell-code}\nhead(pro_attr %>%\n  arrange(desc(NAME)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  NAME                   GENDER CITY       type     block\n  <chr>                  <chr>  <chr>      <chr>    <dbl>\n1 Zachery872 Rau926      Male   walpole    PROVIDER     1\n2 Zachery872 Pagac496    Male   melrose    PROVIDER     3\n3 Waylon572 Lakin515     Male   woburn     PROVIDER     3\n4 Virgen207 Hyatt152     Female stoneham   PROVIDER     5\n5 Vicente970 Armstrong51 Male   stoneham   PROVIDER     5\n6 Vern731 Casper496      Male   swampscott PROVIDER     3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extracting vertex attributes\nvertex_data <- data.frame(\n  role = get.vertex.attribute(provider.stat, \"role\"),\n  vertex.names = get.vertex.attribute(provider.stat, \"vertex.names\")\n)\n\n# Displaying the first few rows of the dataframe\nhead(vertex_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  role              vertex.names\n1    3        Elijah719 White193\n2    3         Fidel864 Swift555\n3    5        Virgen207 Hyatt152\n4    3       Zachery872 Pagac496\n5    3 Kristopher775 Schiller186\n6    3        Laine739 Torphy630\n```\n:::\n:::\n\n\n## Create New Attribute Lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat_attr_list <- do.call(list, pat_attr)\npro_attr_list <- do.call(list, pro_attr)\nboth_attr <- bind_rows(pat_attr, pro_attr)\nattribute_list <- do.call(list, both_attr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider.st <- network(provider_matrix,\n                       directed = FALSE,\n                       matrix.type = \"adjacency\",\n                       vertex.attr = pro_attr_list)\nprovider.st\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 222 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 497 \n    missing edges= 0 \n    non-missing edges= 497 \n\n Vertex attribute names: \n    block CITY GENDER NAME type vertex.names \n\nNo edge attributes\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'igraph' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tigris':\n\n    blocks\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:sna':\n\n    betweenness, bonpow, closeness, components, degree, dyad.census,\n    evcent, hierarchy, is.connected, neighborhood, triad.census\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:network':\n\n    %c%, %s%, add.edges, add.vertices, delete.edges, delete.vertices,\n    get.edge.attribute, get.edges, get.vertex.attribute, is.bipartite,\n    is.directed, list.edge.attributes, list.vertex.attributes,\n    set.edge.attribute, set.vertex.attribute\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:lubridate':\n\n    %--%, union\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tidyr':\n\n    crossing\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nprovider_graph <- graph_from_biadjacency_matrix(provider.st)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\n#colors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors <- colors[pro_attr_list$block]\nvertex_colors <- ifelse(pro_attr_list$CITY == \"boston\", \"red\", \"white\")\n\nvertex_shape <- ifelse(pro_attr_list$CITY == \"boston\", \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"SN Graph\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nWhat other cities are on the provider list. Boston is not being properly represented, I have a feeling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBoston_Neighborhoods <- c(\n  \"ALLSTON\",\n  \"BRIGHTON\",\n  \"BOSTON\",\n  \"CHARLESTOWN\",\n  \"DORCHESTER\",\n  \"HYDE PARK\",\n  \"JAMAICA PLAIN\",\n  \"MATTAPAN\",\n  \"ROSLINDALE\",\n  \"ROXBURY\",\n  \"West Roxbury\",\n  \"WEST ROXBURY\"\n)\nBoston_Neighborhoods <- tolower(Boston_Neighborhoods)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\n#colors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors <- colors[pro_attr_list$block]\nvertex_colors <- ifelse(pro_attr$CITY %in% Boston_Neighborhoods, \"red\", \"white\")\nvertex_shape <- ifelse(pro_attr$block == \"2\", \"circle\", \"square\")\n#vertex_shape <- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = BOSTON\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\ncolors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\nvertex_colors <- ifelse(pro_attr$block == 2 , \"red\", \"white\")\n\nvertex_colors <- colors[pro_attr$block]\n#vertex_shape <- ifelse(pro_attr$CITY %in% Boston_Neighborhoods, \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     #vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - Blocks???\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nSo... it's not Boston related.\n\nHow about Highest populations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlargest_pop <- c(\n\"Boston\",\n\"Worcester\",\n\"Springfield\",\n\"Cambridge\",\n\"Lowell\",\n\"Brockton\",\n\"Quincy\",\n\"Lynn\",\n\"New Bedford\",\n\"Fall River\",\n\"Lawrence\",\n\"Newton\",\n\"Somerville\",\n\"Framingham\",\n\"Haverhill\")\nlargest_pop <- tolower(largest_pop)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign colors\n#colors <-  c(\"yellow\", \"blue\", \"green\", \"orange\", \"red\", \"purple\")\n#vertex_colors <- colors[pro_attr_list$block]\nvertex_colors <- ifelse(pro_attr_list$CITY %in% largest_pop, \"red\", \"white\")\nvertex_shape <- ifelse(pro_attr_list$block == \"6\", \"circle\", \"square\")\n#vertex_shape <- ifelse(pro_attr_list$CITY == \"BOSTON\", \"circle\", \"square\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(provider_graph, \n     layout = layout.fruchterman.reingold, \n     vertex.label.dist = 2, \n     vertex.size = 4, \n     vertex.color = vertex_colors,\n     vertex.shape = vertex_shape,\n     edge.label = NA,\n     vertex.label = NA,\n     vertex.label.cex = 0.2, \n     main = \"Providers - RED = Largest Cities\")\n```\n\n::: {.cell-output-display}\n![](post_6_drug_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n# BLOCK ATTRIBUTES:\n\nWhere are the blocks located? Are there any overlaps?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CITY\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(CITY.x) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(desc(COUNT))\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each ENCOUNTERCLASS\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 6 × 3\n  CITY.x   COUNT PERCENT\n  <chr>    <int>   <dbl>\n1 natick      84  62.7  \n2 walpole     34  25.4  \n3 medfield     5   3.73 \n4 milford      5   3.73 \n5 westwood     5   3.73 \n6 franklin     1   0.746\n\n$Block2\n# A tibble: 1 × 3\n  CITY.x    COUNT PERCENT\n  <chr>     <int>   <dbl>\n1 fitchburg   123     100\n\n$Block3\n# A tibble: 86 × 3\n   CITY.x      COUNT PERCENT\n   <chr>       <int>   <dbl>\n 1 attleboro     182    6.52\n 2 boston        152    5.45\n 3 worcester     141    5.05\n 4 new bedford   138    4.94\n 5 northampton   129    4.62\n 6 taunton       121    4.34\n 7 weymouth      100    3.58\n 8 melrose        91    3.26\n 9 ware           90    3.22\n10 framingham     80    2.87\n# ℹ 76 more rows\n\n$Block4\n# A tibble: 3 × 3\n  CITY.x     COUNT PERCENT\n  <chr>      <int>   <dbl>\n1 waltham      661   94.2 \n2 auburndale    28    3.99\n3 waban         13    1.85\n\n$Block5\n# A tibble: 23 × 3\n   CITY.x         COUNT PERCENT\n   <chr>          <int>   <dbl>\n 1 peabody          742   34.2 \n 2 leominster       309   14.2 \n 3 hyannis          198    9.12\n 4 attleboro        117    5.39\n 5 stoneham         107    4.93\n 6 middleton         88    4.06\n 7 cambridge         70    3.23\n 8 worcester         70    3.23\n 9 fitchburg         68    3.13\n10 south yarmouth    68    3.13\n# ℹ 13 more rows\n\n$Block6\n# A tibble: 3 × 3\n  CITY.x  COUNT PERCENT\n  <chr>   <int>   <dbl>\n1 lynn      181   95.8 \n2 peabody     6    3.17\n3 saugus      2    1.06\n```\n:::\n:::\n\nBlock 1 is right outside of Boston\nBlock 2, only one provider, Fitchburg.\nBlock 3 is everywhere.\nBlock 4 is Heavy Waltham representation\nBlock 5 is a bit of everyone.\nBlock 6 is Northshore.\n\n\nWhat are the types of encounters within the blocks?\n\n::: {.cell}\n\n```{.r .cell-code}\n# ENCOUNTERCLASS\n# Define a function to summarize encounters for a given block\nsummarize_block <- function(block_num, pro_attr, encounters_cleaned) {\n  # Filter provider names for the given block\n  block_providers <- pro_attr %>%\n    filter(block == block_num) %>%\n    pull(NAME)\n  \n  # Filter encounters for providers in the given block\n  block_df <- encounters_cleaned %>%\n    filter(PROVIDER %in% block_providers) %>%\n    group_by(ENCOUNTERCLASS) %>%\n    summarize(COUNT = n()) %>%\n    ungroup() %>%\n    arrange(desc(COUNT))\n  \n  # Calculate the total count of encounters\n  total_count <- sum(block_df$COUNT)\n  \n  # Calculate the percentage of total encounters for each ENCOUNTERCLASS\n  block_df <- block_df %>%\n    mutate(PERCENT = (COUNT / total_count) * 100)\n  \n  return(block_df)\n}\n\n# Call the function for each block and store the results in a list\nblock_results <- lapply(1:6, function(block_num) {\n  summarize_block(block_num, pro_attr, encounters_cleaned)\n})\n\n# View the summary data for each block\nnames(block_results) <- paste0(\"Block\", 1:6)\nprint(block_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Block1\n# A tibble: 8 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory        63  47.0  \n2 wellness          34  25.4  \n3 outpatient        20  14.9  \n4 emergency          9   6.72 \n5 urgentcare         5   3.73 \n6 hospice            1   0.746\n7 inpatient          1   0.746\n8 snf                1   0.746\n\n$Block2\n# A tibble: 6 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory        64  52.0  \n2 inpatient         19  15.4  \n3 outpatient        18  14.6  \n4 wellness          15  12.2  \n5 emergency          6   4.88 \n6 hospice            1   0.813\n\n$Block3\n# A tibble: 10 × 3\n   ENCOUNTERCLASS COUNT PERCENT\n   <chr>          <int>   <dbl>\n 1 ambulatory      1255 45.0   \n 2 wellness         701 25.1   \n 3 outpatient       519 18.6   \n 4 emergency        197  7.06  \n 5 inpatient         63  2.26  \n 6 urgentcare        23  0.824 \n 7 home              15  0.537 \n 8 snf                9  0.322 \n 9 hospice            8  0.287 \n10 virtual            1  0.0358\n\n$Block4\n# A tibble: 7 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory       397  56.6  \n2 urgentcare       139  19.8  \n3 outpatient       102  14.5  \n4 emergency         33   4.70 \n5 wellness          27   3.85 \n6 inpatient          3   0.427\n7 hospice            1   0.142\n\n$Block5\n# A tibble: 9 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory      1126 51.9   \n2 outpatient       321 14.8   \n3 urgentcare       305 14.1   \n4 wellness         267 12.3   \n5 emergency         80  3.69  \n6 home              33  1.52  \n7 inpatient         33  1.52  \n8 snf                4  0.184 \n9 virtual            1  0.0461\n\n$Block6\n# A tibble: 8 × 3\n  ENCOUNTERCLASS COUNT PERCENT\n  <chr>          <int>   <dbl>\n1 ambulatory        61  32.3  \n2 outpatient        53  28.0  \n3 wellness          48  25.4  \n4 urgentcare        15   7.94 \n5 emergency          7   3.70 \n6 inpatient          2   1.06 \n7 snf                2   1.06 \n8 hospice            1   0.529\n```\n:::\n:::\n\n\n\n\n\n\nGroup 2: Ted \n\n::: {.cell}\n\n```{.r .cell-code}\nTed955 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Ted955 Reilly981\") %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nTed955%>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 4\n# Groups:   PROVIDER, CITY.x [1]\n   PROVIDER         CITY.x    REASONDESCRIPTION                            COUNT\n   <chr>            <chr>     <chr>                                        <int>\n 1 Ted955 Reilly981 fitchburg <NA>                                            33\n 2 Ted955 Reilly981 fitchburg Dependent drug abuse (disorder)                 24\n 3 Ted955 Reilly981 fitchburg Ischemic heart disease (disorder)               22\n 4 Ted955 Reilly981 fitchburg Chronic congestive heart failure (disorder)      9\n 5 Ted955 Reilly981 fitchburg Abnormal findings diagnostic imaging heart+…     8\n 6 Ted955 Reilly981 fitchburg History of coronary artery bypass grafting …     7\n 7 Ted955 Reilly981 fitchburg Hyperlipidemia                                   4\n 8 Ted955 Reilly981 fitchburg Aortic valve stenosis (disorder)                 3\n 9 Ted955 Reilly981 fitchburg Myocardial infarction (disorder)                 3\n10 Ted955 Reilly981 fitchburg Acute non-ST segment elevation myocardial i…     2\n11 Ted955 Reilly981 fitchburg History of aortic valve replacement (situat…     2\n12 Ted955 Reilly981 fitchburg Pulmonary emphysema (disorder)                   2\n13 Ted955 Reilly981 fitchburg Acute ST segment elevation myocardial infar…     1\n14 Ted955 Reilly981 fitchburg Sinusitis (disorder)                             1\n15 Ted955 Reilly981 fitchburg Stroke                                           1\n16 Ted955 Reilly981 fitchburg Viral sinusitis (disorder)                       1\n```\n:::\n:::\n\n\nGonna go ahead and say Ted's a Cardiologist\n\nWhat type of doctors make up block 6?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBarbara209 <- encounters_cleaned %>% \n    filter(PROVIDER == \"Barbara209 Maldonado119\") %>% \n    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%\n  summarize(COUNT = n()) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PROVIDER', 'CITY.x'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nBarbara209 %>%\n  arrange(desc(COUNT))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 4\n# Groups:   PROVIDER, CITY.x [0]\n# ℹ 4 variables: PROVIDER <chr>, CITY.x <chr>, REASONDESCRIPTION <chr>,\n#   COUNT <int>\n```\n:::\n:::\n",
    "supporting": [
      "post_6_drug_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}