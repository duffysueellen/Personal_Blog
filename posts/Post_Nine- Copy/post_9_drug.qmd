---
title: "POST 9"
subtitle: "mostly notes"
author: "Sue-Ellen Duffy"
date: "2024-05-03"
categories: [code, analysis, block_model]
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(igraph)
library(sna)
library(intergraph)
library(ggplot2)
library(sf)
library(tidyverse)
library(tmap)
library(tigris)
library(stplanr)
```

This post will explore the Synthetic Mass network data in more detail.

# Read in Data

```{r}
#| warning: false
#| message: false
pat_attr <- read_csv("post5drug_data/pat_attr.csv", 
    col_types = cols(...1 = col_skip()))
pro_attr <- read_csv("post5drug_data/pro_attr.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaning <- read_csv("post5drug_data//encounters_cleaning.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaned <- read_csv("post5drug_data//encounters_cleaned.csv", 
    col_types = cols(...1 = col_skip()))
encounter_attributes <- read_csv("post5drug_data/encounter_attributes.csv", 
    col_types = cols(...1 = col_skip()))
encounters_el  <- read_csv("post5drug_data/encounters_el.csv", 
    col_types = cols(...1 = col_skip()))
encounters_st_3 <- read_csv("post5drug_data/encounters.st.3.csv", 
    col_types = cols(...1 = col_skip()))
attribute_list <- read.csv("post5drug_data/attribute_list.csv")
pat_blks6 <- readRDS("pat_blks6_results.rds")
prov_blks6 <- readRDS("prov_blks6_results.rds")
```

# Create bipartite network with attributes

```{r}
encounters.stat <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list)

encounters.ig <- graph_from_biadjacency_matrix(encounters.stat)

attributes <- bind_rows(pat_attr, pro_attr)
```



# create an adjacency matrix using sna
```{r}
encounters.sna <- network(as.matrix(encounters.stat), directed = F)
encounters.m <- encounters.sna[,] # extract an adjacency matrix from the network object
```

# Matrix Multiplication - For Overlap Count 
Cross-Product Method with manual matrix multiplication
Multiply a two-mode matrix by its transpose to produce a one-mode network that reflects the ties between the nodes in one of the two modes
```{r}
patient.m <- t(encounters.m) %*% encounters.m
diag(patient.m) <- 0
```

```{r}
provider.m <-   encounters.m %*% t(encounters.m)
diag(provider.m) <- 0
```

```{r}
#overlap?
patient.ig <- graph_from_adjacency_matrix(patient.m, 
                                        mode = "undirected", 
                                        weighted = TRUE)

patient.ig
```
```{r}
#overlap?
provider.ig <- graph_from_adjacency_matrix(provider.m, 
                                        mode = "undirected", 
                                        weighted = TRUE)

provider.ig
```

```{r}
E(patient.ig)$weight
```

```{r}
E(provider.ig)$weight
```
SO providers it seems overlap with the same patients with the most being 4 times an overlap.

```{r}
library(ade4) 
g <- graph_from_data_frame(encounters_cleaned, directed=FALSE)
bipartite_matrix <- as_biadjacency_matrix(encounters.ig)  # Extract the matrix

patient_jaccard <- dist.binary(bipartite_matrix, method=1, upper=TRUE, diag = FALSE) # Method #1 is "Jaccard Index"
provider_jaccard <- dist.binary(t(bipartite_matrix), method=1, upper=TRUE, diag = FALSE) 

patient_jaccard <- as.matrix(patient_jaccard)   
diag(patient_jaccard)<-0

# women_jaccard          # Look at the matrix before you binarize
patient_jaccard <- ifelse(patient_jaccard>0.95, 1, 0)     # Binarize

# jaccard_women      # Take a look at the matrix if you like.

jacc_patient <- graph_from_adjacency_matrix(patient_jaccard,    # Create an igraph network
                                        mode = "undirected")
plot(jacc_patient,vertex.label = NA,      vertex.label.dist = 2, 
     vertex.size = 3, vertex.label.cex = 0.2,)
```

```{r}
patient_correl <- cor(t(bipartite_matrix))
provider_correl <- cor(bipartite_matrix)

patient_correl <- as.matrix(patient_correl)   
# patient_correl          # Look at the matrix before you binarize
correl_patient <- ifelse(patient_correl>0.6, 1, 0)    # Binarize 
diag(correl_patient)<-0

corr_patient <- graph_from_adjacency_matrix(correl_patient, 
                                        mode = "undirected")
plot(corr_patient,     vertex.label.dist = .5, 
     vertex.size = 3, vertex.label.cex = .8)

```

```{r}
library(psych)

patient_Q <-YuleCor(t(bipartite_matrix))$rho
provider_Q <-YuleCor(bipartite_matrix)$rho

patient_Q <- as.matrix(patient_Q) 
head(patient_Q, 10,10)
```

```{r}
Q_patient <- ifelse(patient_Q>0.9, 1, 0) # Binarize
diag(Q_patient)<-0
# Q_patient    # Take a look at the matrix

YQ_patient <- graph_from_adjacency_matrix(Q_patient,     # Create an igraph network
                                        mode = "undirected")
plot(YQ_patient,   vertex.label.dist = 1, 
     vertex.size = 5, vertex.label.cex = .8, layout = layout_with_fr)
```

```{r}
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1] 

# Remove layouts that do not apply to our graph.

layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree", layouts)]


par(mfrow=c(3,3), mar=c(1,1,1,1))

for (layout in layouts) {

  print(layout)

  l <- do.call(layout, list(encounters.ig)) 

  plot(encounters.ig, vertex.label = NA,      vertex.label.dist = 2, 
     vertex.size = 3, vertex.label.cex = 0.2, edge.arrow.mode=0, layout=l, main=layout) }
```

```{r}
edge_density(encounters.ig, loops=F)

transitivity(encounters.ig, type="global")  # net is treated as an undirected network

transitivity(as.undirected(encounters.ig, mode="collapse")) # same as above

triad_census(encounters.ig)
```


```{r}
diameter(encounters.ig, directed=F, weights=NA)
diameter(encounters.ig, directed=F)
diam <- get_diameter(encounters.ig, directed=T)

diam
class(diam)
as.vector(diam)

vcol <- rep("gray40", vcount(encounters.ig))

vcol[diam] <- "gold"

ecol <- rep("gray80", ecount(encounters.ig))

ecol[E(encounters.ig, path=diam)] <- "orange" 

# E(encounters.ig, path=diam) finds edges along a path, here 'diam'

plot(encounters.ig, vertex.color=vcol,  vertex.label = NA,      vertex.label.dist = 2, 
     vertex.size = 3, vertex.label.cex = 0.2, edge.color=ecol, vertex.name = NA, edge.arrow.mode=0)
```

#deg <- degree(encounters.ig, mode="all")

#hist(deg, breaks=1:vcount(encounters.ig)-1, main="Histogram of node degree")

#deg.dist <- degree_distribution(encounters.ig, cumulative=T, mode="all")

#plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange", 

     # xlab="Degree", ylab="Cumulative Frequency")

#degree(encounters.ig, mode="in")

centr_degree(encounters.ig, mode="in", normalized=T)

#closeness(encounters.ig, mode="all", weights=NA) 

centr_clo(encounters.ig, mode="all", normalized=T) 

eigen_centrality(encounters.ig, directed=F, weights=NA)

centr_eigen(encounters.ig, directed=F, normalized=T) 

betweenness(encounters.ig, directed=F, weights=NA)

edge_betweenness(encounters.ig, directed=F, weights=NA)

centr_betw(encounters.ig, directed=F, normalized=T)



```{r}
hs <- hub_score(encounters.ig, weights=NA)$vector

as <- authority_score(encounters.ig, weights=NA)$vector



par(mfrow=c(1,2))

 plot(encounters.ig,  vertex.label = NA,      vertex.label.dist = 2, 
     vertex.label.cex = 0.2,vertex.size=hs*50, main="Hubs")

 plot(encounters.ig,  vertex.label = NA,      vertex.label.dist = 2, 
   vertex.label.cex = 0.2,vertex.size=as*30, main="Authorities")
 
 mean_distance(encounters.ig, directed=F)
 
#distances(encounters.ig) # with edge weights

#distances(encounters.ig, weights=NA) # ignore weights

kc <- coreness(encounters.ig, mode="all")

plot(encounters.ig, vertex.size=kc*6, vertex.label=kc, vertex.color=kc)
```

```{r}
# Calculate assortativity
assortativity_degree(encounters.ig, directed=F)
```
assortativity_degree() checks assortativity in node degrees

# Create Gender Matrix
```{r}
gender <- attributes %>%
  select(NAME, GENDER) 
gender
```


```{r}
# first create a matrix
gender.m <- matrix(0, 
                   nrow = nrow(gender),
                   ncol = nrow(gender))
dim(gender.m)

for(i in 1:nrow(gender)){
  for(j in 1:nrow(gender)){
    gender.m[i, j] <- ifelse(gender$GENDER[i] == gender$GENDER[j], 1, 0)
  }
}

diag(gender.m) <- 0

colnames(gender.m) <- gender$NAME
rownames(gender.m) <- gender$NAME
```


gender.m + 2*encounters.m
