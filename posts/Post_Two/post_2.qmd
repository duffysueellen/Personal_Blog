---
title: "The Patient Provider Relationship, A Synthetic Social Network"
subtitle: "Network Analysis"
author: "Sue-Ellen Duffy"
date: "2024-04-21"
categories: [code, analysis]
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(igraph)
library(sna)
library(ggplot2)
library(patchwork)
```

Read in Data
```{r}
pat_attr <- read_csv("post_one_data/pat_attr.csv", 
    col_types = cols(...1 = col_skip()))
pro_attr <- read_csv("post_one_data/pro_attr.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaning <- read_csv("post_one_data//encounters_cleaning.csv", 
    col_types = cols(...1 = col_skip()))
encounter_attributes <- read_csv("post_one_data/encounter_attributes.csv", 
    col_types = cols(...1 = col_skip()))
encounters_el  <- read_csv("post_one_data/encounters_el.csv", 
    col_types = cols(...1 = col_skip()))
encounters_st_3 <- read_csv("post_one_data/encounters.st.3.csv", 
    col_types = cols(...1 = col_skip()))
attribute_list <- read.csv("post_one_data/attribute_list.csv")
```
# Graph Section

```{r}
#combine pro and pat attr
pat_attr$type <- "PATIENT"
pro_attr$type <- "PROVIDER"
both_attr <- bind_rows(pat_attr, pro_attr)
head(both_attr)
```




```{r}
# create bipartite network with attributes
encounters.st.3 <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list)
head(network.vertex.names( encounters.st.3))
```


```{r}
# load the sna library to get the gplot() function
library( sna )

# set the seed to reproduce the plot layout
set.seed( 507 )

# execute the plot
gplot(
  encounters.st.3,             
  gmode = "twomode",                     # indicate it is two modes
  usearrows = FALSE,                     # turn off the arrowheads
  vertex.cex=2,                          # size the nodes     
  label.cex=1.2,                         # size the labels
  main="Bipartite Graph of Encounters"                 # add a title
)

```


```{r}
incidence_graph <- graph_from_biadjacency_matrix(encounters.st.3)
```


```{r}
detach("package:sna")
```

```{r}
vertex_colors <- ifelse(attribute_list$GENDER == "F", "blue", "magenta")
V(incidence_graph)$shape <- ifelse(V(incidence_graph)$type, "square", "circle")

# Define edge colors based on COUNT attribute
edge_colors <- ifelse(encounters_el$COUNT < 5, "yellow", 
                      ifelse(encounters_el$COUNT >= 5 & encounters_el$COUNT <= 19, "lightblue", "red"))

# Check if the length of edge_colors matches the number of edges
if (length(edge_colors) == ecount(incidence_graph)) {
  # Set edge attributes based on counts
  E(incidence_graph)$color <- edge_colors
} else {
  print("Length of edge_colors does not match the number of edges in the graph.")
}

E(incidence_graph)$color <- edge_colors


plot(incidence_graph,
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 3, 
     vertex.color = vertex_colors,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Patient Provider Incidence Graph")
# Define legend for vertex colors
legend("bottomright",
       legend = c("Female", "Male"),  # You can customize these labels
       fill = c("magenta", "blue"),   # Fill colors corresponding to vertex colors
       title = "Nodes: Gender")              # Legend title

# Define legend for vertex shapes
legend("topright",
       legend = c("Patient", "Provider"),  # You can customize these labels
       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes
       title = "Nodes: Who")                     # Legend title

# Define legend for edge colors
legend("topleft",
       legend = c("1-4", "5-19", "20+"),  # You can customize these labels
       col = c("yellow", "lightblue", "red"),  # Line colors corresponding to edge colors
       lwd = 2,                            # Line width
       title = "Edges: # of Visits")              # Legend title

```

```{r}

#Calculating centrality
types <- V(incidence_graph)$type
deg<- degree(incidence_graph)
bet <- betweenness(incidence_graph)
clos <- closeness(incidence_graph)
eig <- eigen_centrality(incidence_graph)$vector

cent_df <- data.frame(types, deg, bet, clos, eig)
cent_df[order(cent_df$deg, decreasing = TRUE),]

```


```{r}
V(incidence_graph)$size <- degree(incidence_graph)

# set the seed to reproduce the plot layout
set.seed( 235 )

plot(incidence_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.color = vertex_colors,
     edge.color = "gray",
     edge.label = NA,
     vertex.label = NA,
     main = "Patient Provider Incidence Graph with Degree Information")
# Define legend for vertex colors
legend("bottomright",
       legend = c("Female", "Male"),  # You can customize these labels
       fill = c("magenta", "blue"),   # Fill colors corresponding to vertex colors
       title = "Nodes: Gender")              # Legend title

# Define legend for vertex shapes
legend("topright",
       legend = c("Patient", "Provider"),  # You can customize these labels
       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes
       title = "Nodes: Who")                     # Legend title

# Define legend for edge colors
legend("topleft", 
       legend = "Vertex Size", 
       pch = 1, 
       pt.cex = seq(0.5, 3, length.out = 5), 
       title = "Degree")
```





```{r}
triads_incidence<-igraph::triad_census(incidence_graph)
triads_incidence
igraph::dyad.census(incidence_graph)
transitivity(incidence_graph)
transitivity(incidence_graph, type = "global")
average.path.length(incidence_graph)
```

Component Structure and Membership

First, let's look at the network component structure. This gives a list with: membership by node, size of each component, and the total number of components.

```{r}
names(igraph::components(incidence_graph))
igraph::components(incidence_graph)$no # number of components
igraph::components(incidence_graph)$csize #Size of each component
```





