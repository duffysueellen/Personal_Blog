---
title: "POST 7"
subtitle: "Network Block Modeling - Geographical Comparisson"
author: "Sue-Ellen Duffy"
date: "2024-05-03"
categories: [code, analysis, block_model]
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(igraph)
library(sna)
library(intergraph)
library(ggplot2)
library(sf)
library(tidyverse)
library(tmap)
library(tigris)
library(stplanr)
```

This post will explore the Synthetic Mass network data in more detail.

# Read in Data

```{r}
#| warning: false
#| message: false
pat_attr <- read_csv("post5drug_data/pat_attr.csv", 
    col_types = cols(...1 = col_skip()))
pro_attr <- read_csv("post5drug_data/pro_attr.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaning <- read_csv("post5drug_data//encounters_cleaning.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaned <- read_csv("post5drug_data//encounters_cleaned.csv", 
    col_types = cols(...1 = col_skip()))
encounter_attributes <- read_csv("post5drug_data/encounter_attributes.csv", 
    col_types = cols(...1 = col_skip()))
encounters_el  <- read_csv("post5drug_data/encounters_el.csv", 
    col_types = cols(...1 = col_skip()))
encounters_st_3 <- read_csv("post5drug_data/encounters.st.3.csv", 
    col_types = cols(...1 = col_skip()))
attribute_list <- read.csv("post5drug_data/attribute_list.csv")
pat_blks6 <- readRDS("pat_blks6_results.rds")
prov_blks6 <- readRDS("prov_blks6_results.rds")
```

# Create bipartite network with attributes

```{r}
encounters.stat <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list)
```

```{r}
#create igraph
encounters.ig <- graph_from_biadjacency_matrix(encounters.stat)
```

```{r}
encounters.stat2 <- asNetwork(encounters.ig)
```

```{r}
projected_graph <- bipartite_projection(encounters.ig)
```


## PROVIDER

```{r}
#| warning: false
#| message: false
provider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))
library(intergraph)
detach("package:igraph")
library(statnet)
provider.stat <- asNetwork(projected_graph$proj2)

provider.se <- equiv.clust(provider_matrix,
 equiv.fun = "sedist",
 method = "hamming",
 mode = "graph",
 cluster.method = "complete")
```

```{r}
blk_model.provider.org <- blockmodel(provider_matrix,
 provider.se, k = 6)
```

```{r}
prov_blks6 <- readRDS("prov_blks6_results.rds")
```

```{r}
# blockmodel with optimized partition
prov_blk_mod <- blockmodel(provider_matrix, prov_blks6$best$best1$clu,
                      plabels = rownames(provider_matrix))
```

```{r}
#assign block membership to vertex attribute
provider.stat%v%"role"<-prov_blk_mod$block.membership[match(provider.stat%v%"vertex.names",prov_blk_mod$plabels)]

```

```{r}
attributes <- dumpAttr(provider.stat)
# Extracting roles and vertex names
roles <- attributes$vertex$role
vertex_names <- attributes$vertex$vertex.names

# Creating a dataframe
role_vertex_df <- data.frame(vertex.names = vertex_names, role = roles)

# Displaying the first few rows of the dataframe

head(role_vertex_df %>%
  arrange(desc(vertex.names)))

head(pro_attr %>%
  arrange(desc(NAME)))
```

```{r}
# Extracting vertex attributes
vertex_data <- data.frame(
  role = get.vertex.attribute(provider.stat, "role"),
  vertex.names = get.vertex.attribute(provider.stat, "vertex.names")
)

# Displaying the first few rows of the dataframe
head(vertex_data)

```



#So, lets geographically map this network

```{r}
library(leaflet)
```

#add lat and lon back into the attributes

```{r}
head(encounters_cleaned)
```

```{r}
df_reconnected <- merge(pro_attr, encounters_cleaned, by.x = "NAME", by.y = "PROVIDER", all.x = TRUE)

df_coords<- df_reconnected
```

```{r}
df_coords <- df_coords %>%
  select(NAME, GENDER, CITY, type, block, LAT.x, LON.x) %>%
  group_by(NAME)

# Keep only one row of each unique "NAME"
df_coords <- df_coords %>%
  distinct(NAME, .keep_all = TRUE) %>%
  rename(LAT = LAT.x) %>%
  rename(LON = LON.x)
```

```{r}
# Display the resulting dataframe
head(df_coords)
```

```{r}
pat_df_coords <- df_reconnected %>%
  select(PATIENT, GENDER.y, RACE, CITY.y,  LAT.y, LON.y) %>%
  group_by(PATIENT)

# Keep only one row of each unique "NAME"
pat_df_coords <- pat_df_coords %>%
  rename(NAME = PATIENT) %>%
  distinct(NAME, .keep_all = TRUE) %>%
  rename(CITY = CITY.y) %>%
  rename(GENDER = GENDER.y) %>%
  rename(LAT = LAT.y) %>%
  rename(LON = LON.y)
```

```{r}
head(pat_df_coords)
pat_df_coords$type <- "PATIENT"
pat_attr
```

```{r}
merged_df <- merge(pat_df_coords, pat_attr[, c("NAME", "block")], by = "NAME", all.x = TRUE)
both_df <- bind_rows(merged_df, df_coords)
head(both_df)
```

```{r}
pro_attr_list_zip <- do.call(list,df_coords)
pat_attr_list_zip <- do.call(list,pat_df_coords)
attribute_list_zip <- do.call(list, both_df)
```

```{r}
encounters.geo.stat <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list_zip)
```

```{r}
library(igraph)
#create igraph
encounters.geo.ig <- graph_from_biadjacency_matrix(encounters.geo.stat)
```

```{r}
encounters.geo.stat2 <- asNetwork(encounters.geo.ig)
```

```{r}
#| warning: false
#| message: false
detach("package:igraph")

# Extracting the coordinates from the network object
coords <- get.vertex.attribute(encounters.geo.stat, "LAT" )  # Assuming latitude is stored in an attribute named "lat"
coords_lon <- get.vertex.attribute(encounters.geo.stat, "LON")  # Assuming longitude is stored in an attribute named "lon"

# Creating a Leaflet map
leaflet() %>%
  addTiles() %>%
  # Adding markers for each coordinate
  addMarkers(lng = coords_lon, lat = coords)
```

```{r}

block <- get.vertex.attribute(encounters.geo.stat, "block")
# Assuming encounters.geo.stat is your network object containing the block attribute
# Assuming block is the name of the attribute containing block information
# Assuming coords_lon and coords are your longitude and latitude coordinates

# Define colors based on block values
colors <-  ifelse(block == "1", "red",
                 ifelse(block == "2", "orange",
                  ifelse(block == "3", "yellow",
                   ifelse(block == "4", "green",
                    ifelse(block == "5", "blue", 
                      ifelse(block == "6", "purple", 
                           "black")))))) # Add more colors as needed

# Creating a Leaflet map
leaflet() %>%
  addTiles() %>%
  # Adding markers for each coordinate with color based on block attribute
  addCircleMarkers(lng = coords_lon, lat = coords,
                   color = colors)

```

try for providers only?

```{r}
provider.geo.stat <- network(provider_matrix,
                       directed = FALSE,
                       matrix.type = "adjacency",
                       vertex.attr = pro_attr_list_zip)
```

```{r}
# Extracting the coordinates from the network object
pro_coords <- get.vertex.attribute(provider.geo.stat, "LAT")  # Assuming latitude is stored in an attribute named "lat"
pro_coords_lon <- get.vertex.attribute(provider.geo.stat, "LON")  # Assuming longitude is stored in an attribute named "lon"

# Creating a Leaflet map
leaflet() %>%
  addTiles() %>%
  # Adding markers for each coordinate
  addMarkers(lng = pro_coords_lon, lat = pro_coords)
```

```{r}

pro_block <- get.vertex.attribute(provider.geo.stat, "block")
# Assuming encounters.geo.stat is your network object containing the block attribute
# Assuming block is the name of the attribute containing block information
# Assuming coords_lon and coords are your longitude and latitude coordinates

# Define colors based on block values
pro_colors <- ifelse(block == "1", "red",
                 ifelse(block == "2", "orange",
                  ifelse(block == "3", "yellow",
                   ifelse(block == "4", "green",
                    ifelse(block == "5", "blue", 
                      ifelse(block == "6", "purple", 
                           "black"))))))  # Add more colors as needed

# Creating a Leaflet map
leaflet() %>%
  addTiles() %>%
  # Adding markers for each coordinate with color based on block attribute
  addCircleMarkers(lng = pro_coords_lon, lat = pro_coords,
                   color = pro_colors)

```
