---
title: "Data Cleaning, Exploration, and Network Analysis"
author: "Sue-Ellen Duffy"
date: "2024-04-29"
categories: [code, analysis]
---

*Research Question*

Does the demographic profile, including factors such as marital status, gender, and income, significantly impact the utilization of healthcare services among people who use drugs (PWUD), and does it influence the structure and strength of social network connections between PWUD and healthcare providers?

*Hypothesis*

1. Demographic Disparities in Healthcare Utilization: PWUD from marginalized demographics, such as lower-income groups or minority populations, may have reduced access to healthcare services compared to PWUD from more privileged demographics.

2. Gender Differences in Healthcare Utilization: Gender may influence the type and frequency of healthcare services utilized by PWUD, with potential differences between male and female PWUD in accessing preventive care, substance abuse treatment, or mental health services. Additionally, the gender of  providers may impact the type and frequency of healthcare service utilization among PWUD, with preferences or comfort levels potentially differing between male and female PWUD in seeking care from providers of the same or opposite gender.

3. Marital status may not only affect the size of social networks but also the type and frequency available within these networks, influencing healthcare-seeking behavior among PWUD. 

4. Geographic Accessibility and Healthcare Utilization: Demographic factors may interact with geographic location, with PWUD in rural or underserved areas facing distinct challenges in accessing healthcare services compared to those in urban or well-served regions. 

5. Healthcare Service Utilization as a Proxy for Overdose Risk: The utilization of a greater number of healthcare services among PWUD may serve as an indicator of increased risk of experiencing an overdose. This hypothesis suggests that PWUD who engage more frequently with healthcare services may be more likely to have experienced or be at higher risk of experiencing an overdose event, potentially due to underlying health issues, higher substance use severity, or other related factors. 

*Data Collection*

Data for this project were taken from Synthetic Mass, which creates Synthetic patient data from Synthea.

![](SyntheticMassLogo.png)

Criteria for patient download will be set to include patients that have experienced overdose, substance use treatment, and have other indicators in their health records that could be considered substance use. 

While a whole host of datasets are available within each download, I will focus this project on three datasets: patients.csv, providers.csv, and encounters.csv.

-   Patients and Providers will be the actors analyzed. The patient and provider datasets contain information on the person level details, with names and some demographic information, with more detail available for patients than providers.

-   Encounters will be the relationships analyzed. Encounters are appointments, visits, and clinical encounters and include notes on the visit including the date, reason, and cost breakdown.

    -   **Reminder: none of this data is real**, it is synthetic, so the personally identifiable information I share is not data on real people and cannot be used to identify real people.


*Data Cleaning*

Data for this project will be read in, reduced to only necessary data, cleaned (trim ws, recode variables, match across datasets, and other data cleaning processes)

*Data Analysis*

Analysis will primarily be of a two-mode network, developing an analysis of the patient-provider relationship. Weights will be assigned to the number of visits between patients and providers. 
Block Modeling analysis will be performed in one-mode networks of patient or providers to understand the structure of the networks. Blocks will be assigned to patients and providers as an attribute for analysis.


*Cleaning*

This post will primarily focus on data cleaning and data exploration with some exploration into social network analysis through transforming the data into an incidence matrix and plotting some attributes.

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(igraph)
library(sna)
library(statnet)
library(ggplot2)
library(patchwork)
```

# Read in Patient, Provider, and Encounter Data

## PATIENT DATA

The following table is the data available in the patient dataset.

```{r}
patients <- read_csv("synthea_sample_data_csv_latest/patients.csv")
```

```{r}
head(patients)
```

```{r}
str(patients)
summary(patients)
```

```{r}
#create NAME column combining FIRST and LAST names
patients <- patients %>%
    rename(PATIENT = Id) %>%
  unite(NAME, FIRST, LAST, sep = " ")

#trim whitespace NAME
patients$NAME <- trimws(patients$NAME)

#trim whitespace COUNTY
patients$CITY <- trimws(patients$CITY)

#clean up GENDER, RACE, ETHNICITY, and INCOME sections
patients <- patients %>%
  mutate(
    GENDER = tolower(GENDER),
    GENDER = case_when(
      GENDER %in% c("male", "m", "man") ~ "Male",
      GENDER %in% c("female", "f", "woman") ~ "Female",
      TRUE ~ NA_character_  # assign NA to any non-standard values
    ),
# city (patient)
    CITY =tolower(CITY),
# race (patient)
    RACE = tolower(RACE),  # convert race to lower case for consistency

# ethnicity (patient)
    ETHNICITY = tolower(ETHNICITY),  # convert ethnicity to lower case for consistency

# marital (patient)
    MARITAL = ifelse(MARITAL == "M", "Married",
                    ifelse(MARITAL == "D", "Divorced",
                    ifelse(MARITAL == "W", "Widowed",
                    ifelse(MARITAL == "S", "Single", MARITAL)))),

# income (patient)
    INCOME = as.numeric(INCOME)  # convert income to numeric if necessary
  ) %>%
  drop_na(GENDER, RACE) 
```

I am only keeping the demographic data below (gender, race, marital status, income, and age) which will be used as an attribute for each patient.

```{r}
#Create AGE from BIRTHDATE
patients <- patients %>%
  mutate(
    BIRTHDATE = as.Date(BIRTHDATE),  # Ensure 'dob' is in Date format
    AGE = interval(BIRTHDATE, today()) / years(1)  # Calculate age in years
  ) %>%
  mutate(
    AGE = floor(AGE)  # complete years only, removing decimal
  )
# Only keep patient name and demographics. This will be utilized as the attribute data for analysis.
pat_attr <- patients%>% 
  select(NAME, GENDER, RACE, MARITAL, CITY, INCOME, AGE)
head(pat_attr)
```

```{r}
pat_race <- ggplot(pat_attr,aes(RACE)) + geom_bar()
pat_gender <- ggplot(pat_attr,aes(GENDER)) + geom_bar()

pat_race + pat_gender + plot_annotation(title = "Patient Race and Gender Breakdown")

ggplot(pat_attr,aes(MARITAL)) + geom_bar() + labs(title = "Patient Marital Status")

pat_income <- ggplot(pat_attr, aes(x = 1, y = INCOME)) +
    geom_jitter(width = 0.2) +
    labs(x = NULL, y = "Income") +
    theme_minimal() + labs(title = "Patient Income")

summary(pat_attr$INCOME)

pat_age <- ggplot(pat_attr,aes(AGE)) + geom_bar()

ggplot(data = patients %>% 
         count(CITY) %>% 
         filter(n > 2),  # Filter for counts higher than 10
       aes(x = CITY, y = n)) +
  geom_bar(stat = "identity") +
  coord_flip() + labs(title = paste("Patients Cities", "\n*filtered to show >2 Patients per City"))
```

## PROVIDER DATA

The following table is the data available in the provider dataset.

```{r}
providers <- read_csv("synthea_sample_data_csv_latest/providers.csv") %>%
    rename(PROVIDER = Id)
head(providers)
```

I am only keeping the demographic data below (gender) which will be used as an attribute for each provider.

```{r}
#trim whitespace NAME
providers$NAME <- trimws(providers$NAME)
providers <- providers %>%
  mutate(
    GENDER = tolower(GENDER),
    GENDER = case_when(
      GENDER %in% c("male", "m", "man") ~ "Male",
      GENDER %in% c("female", "f", "woman") ~ "Female",
      TRUE ~ NA_character_  # assign NA to any non-standard values
    ),
    CITY =tolower(CITY)
  )
```

# DEEP CLEAN BREAK 
There is an incompatibility issue with PROVIDER and ENCOUNTER data found later in the process, so I will clean it now to provide the best picture of demographics of the actual dataset.

## ENCOUNTER DATA

```{r}
encounters <- read_csv("synthea_sample_data_csv_latest/encounters.csv")
head(encounters)
```

## Combine Patient, Provider, and Encounter Data

I am taking this step here so that I have a master dataset (encounters_attributes) and so that I can create an edgelist more easily.

```{r}
# Perform a left join to merge encounters with provider_attributes based on PROVIDER
encounters_cleaning <- left_join(encounters, providers, by = "PROVIDER")
# Replace the PROVIDER column with the corresponding names from the NAME column
encounters_cleaning$PROVIDER <- encounters_cleaning$NAME
# Remove the NAME column if no longer needed
encounters_cleaning <- encounters_cleaning %>%
  select(-NAME)
#Repeat for Provider
encounters_cleaning <- left_join(encounters_cleaning, patients, by = "PATIENT")
encounters_cleaning$PATIENT <- encounters_cleaning$NAME
encounters_cleaning <- encounters_cleaning %>%
  select(-NAME) 
#Clearly identify the Encounter ID
encounters_cleaning <- encounters_cleaning %>%
  rename(ENCOUNTER_ID = Id)
```

## Check Dimensions between Datasets

In later analysis I noticed that while there are more providers in the provider.csv, than there are providers listed in the encounters.csv. I will clean the data to only include providers that appear in the encounters.csv.

```{r}
check_prov <- encounters_cleaning %>%
  group_by(PROVIDER, GENDER.x) %>%
  summarize(COUNT = n())
check_prov_enc <- providers %>% 
  group_by(NAME, PROVIDER)
```

```{r}
dim(check_prov)
dim(check_prov_enc)
```

```{r}
# Perform semi-join to keep providers present in both datasets
providers_only_in_providers_df <- check_prov_enc %>%
  anti_join(check_prov, by = c("NAME" = "PROVIDER"))

# Print the dimensions of the filtered dataset
print(dim(providers_only_in_providers_df))
print(providers_only_in_providers_df)
```

```{r}
# Perform anti-join to remove providers only present in check_prov_enc from the original dataset
providers_filtered <- providers %>%
  anti_join(providers_only_in_providers_df, by = c("NAME" = "NAME"))

# Print the dimensions of the resulting dataset
print(dim(providers_filtered))
```
Result is 223, though it should be 222.

```{r}
# Find duplicate rows based on the NAME column
duplicate_rows <- providers_filtered[duplicated(providers_filtered$NAME) | duplicated(providers_filtered$NAME, fromLast = TRUE), ]

# Print the duplicate rows
print(duplicate_rows %>% select(PROVIDER, CITY))
```
Ah Maynard.

```{r}
# Find duplicate rows based on the NAME column
Maynard_rows <- encounters_cleaning %>% filter (PROVIDER == "Maynard46 Buckridge80")

# Print the duplicate rows
print(Maynard_rows %>% group_by(CITY.x)) %>% select(PROVIDER, CITY.x)
```

I'll choose the Maynard in Reading and remove the Maynard in Leominster.

```{r}
providers_filtered <- providers_filtered %>%
  filter(PROVIDER != "be12b8b5-2618-3d5e-a976-199d56505cd0")
# Print the dimensions of the resulting dataset
print(dim(providers_filtered))
```
```{r}
check_pat <- encounters_cleaning %>%
  group_by(PATIENT, GENDER.y) %>%
  summarize(COUNT = n())
check_pat_enc <- patients %>%
  group_by(NAME,PATIENT)
```

```{r}
dim(check_pat)
dim(check_pat_enc)
```
Patients have the same dimensions.

# Back to the Regularly Scheduled Data Cleaning
## PATIENT DATA 2

```{r}
ggplot(providers_filtered, aes(GENDER)) +geom_bar() + labs(title = "Provider Gender Breakdown")
ggplot(data = providers_filtered %>% 
         count(CITY) %>% 
         filter(n > 5),  # Filter for counts higher than 10
       aes(x = CITY, y = n)) +
  geom_bar(stat = "identity") +
  coord_flip() + labs(title = paste("Provider Cities", "\n*filtered to show >5 Providers per City"))
```

## ENCOUNTER DATA 2

```{r}
ggplot(encounters, aes(ENCOUNTERCLASS)) + geom_bar() + coord_flip()+ labs(title = "Type of Visit")
ggplot(data = encounters %>% 
         count(DESCRIPTION) %>% 
         filter(n > 50),  # Filter for counts higher than 10
       aes(x = DESCRIPTION, y = n)) +
  geom_bar(stat = "identity") +
  coord_flip() + labs(title = paste("Visit Description", "\n*filtered to show >50 visits"))

ggplot(data = encounters %>% 
         count(REASONDESCRIPTION) %>% 
         filter(n > 50),  # Filter for counts higher than 10
       aes(x = reorder(REASONDESCRIPTION, n), y = n)) +
  geom_bar(stat = "identity") +
  coord_flip() + labs(title = paste("Reason Patient Visited Provider", "\n*filtered to show >50 visits"))
```
Aside from NA (which does not stand for Narcotics Anonymous) the most frequent reason a patient visits a provider is for "Dependent drug abuse (disorder)". This is exactly what I would have anticipated seeing in this dataset, considering I called for only patients with a high likelyhood of being drug dependent. 

The second most frequent reason for visiting a provider is "Chronic kidney disease stage 4 (disorder)". One insight I have been given is that kidney disease may involve a lot of trips to the doctors for dialysis. I may look into this dataset to see if I'm right, but this is more a side tangent.

## Join Datasets

```{r}
# Perform a left join to merge encounters with provider_attributes based on PROVIDER
encounters_cleaned <- left_join(encounters, providers_filtered, by = "PROVIDER")
# Replace the PROVIDER column with the corresponding names from the NAME column
encounters_cleaned$PROVIDER <- encounters_cleaned$NAME
# Remove the NAME column if no longer needed
encounters_cleaned <- encounters_cleaned %>%
  select(-NAME)
#Repeat for Provider
encounters_cleaned <- left_join(encounters_cleaned, patients, by = "PATIENT")
encounters_cleaned$PATIENT <- encounters_cleaned$NAME
encounters_cleaned <- encounters_cleaned %>%
  select(-NAME) 
#Clearly identify the Encounter ID
encounters_cleaned <- encounters_cleaned %>%
  rename(ENCOUNTER_ID = Id)
```

```{r}
encounter_attributes <- encounters_cleaned %>%
  select(ENCOUNTER_ID, PATIENT, PROVIDER, GENDER.x, GENDER.y, RACE, MARITAL, ETHNICITY, INCOME, CITY.x, CITY.y)
# View the updated dataframe
head(encounter_attributes)
```

## EDGELIST

```{r}
# Create Edgelist & Assign Weight by Count of Encounter
encounters_el <- encounter_attributes %>%
  group_by(PATIENT, PROVIDER) %>%
  summarize(COUNT = n()) 

head(encounters_el)
dim(encounters_el)
```

## COMBINED ATTRIBUTE LIST

```{r}
#combine pro and pat attr
pat_attr$type <- "PATIENT"
pro_attr <- providers_filtered %>%
  select(NAME, GENDER, CITY)
pro_attr$type <- "PROVIDER"
both_attr <- bind_rows(pat_attr, pro_attr)
head(both_attr)
```

```{r}
#create combined attribute list
attribute_list <- do.call(list, both_attr)
```

## NETWORK

```{r}
# create bipartite network with attributes
encounters.st.3 <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list)
encounters.st.3
```

# Graph Section

```{r}
incidence_graph <- graph_from_biadjacency_matrix(encounters.st.3)
```

```{r}
# Create a graph from the edgelist
g <- graph_from_data_frame(encounters_el, 
                                        directed = FALSE)
map_g <- bipartite_mapping(g)
head(map_g$res)
head(map_g$type)
```

```{r}
# Assign overall Graph Color Scheme for Consistency

# Assign vertex attributes
V(g)$type <- c(rep("PATIENT", n_distinct(encounters_el$PATIENT)), 
                             rep("PROVIDER", n_distinct(encounters_el$PROVIDER)))

vertex_colors <- ifelse(attribute_list$GENDER == "Female", "pink", "turquoise")

vertex_shape <- ifelse(V(g)$type == "PATIENT", "circle", "square")
# Find the range of counts in the graph
count_range <- range(E(g)$COUNT)

# Define the edge widths based on the counts
edge_widths <- ifelse(E(g)$COUNT < 5, 1,
                      ifelse(E(g)$COUNT < 20, 50,
                             3 * (E(g)$COUNT - count_range[1]) / (count_range[2] - count_range[1])))
edge_widths <- edge_widths *300

edge_widths <- ifelse(E(g)$COUNT < 5, 0.5, ifelse(E(g)$COUNT < 20, 1, 2))
edge_colors <- ifelse(E(g)$COUNT < 5, "lightblue", 
                      ifelse(E(g)$COUNT <= 20, "blue",
                             ifelse(E(g)$COUNT <= 100, "darkblue","red")))
```

```{r}
plot(g, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 2, 
     vertex.color = vertex_colors,
     vertex.shape = vertex_shape,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     edge.width = edge_widths,
     edge.color = edge_colors,
     main = "SN Graph")
# Define legend for vertex colors
legend("bottomright",
       legend = c("Female", "Male"),  # You can customize these labels
       fill = c("pink", "turquoise"),   # Fill colors corresponding to vertex colors
       title = "Nodes: Gender")              # Legend title

# Define legend for vertex shapes
legend("topright",
       legend = c("Patient", "Provider"),  # You can customize these labels
       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes
       title = "Nodes: Who")                     # Legend title

# Define legend for edge colors
legend("topleft",
       legend = c("1-4", "5-19", "20-99", "100+"),  # You can customize these labels
       col = c("lightblue", "blue","darkblue", "red"),  # Line colors corresponding to edge colors
       lwd = 2,                            # Line width
       title = "Edges: # of Visits")              # Legend title
```

This graph shows a myriad of patient, provider relationships. One provider seems to be at the center of the graph, having the most edges reaching out to different patients. This central provider sees many patients only 1-4 times (indicated in yellow).

We see many providers close to the center that also have blue and red edges, indicating that they see 5-19 patients (blue) or more than 20 patients (red).

There are also many patients and providers that are not linked into the larger group, with pairings of one patient and one provider, one patient and two providers, one patient and three providers, two patients and three providers, two patients and four providers, and so on.

My next steps will include looking more deeply at these relationships through blocking, filtering, and density analysis.


Note To Self

TO DO:
- consider ego centric network
- clean up any other aspect for analysis
- analysis across Marital status
- can X reason for hospital visit predict where you go to your next visit?
- analyze the block structure and look for attributes
- sort by block x and look for matrixes there
- also centrality


```{r}
OVERDOSE <- encounters_cleaned %>%
  filter(REASONDESCRIPTION == "Drug overdose") %>%
  group_by(PATIENT) %>%
  summarize(COUNT = n())
```

Use to write CSV

#write csv

write.csv(pat_attr, "pat_attr.csv")

write.csv(pro_attr, "pro_attr.csv")

write.csv(encounters_cleaning, "encounters_cleaning.csv")

write.csv(encounters_cleaned, "encounters_cleaned.csv")

write.csv(encounter_attributes, "encounter_attributes.csv")

write.csv(attribute_list, "attribute_list.csv")

write.csv(encounters_el, "encounters_el.csv")

write.csv(encounters.st.3, "encounters.st.3.csv")
