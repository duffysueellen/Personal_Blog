---
title: "POST 3"
subtitle: "Network Block Modeling - Patients"
author: "Sue-Ellen Duffy"
date: "2024-04-27"
categories: [code, analysis, block_model]
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(igraph)
library(sna)
library(intergraph)
library(ggplot2)
```

This post will explore the Synthetic Mass network data in more detail.

# Read in Data

```{r}
#| warning: false
#| message: false
pat_attr <- read_csv("post1drug_data/pat_attr.csv", 
    col_types = cols(...1 = col_skip()))
pro_attr <- read_csv("post1drug_data/pro_attr.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaning <- read_csv("post1drug_data//encounters_cleaning.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaned <- read_csv("post1drug_data//encounters_cleaned.csv", 
    col_types = cols(...1 = col_skip()))
encounter_attributes <- read_csv("post1drug_data/encounter_attributes.csv", 
    col_types = cols(...1 = col_skip()))
encounters_el  <- read_csv("post1drug_data/encounters_el.csv", 
    col_types = cols(...1 = col_skip()))
encounters_st_3 <- read_csv("post1drug_data/encounters.st.3.csv", 
    col_types = cols(...1 = col_skip()))
attribute_list <- read.csv("post1drug_data/attribute_list.csv")
```

# Create bipartite network with attributes

```{r}
encounters.stat <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list)
```

```{r}
#create igraph
encounters.ig <- graph_from_biadjacency_matrix(encounters.stat)
```

```{r}
encounters.stat2 <- asNetwork(encounters.ig)
```

```{r}
projected_graph <- bipartite_projection(encounters.ig)
patient_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj1))

patient.stat <- asNetwork(projected_graph$proj1)

patient.se <- equiv.clust(patient_matrix,
 equiv.fun = "sedist",
 method = "hamming",
 mode = "graph",
 cluster.method = "complete")

names(patient.se)
```

```{r}

plot(patient.se, main = "Patient Block Model (6)")
rect.hclust(patient.se$cluster, k = 6)
```

```{r}
pat_blk_model.patient.org <- blockmodel(patient_matrix,
 patient.se, k = 6)
```

```{r}
 pat_blk_model.patient.org$block.model
```

```{r}
plot.block<-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){
 plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),
 main=main, drawlines = FALSE, cex.lab=cex.lab)
 for (j in 2:length(x$plabels)) if (x$block.membership[j] !=
 x$block.membership[j-1])
 abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)
 }
 
plot.block(pat_blk_model.patient.org, main = "Patient Block Model (6)")
```

```{r}
#pat_blks6 <- blockmodeling::optRandomParC(patient_matrix,k=6, rep=20, approaches="ss", blocks="com")
```

```{r}
# Save the blks2 object to a file
#saveRDS(pat_blks6, "pat_blks6_results.rds")

# Later, when you want to use it again, you can read it back into R
pat_blks6 <- readRDS("pat_blks6_results.rds")
```

```{r}
# blockmodel with optimized partition
pat_blk_mod <- blockmodel(patient_matrix, pat_blks6$best$best1$clu,
                      plabels = rownames(patient_matrix))
# print blockmodel object
pat_blk_mod$block.model
```

#assign attributes

```{r}
glimpse(pat_blk_mod)
```

```{r}

block_df <- data.frame(pat_blk_mod$plabels, pat_blk_mod$block.membership)

pat_attr <- pat_attr %>%
left_join(block_df, by = c("NAME" = "pat_blk_mod.plabels" ))

#write.csv(pat_attr, "pat_attr.csv")
role<-pat_blk_mod$block.membership[match(patient.stat%v%"vertex.names",pat_blk_mod$plabels)]
```

```{r}
plot.block(pat_blk_mod, main = "patient",
           cex.lab = .000001)
```

```{r}
set.seed(1)
#assign block membership to vertex attribute
patient.stat%v%"role"<-pat_blk_mod$block.membership[match(patient.stat%v%"vertex.names",pat_blk_mod$plabels)]
set.seed(1)
#plot network using "role" to color nodes
GGally::ggnet2(patient.stat,
               node.color="role", 
               node.size=sna::degree(patient.stat, gmode="graph"),
               node.alpha = .5)+ ggtitle(
               "Patient Block Model Network (6)")
```
## Attempt to recreate the above block model network
```{r}
attributes <- dumpAttr(patient.stat)
# Extracting roles and vertex names
roles <- attributes$vertex$role
vertex_names <- attributes$vertex$vertex.names

# Creating a dataframe
role_vertex_df <- data.frame(vertex.names = vertex_names, role = roles)

# Displaying the first few rows of the dataframe

head(role_vertex_df %>%
  arrange(desc(vertex.names)))

head(pat_attr %>%
  arrange(desc(NAME)))
```
```{r}
set.seed(1)
#plot network using "role" to color nodes
GGally::ggnet2(patient.stat,
               node.color= pat_attr$pat_blk_mod.block.membership, 
               node.size=sna::degree(patient.stat, gmode="graph"),
               node.alpha = .5) + ggtitle(
               "Patient Block Model Network (6)")

```


```{r}
library(ade4)
```

```{r}
encounters.adj.ig <- igraph::as_biadjacency_matrix(encounters.ig)

patients_jaccard <- dist.binary(encounters.adj.ig,
            method = 1, # method=1 Jaccard index
            upper = TRUE,
            diag = FALSE)

patients_jaccard <- as.matrix(patients_jaccard)
diag(patients_jaccard) <- 0

```

```{r}
#binarize
patients_jaccard_bi <- ifelse(patients_jaccard > 0.99, 1, 0)
```

```{r}
#create igraph object
patients_jaccard.ig <- graph_from_adjacency_matrix(patients_jaccard_bi, mode = "undirected")
summary(patients_jaccard.ig)
```

```{r}
plot(patients_jaccard.ig,  edge.width = 0.0002, edge.color = "lightgray",  vertex.size = 2, vertex.label = NA)
```

```{r}
# Load the igraph package
library(igraph)

# Create an igraph object from the blockmodel
g <- graph_from_adjacency_matrix(patient_matrix, mode = "undirected", weighted = FALSE)

# Plot the graph without labels
plot(g,      
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 2, 
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Patient Network")
```
