---
title: "POST 5"
subtitle: "Network Block Modeling - Geographical Comparisson"
author: "Sue-Ellen Duffy"
date: "2024-05-01"
categories: [code, analysis, block_model, provider network, geography]
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(igraph)
library(sna)
library(intergraph)
library(ggplot2)
```

This post will explore the Provider Network in more including replicating block membership and plotting cities as attributes

# Read in Data

```{r}
#| warning: false
#| message: false
pat_attr <- read_csv("pat_attr.csv", 
    col_types = cols(...1 = col_skip()))
pro_attr <- read_csv("pro_attr.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaning <- read_csv("post1drug_data//encounters_cleaning.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaned <- read_csv("post1drug_data//encounters_cleaned.csv", 
    col_types = cols(...1 = col_skip()))
encounter_attributes <- read_csv("post1drug_data/encounter_attributes.csv", 
    col_types = cols(...1 = col_skip()))
encounters_el  <- read_csv("post1drug_data/encounters_el.csv", 
    col_types = cols(...1 = col_skip()))
encounters_st_3 <- read_csv("post1drug_data/encounters.st.3.csv", 
    col_types = cols(...1 = col_skip()))
pat_blks6 <- readRDS("pat_blks6_results.rds")
prov_blks6 <- readRDS("prov_blks6_results.rds")
```

```{r}
#combine pro and pat attr
both_attr <- bind_rows(pat_attr, pro_attr)
head(both_attr)
```

```{r}
#create combined attribute list
attribute_list <- do.call(list, both_attr)
#write.csv(attribute_list, "attribute_list.csv")
```

# Create bipartite network with attributes

```{r}
encounters.stat <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list)
```

```{r}
#create igraph
encounters.ig <- graph_from_biadjacency_matrix(encounters.stat)
```

```{r}
encounters.stat2 <- asNetwork(encounters.ig)
```

```{r}
projected_graph <- bipartite_projection(encounters.ig)
```

## PROVIDER

```{r}
provider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))

provider.stat <- asNetwork(projected_graph$proj2)

provider.se <- equiv.clust(provider_matrix,
 equiv.fun = "sedist",
 method = "hamming",
 mode = "graph",
 cluster.method = "complete")
```

```{r}
blk_model.provider.org <- blockmodel(provider_matrix,
 provider.se, k = 6)
```

```{r}
prov_blks6 <- readRDS("prov_blks6_results.rds")
```

```{r}
# blockmodel with optimized partition
prov_blk_mod <- blockmodel(provider_matrix, prov_blks6$best$best1$clu,
                      plabels = rownames(provider_matrix))
```

```{r}
#assign block membership to vertex attribute
provider.stat%v%"role"<-prov_blk_mod$block.membership[match(provider.stat%v%"vertex.names",prov_blk_mod$plabels)]

#plot network using "role" to color nodes
GGally::ggnet2(provider.stat,
               node.color="role", 
               node.size=sna::degree(provider.stat, gmode="graph"),
               node.alpha = .5) + ggtitle("Provider 6 Block Model Network")
```

## Create New Attribute Lists

```{r}
#Include Block Membership in Provider Attribute List
pro_attr_list <- do.call(list, pro_attr)
```

```{r}
provider.st <- network(provider_matrix,
                       directed = FALSE,
                       matrix.type = "adjacency",
                       vertex.attr = pro_attr_list)
```

```{r}
provider_graph <- graph_from_biadjacency_matrix(provider.st)
```

```{r}
#assign colors
#colors <-  c("yellow", "blue", "green", "orange", "red", "purple")
#vertex_colors <- colors[pro_attr_list$block]
vertex_colors <- ifelse(pro_attr_list$CITY == "boston", "red", "white")

vertex_shape <- ifelse(pro_attr_list$CITY == "boston", "circle", "square")
```

```{r}
plot(provider_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 4, 
     vertex.color = vertex_colors,
     vertex.shape = vertex_shape,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "SN Graph")
```

What other cities are on the provider list. Boston is not being properly represented, I have a feeling

```{r}
table(sort(pro_attr$CITY))
```

Should have cleaned that earlier, but here we go!

```{r}
Boston_Neighborhoods <- c(
  "ALLSTON",
  "BRIGHTON",
  "BOSTON",
  "CHARLESTOWN",
  "DORCHESTER",
  "HYDE PARK",
  "JAMAICA PLAIN",
  "MATTAPAN",
  "ROSLINDALE",
  "ROXBURY",
  "West Roxbury",
  "WEST ROXBURY"
)
Boston_Neighborhoods <- tolower(Boston_Neighborhoods)
```

```{r}
#assign colors
vertex_colors <- ifelse(pro_attr_list$CITY %in% Boston_Neighborhoods, "red", "white")
vertex_shape <- ifelse(pro_attr_list$block == "1", "circle", "square")
```

```{r}
plot(provider_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 4, 
     vertex.color = vertex_colors,
     vertex.shape = vertex_shape,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Providers - RED = BOSTON")
```

So... the density of providers is not necessarily Boston related, by the looks of this graph

How about Highest populations

```{r}
largest_pop <- c(
"Boston",
"Worcester",
"Springfield",
"Cambridge",
"Lowell",
"Brockton",
"Quincy",
"Lynn",
"New Bedford",
"Fall River",
"Lawrence",
"Newton",
"Somerville",
"Framingham",
"Haverhill")
largest_pop <- tolower(largest_pop)
```

```{r}
#assign colors
vertex_color <-  ifelse(pro_attr_list$CITY %in% largest_pop, "red", "gray")
```

```{r}
plot(provider_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 4, 
     vertex.color = vertex_color,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Providers - circle = Largest Cities")

           # Legend title

# Define legend for vertex shapes
legend("topright",
       legend = c("Largest City", "Other"),  # You can customize these labels
       fill = c("red", "gray"),                      # Point shapes corresponding to vertex shapes
       title = "Nodes: Who")                     # Legend title

```


```{r}
#assign colors
vertex_color <-  ifelse(pro_attr_list$block == "1", "red",
                        ifelse(pro_attr_list$block == "2", "orange",
                               ifelse(pro_attr_list$block == "3", "yellow",
                                      ifelse(pro_attr_list$block == "4", "blue",
                                             ifelse(pro_attr_list$block == "5", "green",
                                                    ifelse(pro_attr_list$block == "6", "purple", "black"))))))
vertex_shape <- ifelse(pro_attr_list$CITY %in% largest_pop, "circle", "square")
```

```{r}
plot(provider_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 4, 
     vertex.color = vertex_color,
     vertex.shape = vertex_shape,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Providers - Blocks and Largest Cities")


# Define legend for vertex colors
legend("bottomright",
       legend = c("1", "2", "3", "4", "5", "6"),  # You can customize these labels
       fill = c("red", "orange", "yellow", "green", "blue", "purple"),   # Fill colors corresponding to vertex colors
       title = "Nodes: Blocks")              # Legend title

# Define legend for vertex shapes
legend("topright",
       legend = c("Largest City", "Other"),  # You can customize these labels
       pch = c(0, 1),                      # Point shapes corresponding to vertex shapes
       title = "Nodes: Who")                     # Legend title

```
I'm not sure why some of the colors are missing from this graph. 
Let's remove the "Largest City" attribute


```{r}
#assign colors
vertex_color <-  ifelse(pro_attr_list$block == "1", "red",
                        ifelse(pro_attr_list$block == "2", "orange",
                               ifelse(pro_attr_list$block == "3", "yellow",
                                      ifelse(pro_attr_list$block == "4", "blue",
                                             ifelse(pro_attr_list$block == "5", "green",
                                                    ifelse(pro_attr_list$block == "6", "purple", "black"))))))
```

```{r}
plot(provider_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 4, 
     vertex.color = vertex_color,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Providers - Blocks")


# Define legend for vertex colors
legend("bottomright",
       legend = c("1", "2", "3", "4", "5", "6"),  # You can customize these labels
       fill = c("red", "orange", "yellow", "green", "blue", "purple"),   # Fill colors corresponding to vertex colors
       title = "Nodes: Blocks")              # Legend title

```
