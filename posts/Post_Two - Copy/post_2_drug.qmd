---
title: "Network Exploration"
author: "Sue-Ellen Duffy"
date: "2024-04-21"
categories: [code, analysis]
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(igraph)
library(sna)
library(ggplot2)
library(patchwork)
```

This post will explore the Synthetic Mass network data in more detail.

# Read in Data

```{r}
#| warning: false
#| message: false
pat_attr <- read_csv("post1drug_data/pat_attr.csv", 
    col_types = cols(...1 = col_skip()))
pro_attr <- read_csv("post1drug_data/pro_attr.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaning <- read_csv("post1drug_data//encounters_cleaning.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaned <- read_csv("post1drug_data//encounters_cleaned.csv", 
    col_types = cols(...1 = col_skip()))
encounter_attributes <- read_csv("post1drug_data/encounter_attributes.csv", 
    col_types = cols(...1 = col_skip()))
encounters_el  <- read_csv("post1drug_data/encounters_el.csv", 
    col_types = cols(...1 = col_skip()))
encounters_st_3 <- read_csv("post1drug_data/encounters.st.3.csv", 
    col_types = cols(...1 = col_skip()))
attribute_list <- read.csv("post1drug_data/attribute_list.csv")
```

# Prep Data for Analysis

```{r}
#combine pro and pat attr
pat_attr$type <- "PATIENT"
pro_attr$type <- "PROVIDER"
both_attr <- bind_rows(pat_attr, pro_attr)
head(both_attr)
```

# Create bipartite network with attributes

```{r}
encounters.st.3 <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list)
encounters.st.3
head(network.vertex.names( encounters.st.3))
```

# Graphs

## Graphs with sna

```{r}
# load the sna library to get the gplot() function
library( sna )

# set the seed to reproduce the plot layout
set.seed( 507 )

# execute the plot
gplot(
  encounters.st.3,             
  gmode = "twomode",                     # indicate it is two modes
  usearrows = FALSE,                     # turn off the arrowheads
  vertex.cex=2,                          # size the nodes     
  label.cex=1.2,                         # size the labels
  main="Bipartite Graph of Encounters using SNA"                 # add a title
)

```

```{r}
incidence_graph <- graph_from_biadjacency_matrix(encounters.st.3)
```

detach("package:sna")

## Graphs with igraph

```{r}
vertex_colors <- ifelse(attribute_list$GENDER == "Female", "pink", "turquoise")
V(incidence_graph)$shape <- ifelse(V(incidence_graph)$type, "square", "circle")

# Define edge colors based on COUNT attribute
edge_colors <- ifelse(encounters_el$COUNT < 5, "lightblue", 
                      ifelse(encounters_el$COUNT <= 20, "blue", 
                              ifelse(encounters_el$COUNT <= 100, "darkblue", "red")))


# Check if the length of edge_colors matches the number of edges
if (length(edge_colors) == ecount(incidence_graph)) {
  # Set edge attributes based on counts
  E(incidence_graph)$color <- edge_colors
} else {
  print("Length of edge_colors does not match the number of edges in the graph.")
}

E(incidence_graph)$color <- edge_colors

# set the seed to reproduce the plot layout
set.seed( 235 )

plot(incidence_graph,
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 3, 
     vertex.color = vertex_colors,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Patient Provider Incidence Graph")
# Define legend for vertex colors
legend("bottomright",
       legend = c("Female", "Male"),  # You can customize these labels
       fill = c("pink", "turquoise"),   # Fill colors corresponding to vertex colors
       title = "Nodes: Gender")              # Legend title

# Define legend for vertex shapes
legend("topright",
       legend = c("Patient", "Provider"),  # You can customize these labels
       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes
       title = "Nodes: Who")                     # Legend title

# Define legend for edge colors
legend("topleft",
       legend = c("1-4", "5-19", "20-99", "100+"),  # You can customize these labels
       col = c("lightblue", "blue", "darkblue", "red"),  # Line colors corresponding to edge colors
       lwd = 2,                            # Line width
       title = "Edges: # of Visits")              # Legend title
```

```{r}
#Calculating centrality
types <- V(incidence_graph)$type
deg<- igraph::degree(incidence_graph)
bet <- igraph::betweenness(incidence_graph)
clos <- igraph::closeness(incidence_graph)
eig <- eigen_centrality(incidence_graph)$vector
const <- constraint(incidence_graph)
cent_df <- data.frame(types, deg, bet, clos, eig, const)
head(cent_df[order(cent_df$deg, decreasing = TRUE),], 10)

#provider only
pro_cent_df <- cent_df %>%
  filter(types =="TRUE")
head(pro_cent_df[order(pro_cent_df$deg, decreasing = TRUE),], 10)
summary(pro_cent_df)

#patient only
pat_cent_df <- cent_df %>%
  filter(types =="FALSE")
head(pat_cent_df[order(pat_cent_df$deg, decreasing = TRUE),], 10)
summary(pat_cent_df)

```


```{r}
V(incidence_graph)$size <- igraph::degree(incidence_graph)

# set the seed to reproduce the plot layout
set.seed( 235 )

plot(incidence_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.color = vertex_colors,
     edge.color = "gray",
     edge.label = NA,
     vertex.label = NA,
     main = "Patient Provider Incidence Graph with Degree Information")
# Define legend for vertex colors
legend("bottomright",
       legend = c("Female", "Male"),  # You can customize these labels
       fill = c("pink", "turquoise"),   # Fill colors corresponding to vertex colors
       title = "Nodes: Gender")              # Legend title

# Define legend for vertex shapes
legend("topright",
       legend = c("Patient", "Provider"),  # You can customize these labels
       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes
       title = "Nodes: Who")                     # Legend title

# Define legend for edge colors
legend("topleft", 
       legend = "Vertex Size", 
       pch = 1, 
       pt.cex = seq(0.5, 3, length.out = 5), 
       title = "Degree")
```

Here we can see there is one Provider that sees the most patients, with degree centrality = 28. The next largest degree centrality are in the 5 to 7 range and the majority of those nodes are patients.

```{r}
V(incidence_graph)$size <- igraph::closeness(incidence_graph)

# set the seed to reproduce the plot layout
set.seed( 235 )

plot(incidence_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.color = vertex_colors,
     edge.color = "gray",
     edge.label = NA,
     vertex.label = NA,
     main = "Patient Provider Incidence Graph with Closeness Information")
# Define legend for vertex colors
legend("bottomright",
       legend = c("Female", "Male"),  # You can customize these labels
       fill = c("magenta", "blue"),   # Fill colors corresponding to vertex colors
       title = "Nodes: Gender")              # Legend title

# Define legend for vertex shapes
legend("topright",
       legend = c("Patient", "Provider"),  # You can customize these labels
       pch = c(1, 0),                      # Point shapes corresponding to vertex shapes
       title = "Nodes: Who")                     # Legend title

# Define legend for edge colors
legend("topleft", 
       legend = "Vertex Size", 
       pch = 1, 
       pt.cex = seq(0.5, 3, length.out = 5), 
       title = "Closeness")
```

Here we see two of the dyads on the outer right side of this incidence graph have the largest closeness score. This is because their network is complete (they are both connected to one another).

# Triad Dyad Census

```{r}
triads_incidence<-igraph::triad_census(incidence_graph)
triads_incidence
igraph::dyad_census(incidence_graph)
transitivity(incidence_graph)
transitivity(incidence_graph, type = "global")
mean_distance(incidence_graph)
```

# Component Structure and Membership

First, let's look at the network component structure. This gives a list with: membership by node, size of each component, and the total number of components.

```{r}
names(igraph::components(incidence_graph))
igraph::components(incidence_graph)$no # number of components
igraph::components(incidence_graph)$csize #Size of each component
degree.wt=strength(incidence_graph)
```

# Graph Cluster

```{r}
glou <- graph_from_data_frame(encounters_el[, 1:2], directed = FALSE)
lou <- cluster_louvain(glou)
set.seed(1)
plot(lou, glou, vertex.label = NA, vertex.size=2)
set.seed(1)
plot(lou, glou, vertex.label = NA, vertex.size=5, mark.groups = NULL)
set.seed(1)
plot(lou, glou, vertex.label = NA, vertex.size = 5, mark.border = NA)
```

```{r}
glou <- graph_from_data_frame(encounters_el[, 1:2], directed = FALSE)
walktrap <- cluster_leading_eigen(glou)
set.seed(1)
plot(walktrap, glou, vertex.label = NA, vertex.size=2)
set.seed(1)
plot(walktrap, glou, vertex.label = NA, vertex.size=5, mark.groups = NULL)
set.seed(1)
plot(walktrap, glou, vertex.label = NA, vertex.size = 5, mark.border = NA)
```

# Graph Providers and Patients Separately

```{r}
projected_graph <- bipartite_projection(incidence_graph)
#providers
head(projected_graph$proj2)
provider_communities <- cluster_louvain(projected_graph$proj2)
provider_membership <- membership(provider_communities)
head(provider_membership,10)
```

```{r}
#patients
head(projected_graph$proj1)
patient_communities <- cluster_louvain(projected_graph$proj1)
patient_membership <- membership(patient_communities)
head(patient_membership, 10)
```

```{r}
plot(projected_graph$proj1, vertex.color = membership(patient_communities),
     vertex.label = NA, edge.arrow.size = 0.5)
```

```{r}
plot(projected_graph$proj2, vertex.color = membership(provider_communities),
     vertex.label = NA, edge.arrow.size = 0.5)
```
