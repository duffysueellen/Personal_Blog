---
title: "POST 6"
subtitle: "Network Block Modeling - Geographical Comparisson"
author: "Sue-Ellen Duffy"
date: "2024-05-02"
categories: [code, analysis, block_model]
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(igraph)
library(sna)
library(intergraph)
library(ggplot2)
library(sf)
library(tidyverse)
library(tmap)
library(tigris)
library(stplanr)
```

This post will explore block attributes in the Provider Network data.

# Read in Data

```{r}
#| warning: false
#| message: false
pat_attr <- read_csv("post5drug_data/pat_attr.csv", 
    col_types = cols(...1 = col_skip()))
pro_attr <- read_csv("post5drug_data/pro_attr.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaning <- read_csv("post5drug_data//encounters_cleaning.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaned <- read_csv("post5drug_data//encounters_cleaned.csv", 
    col_types = cols(...1 = col_skip()))
encounter_attributes <- read_csv("post5drug_data/encounter_attributes.csv", 
    col_types = cols(...1 = col_skip()))
encounters_el  <- read_csv("post5drug_data/encounters_el.csv", 
    col_types = cols(...1 = col_skip()))
encounters_st_3 <- read_csv("post5drug_data/encounters.st.3.csv", 
    col_types = cols(...1 = col_skip()))
attribute_list <- read.csv("post5drug_data/attribute_list.csv")
pat_blks6 <- readRDS("pat_blks6_results.rds")
prov_blks6 <- readRDS("prov_blks6_results.rds")
```

# Create bipartite network with attributes

```{r}
encounters.stat <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list)
```

```{r}
#create igraph
encounters.ig <- graph_from_biadjacency_matrix(encounters.stat)
```

```{r}
encounters.stat2 <- asNetwork(encounters.ig)
```

```{r}
projected_graph <- bipartite_projection(encounters.ig)
```

```{r}
colnames(encounters_cleaned)
```

## PROVIDER

```{r}
#| warning: false
#| message: false
provider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))
library(intergraph)
detach("package:igraph")
library(statnet)
provider.stat <- asNetwork(projected_graph$proj2)

provider.se <- equiv.clust(provider_matrix,
 equiv.fun = "sedist",
 method = "hamming",
 mode = "graph",
 cluster.method = "complete")
```

```{r}
blk_model.provider.org <- blockmodel(provider_matrix,
 provider.se, k = 6)
```

```{r}
prov_blks6 <- readRDS("prov_blks6_results.rds")
```

```{r}
# blockmodel with optimized partition
prov_blk_mod <- blockmodel(provider_matrix, prov_blks6$best$best1$clu,
                      plabels = rownames(provider_matrix))
```

```{r}
#assign block membership to vertex attribute
provider.stat%v%"role"<-prov_blk_mod$block.membership[match(provider.stat%v%"vertex.names",prov_blk_mod$plabels)]

#plot network using "role" to color nodes
GGally::ggnet2(provider.stat,
               node.color="role", 
               node.shape = pro_attr$GENDER,
               color.palette = "Set1", # color palette 
               color.legend = "Block", # legend title for node color
               node.size=sna::degree(provider.stat, gmode= "graph"),
               node.alpha = 1) + ggtitle("Provider Block Model Network (6)")
```

```{r}
# block model graph using ggnet2
GGally::ggnet2(provider.stat,
       node.color = "role",
        node.size=sna::degree(provider.stat, gmode= "graph"),
       node.alpha = 1,
       size.legend = "Degree", # legend title for node size
       color.palette = "Set3", # color palette 
       color.legend = "Block", # legend title for node color
       legend.position = "bottom", # legend at the bottom
       label = NA, # node labels
       label.size = 3, # label size
       label.trim = TRUE # trim long labels
) +
  ggtitle("Provider Block Model Network (6)") +
  theme(plot.title = element_text(hjust = 0.5)) # center align plot title
```

```{r}
# block model graph using ggnet2
GGally::ggnet2(provider.stat,
       node.color = "role",
       node.size=sna::degree(provider.stat, gmode= "graph"),
       node.alpha = 1,
       size.legend = "Degree", # legend title for node size
       color.palette = "Set3", # color palette 
       color.legend = "Block", # legend title for node color
       legend.position = "bottom", # legend at the bottom
       label = NA, # node labels
       label.size = 3, # label size
       label.trim = TRUE # trim long labels
) +
  ggtitle("Provider Block Model Network (6)") +
  theme(plot.title = element_text(hjust = 0.5)) # center align plot title
```


```{r}
GGally::ggnet2(provider.stat,
               node.color=pro_attr$block, 
               node.size=sna::degree(provider.stat, gmode="graph"),
               node.alpha = .5) + ggtitle("Provider Block Model Network (6)")
```

Hmm, this doesn't look at all like the graph showing blocks... Not sure what's going on here. I'll attempt to assign attributes a different way.

```{r}
attributes <- dumpAttr(provider.stat)
# Extracting roles and vertex names
roles <- attributes$vertex$role
vertex_names <- attributes$vertex$vertex.names

# Creating a dataframe
role_vertex_df <- data.frame(vertex.names = vertex_names, role = roles)

# Displaying the first few rows of the dataframe

head(role_vertex_df %>%
  arrange(desc(vertex.names)))

head(pro_attr %>%
  arrange(desc(NAME)))
```

```{r}
# Extracting vertex attributes
vertex_data <- data.frame(
  role = get.vertex.attribute(provider.stat, "role"),
  vertex.names = get.vertex.attribute(provider.stat, "vertex.names")
)

# Displaying the first few rows of the dataframe
head(vertex_data)

```

## Create New Attribute Lists

```{r}
pro_attr_list <- do.call(list, pro_attr)
```

```{r}
provider.st <- network(provider_matrix,
                       directed = FALSE,
                       matrix.type = "adjacency",
                       vertex.attr = pro_attr_list)
```

# BLOCK ATTRIBUTES:

Where are the blocks located? Are there any overlaps?

```{r}
# CITY
# Define a function to summarize encounters for a given block
summarize_block <- function(block_num, pro_attr, encounters_cleaned) {
  # Filter provider names for the given block
  block_providers <- pro_attr %>%
    filter(block == block_num) %>%
    pull(NAME)
  
  # Filter encounters for providers in the given block
  block_df <- encounters_cleaned %>%
    filter(PROVIDER %in% block_providers) %>%
    group_by(CITY.x) %>%
    summarize(COUNT = n()) %>%
    ungroup() %>%
    arrange(desc(COUNT))
  
  # Calculate the total count of encounters
  total_count <- sum(block_df$COUNT)
  
  # Calculate the percentage of total encounters for each ENCOUNTERCLASS
  block_df <- block_df %>%
    mutate(PERCENT = (COUNT / total_count) * 100)
  
  return(block_df)
}

# Call the function for each block and store the results in a list
block_results <- lapply(1:6, function(block_num) {
  summarize_block(block_num, pro_attr, encounters_cleaned)
})

# View the summary data for each block
names(block_results) <- paste0("Block", 1:6)
print(block_results)

```

Block 1 is right outside of Boston Block 2, only one provider, Fitchburg. Block 3 is everywhere. Block 4 is Heavy Waltham representation Block 5 is a bit of everyone. Block 6 is Northshore.

```{r}
library(treemapify)
# Combine the data frames into one long data frame
combined_df <- bind_rows(block_results, .id = "Block")

# View the combined data frame
print(combined_df)

ggplot(combined_df, aes(x= Block, y = PERCENT, fill = CITY.x)) + geom_bar(stat = "identity") +
    labs(title = "Encounters by City of Provider and Block",
         x = "Description",
         y = "Percent of Each Block",
         fill = "GENDER") +
    theme_minimal()

ggplot(combined_df, aes(area=PERCENT, fill=CITY.x)) + geom_treemap() + facet_wrap("Block") +   labs(title = "Encounters by City of Provider and Block")
```


What are the types of encounters within the blocks?

```{r}
# ENCOUNTERCLASS
# Define a function to summarize encounters for a given block
summarize_block <- function(block_num, pro_attr, encounters_cleaned) {
  # Filter provider names for the given block
  block_providers <- pro_attr %>%
    filter(block == block_num) %>%
    pull(NAME)
  
  # Filter encounters for providers in the given block
  block_df <- encounters_cleaned %>%
    filter(PROVIDER %in% block_providers) %>%
    group_by(ENCOUNTERCLASS) %>%
    summarize(COUNT = n()) %>%
    ungroup() %>%
    arrange(desc(COUNT))
  
  # Calculate the total count of encounters
  total_count <- sum(block_df$COUNT)
  
  # Calculate the percentage of total encounters for each ENCOUNTERCLASS
  block_df <- block_df %>%
    mutate(PERCENT = (COUNT / total_count) * 100)
  
  return(block_df)
}

# Call the function for each block and store the results in a list
block_results <- lapply(1:6, function(block_num) {
  summarize_block(block_num, pro_attr, encounters_cleaned)
})

# View the summary data for each block
names(block_results) <- paste0("Block", 1:6)
print(block_results)

```
```{r}
library(treemapify)
# Combine the data frames into one long data frame
combined_df <- bind_rows(block_results, .id = "Block")

# View the combined data frame
print(combined_df)

ggplot(combined_df, aes(x= Block, y = PERCENT, fill = ENCOUNTERCLASS)) + geom_bar(stat = "identity") +
    labs(title = "Class of Encounters by Blocks",
         x = "Description",
         y = "Percent of Each Block",
         fill = "GENDER") +
    theme_minimal()

ggplot(combined_df, aes(area=PERCENT, fill=ENCOUNTERCLASS)) + geom_treemap() + facet_wrap("Block") +   labs(title = "Class of Encounters by Blocks")
```


# DESCRIPTION
```{r}

encounters_cleaned <- encounters_cleaned %>%
  mutate(
    DESCRIPTION = tolower(DESCRIPTION))
    
# DESCRIPTION
# Define a function to summarize encounters for a given block
summarize_block <- function(block_num, pro_attr, encounters_cleaned) {
  # Filter provider names for the given block
  block_providers <- pro_attr %>%
    filter(block == block_num) %>%
    pull(NAME)
  
  # Filter encounters for providers in the given block
  block_df <- encounters_cleaned %>%
    filter(PROVIDER %in% block_providers) %>%
    group_by(DESCRIPTION) %>%
    summarize(COUNT = n()) %>%
    ungroup() %>%
    arrange(desc(COUNT))
  
  # Calculate the total count of encounters
  total_count <- sum(block_df$COUNT)
  
  # Calculate the percentage of total encounters for each DESCRIPTION
  block_df <- block_df %>%
    mutate(PERCENT = (COUNT / total_count) * 100)
  
  return(block_df)
}

# Call the function for each block and store the results in a list
block_results <- lapply(1:6, function(block_num) {
  summarize_block(block_num, pro_attr, encounters_cleaned)
})

# View the summary data for each block
names(block_results) <- paste0("Block", 1:6)
print(block_results)

```

```{r}
library(treemapify)
# Combine the data frames into one long data frame
combined_df <- bind_rows(block_results, .id = "Block")

# View the combined data frame
print(combined_df)

ggplot(combined_df, aes(x= Block, y = PERCENT, fill = DESCRIPTION)) + geom_bar(stat = "identity") +
    labs(title = "Encounters by Gender of Patient and Block",
         x = "Description",
         y = "Percent of Each Block",
         fill = "GENDER") +
    theme_minimal()

ggplot(combined_df, aes(area=PERCENT, fill=DESCRIPTION)) + geom_treemap() + facet_wrap("Block")
```




```{r}
# GENDER of PROVIDERS
# Define a function to summarize encounters for a given block
summarize_block <- function(block_num, pro_attr, encounters_cleaned) {
  # Filter provider names for the given block
  block_providers <- pro_attr %>%
    filter(block == block_num) %>%
    pull(NAME)
  
  # Filter encounters for providers in the given block
  block_df <- encounters_cleaned %>%
    filter(PROVIDER %in% block_providers) %>%
    group_by(GENDER.x) %>%
    summarize(COUNT = n()) %>%
    ungroup() %>%
    arrange(desc(COUNT))
  
  # Calculate the total count of encounters
  total_count <- sum(block_df$COUNT)
  
  # Calculate the percentage of total encounters for each GENDER
  block_df <- block_df %>%
    mutate(PERCENT = (COUNT / total_count) * 100)
  
  return(block_df)
}

# Call the function for each block and store the results in a list
block_results <- lapply(1:6, function(block_num) {
  summarize_block(block_num, pro_attr, encounters_cleaned)
})

# View the summary data for each block
names(block_results) <- paste0("Block", 1:6)
print(block_results)

```
```{r}
# Combine the data frames into one long data frame
combined_df <- bind_rows(block_results, .id = "Block")

# View the combined data frame
print(combined_df)

ggplot(combined_df, aes(x= GENDER.x, y = PERCENT, fill = GENDER.x)) + geom_bar(stat = "identity") +
    labs(title = "Percent of Provider Encounters by Gender and Block",
         x = "Gender of Provider",
         y = "Percent of Each Block",
         fill = "GENDER") +
    theme_minimal() + facet_wrap("Block")
```



```{r}
# GENDER of PATIENTS
# Define a function to summarize encounters for a given block
summarize_block <- function(block_num, pro_attr, encounters_cleaned) {
  # Filter provider names for the given block
  block_providers <- pro_attr %>%
    filter(block == block_num) %>%
    pull(NAME)
  
  # Filter encounters for providers in the given block
  block_df <- encounters_cleaned %>%
    filter(PROVIDER %in% block_providers) %>%
    group_by(GENDER.y) %>%
    summarize(COUNT = n()) %>%
    ungroup() %>%
    arrange(desc(COUNT))
  
  # Calculate the total count of encounters
  total_count <- sum(block_df$COUNT)
  
  # Calculate the percentage of total encounters for each GENDER
  block_df <- block_df %>%
    mutate(PERCENT = (COUNT / total_count) * 100)
  
  return(block_df)
}

# Call the function for each block and store the results in a list
block_results <- lapply(1:6, function(block_num) {
  summarize_block(block_num, pro_attr, encounters_cleaned)
})

# View the summary data for each block
names(block_results) <- paste0("Block", 1:6)
print(block_results)

```

```{r}
# Combine the data frames into one long data frame
combined_df <- bind_rows(block_results, .id = "Block")

# View the combined data frame
print(combined_df)

ggplot(combined_df, aes(x= GENDER.y, y = PERCENT, fill = GENDER.y)) + geom_bar(stat = "identity") +
    labs(title = "Encounters by Gender of Patient and Block",
         x = "Gender of Patient",
         y = "Percent of Each Block",
         fill = "GENDER") +
    theme_minimal() + facet_wrap("Block")
```


```{r}
# RACE of PATIENTS
# Define a function to summarize encounters for a given block
summarize_block <- function(block_num, pro_attr, encounters_cleaned) {
  # Filter provider names for the given block
  block_providers <- pro_attr %>%
    filter(block == block_num) %>%
    pull(NAME)
  
  # Filter encounters for providers in the given block
  block_df <- encounters_cleaned %>%
    filter(PROVIDER %in% block_providers) %>%
    group_by(RACE) %>%
    summarize(COUNT = n()) %>%
    ungroup() %>%
    arrange(desc(COUNT))
  
  # Calculate the total count of encounters
  total_count <- sum(block_df$COUNT)
  
  # Calculate the percentage of total encounters for each RACE
  block_df <- block_df %>%
    mutate(PERCENT = (COUNT / total_count) * 100)
  
  return(block_df)
}

# Call the function for each block and store the results in a list
block_results <- lapply(1:6, function(block_num) {
  summarize_block(block_num, pro_attr, encounters_cleaned)
})

# View the summary data for each block
names(block_results) <- paste0("Block", 1:6)
print(block_results)

```

```{r}
# MARITAL of PATIENTS
# Define a function to summarize encounters for a given block
summarize_block <- function(block_num, pro_attr, encounters_cleaned) {
  # Filter provider names for the given block
  block_providers <- pro_attr %>%
    filter(block == block_num) %>%
    pull(NAME)
  
  # Filter encounters for providers in the given block
  block_df <- encounters_cleaned %>%
    filter(PROVIDER %in% block_providers) %>%
    group_by(MARITAL) %>%
    summarize(COUNT = n()) %>%
    ungroup() %>%
    arrange(desc(COUNT))
  
  # Calculate the total count of encounters
  total_count <- sum(block_df$COUNT)
  
  # Calculate the percentage of total encounters for each MARITAL
  block_df <- block_df %>%
    mutate(PERCENT = (COUNT / total_count) * 100)
  
  return(block_df)
}

# Call the function for each block and store the results in a list
block_results <- lapply(1:6, function(block_num) {
  summarize_block(block_num, pro_attr, encounters_cleaned)
})

# View the summary data for each block
names(block_results) <- paste0("Block", 1:6)
print(block_results)

```

```{r}
# AGE of PATIENTS
# Define a function to summarize encounters for a given block
summarize_block <- function(block_num, pro_attr, encounters_cleaned) {
  # Filter provider names for the given block
  block_providers <- pro_attr %>%
    filter(block == block_num) %>%
    pull(NAME)
  
  # Filter encounters for providers in the given block
  block_df <- encounters_cleaned %>%
    filter(PROVIDER %in% block_providers) %>%
    group_by(AGE) %>%
    summarize(COUNT = n()) %>%
    ungroup() %>%
    arrange(AGE)
  
  # Calculate the total count of encounters
  total_count <- sum(block_df$COUNT)
  
  # Calculate the percentage of total encounters for each AGE
  block_df <- block_df %>%
    mutate(PERCENT = (COUNT / total_count) * 100)
  
  return(block_df)
}

# Call the function for each block and store the results in a list
block_results <- lapply(1:6, function(block_num) {
  summarize_block(block_num, pro_attr, encounters_cleaned)
})

# View the summary data for each block
names(block_results) <- paste0("Block", 1:6)
print(block_results) 

```

Group 2: Ted

```{r}
Ted955 <- encounters_cleaned %>% 
    filter(PROVIDER == "Ted955 Reilly981") %>% 
    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%
  summarize(COUNT = n()) 
Ted955%>%
  arrange(desc(COUNT))
```

Gonna go ahead and say Ted's a Cardiologist
