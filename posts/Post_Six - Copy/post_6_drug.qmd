---
title: "POST 6"
subtitle: "Network Block Modeling - Geographical Comparisson"
author: "Sue-Ellen Duffy"
date: "2024-05-03"
categories: [code, analysis, block_model]
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(igraph)
library(sna)
library(intergraph)
library(ggplot2)
library(sf)
library(tidyverse)
library(tmap)
library(tigris)
library(stplanr)
```

This post will explore the Synthetic Mass network data in more detail.

# Read in Data

```{r}
#| warning: false
#| message: false
pat_attr <- read_csv("post5drug_data/pat_attr.csv", 
    col_types = cols(...1 = col_skip()))
pro_attr <- read_csv("post5drug_data/pro_attr.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaning <- read_csv("post5drug_data//encounters_cleaning.csv", 
    col_types = cols(...1 = col_skip()))
encounters_cleaned <- read_csv("post5drug_data//encounters_cleaned.csv", 
    col_types = cols(...1 = col_skip()))
encounter_attributes <- read_csv("post5drug_data/encounter_attributes.csv", 
    col_types = cols(...1 = col_skip()))
encounters_el  <- read_csv("post5drug_data/encounters_el.csv", 
    col_types = cols(...1 = col_skip()))
encounters_st_3 <- read_csv("post5drug_data/encounters.st.3.csv", 
    col_types = cols(...1 = col_skip()))
attribute_list <- read.csv("post5drug_data/attribute_list.csv")
pat_blks6 <- readRDS("pat_blks6_results.rds")
prov_blks6 <- readRDS("prov_blks6_results.rds")
```

# Create bipartite network with attributes

```{r}
encounters.stat <- network(encounters_el,
                         directed = FALSE,
                         bipartite = TRUE,
                         matrix.type = "edgelist",
                         vertex.attr = attribute_list)
```

```{r}
#create igraph
encounters.ig <- graph_from_biadjacency_matrix(encounters.stat)
```

```{r}
encounters.stat2 <- asNetwork(encounters.ig)
```

```{r}
projected_graph <- bipartite_projection(encounters.ig)
```

```{r}
colnames(encounters_cleaned)
```

## PATIENT

```{r}
patient_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj1))

patient.stat <- asNetwork(projected_graph$proj1)

patient.se <- equiv.clust(patient_matrix,
 equiv.fun = "sedist",
 method = "hamming",
 mode = "graph",
 cluster.method = "complete")
```

```{r}
pat_blk_model.patient.org <- blockmodel(patient_matrix,
 patient.se, k = 4)
```

```{r}
plot.block<-function(x=pat_blk_mod, main=NULL, cex.lab=.00001,show_labels = FALSE){
 plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),
 main=main, drawlines = FALSE, cex.lab=cex.lab)
 for (j in 2:length(x$plabels)) if (x$block.membership[j] !=
 x$block.membership[j-1])
 abline(v = j- 0.5, h = j- 0.5, lty = 3, xpd=FALSE)
 }
 
plot.block(pat_blk_model.patient.org, main = "patient")
```

```{r}
pat_blks6 <- readRDS("pat_blks6_results.rds")
```

```{r}
# blockmodel with optimized partition
pat_blk_mod <- blockmodel(patient_matrix, pat_blks6$best$best1$clu,
                      plabels = rownames(patient_matrix))
```

```{r}
#assign block membership to vertex attribute
patient.stat%v%"role"<-pat_blk_mod$block.membership[match(patient.stat%v%"vertex.names",pat_blk_mod$plabels)]
#plot network using "role" to color nodes
GGally::ggnet2(patient.stat,
               node.color="role", 
               node.size=sna::degree(patient.stat, gmode="graph"),
               node.alpha = .5)
```

## PROVIDER

```{r}
provider_matrix <- as.matrix(as_adjacency_matrix(projected_graph$proj2))
library(intergraph)
detach("package:igraph")
library(statnet)
provider.stat <- asNetwork(projected_graph$proj2)

provider.se <- equiv.clust(provider_matrix,
 equiv.fun = "sedist",
 method = "hamming",
 mode = "graph",
 cluster.method = "complete")
```

```{r}
blk_model.provider.org <- blockmodel(provider_matrix,
 provider.se, k = 6)
```

```{r}
prov_blks6 <- readRDS("prov_blks6_results.rds")
```

```{r}
# blockmodel with optimized partition
prov_blk_mod <- blockmodel(provider_matrix, prov_blks6$best$best1$clu,
                      plabels = rownames(provider_matrix))
```



```{r}
#assign block membership to vertex attribute
provider.stat%v%"role"<-prov_blk_mod$block.membership[match(provider.stat%v%"vertex.names",prov_blk_mod$plabels)]

#plot network using "role" to color nodes
GGally::ggnet2(provider.stat,
               node.color="role", 
               node.size=sna::degree(provider.stat, gmode="graph"),
               node.alpha = .5) + ggtitle("Provider 6 Block Model Network")
```

```{r}
GGally::ggnet2(provider.stat,
               node.color=pro_attr$block, 
               node.size=sna::degree(provider.stat, gmode="graph"),
               node.alpha = .5) + ggtitle("Provider 6 Block Model Network")
```
```{r}
attributes <- dumpAttr(provider.stat)
# Extracting roles and vertex names
roles <- attributes$vertex$role
vertex_names <- attributes$vertex$vertex.names

# Creating a dataframe
role_vertex_df <- data.frame(vertex.names = vertex_names, role = roles)

# Displaying the first few rows of the dataframe

head(role_vertex_df %>%
  arrange(desc(vertex.names)))

head(pro_attr %>%
  arrange(desc(NAME)))
```

```{r}
# Extracting vertex attributes
vertex_data <- data.frame(
  role = get.vertex.attribute(provider.stat, "role"),
  vertex.names = get.vertex.attribute(provider.stat, "vertex.names")
)

# Displaying the first few rows of the dataframe
head(vertex_data)

```

## Create New Attribute Lists

```{r}
pat_attr_list <- do.call(list, pat_attr)
pro_attr_list <- do.call(list, pro_attr)
both_attr <- bind_rows(pat_attr, pro_attr)
attribute_list <- do.call(list, both_attr)
```

```{r}
provider.st <- network(provider_matrix,
                       directed = FALSE,
                       matrix.type = "adjacency",
                       vertex.attr = pro_attr_list)
provider.st
```

```{r}
library(igraph)
provider_graph <- graph_from_biadjacency_matrix(provider.st)

```

```{r}
#assign colors
#colors <-  c("yellow", "blue", "green", "orange", "red", "purple")
#vertex_colors <- colors[pro_attr_list$block]
vertex_colors <- ifelse(pro_attr_list$CITY == "boston", "red", "white")

vertex_shape <- ifelse(pro_attr_list$CITY == "boston", "circle", "square")
```

```{r}
plot(provider_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 4, 
     vertex.color = vertex_colors,
     vertex.shape = vertex_shape,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "SN Graph")
```

What other cities are on the provider list. Boston is not being properly represented, I have a feeling


```{r}
Boston_Neighborhoods <- c(
  "ALLSTON",
  "BRIGHTON",
  "BOSTON",
  "CHARLESTOWN",
  "DORCHESTER",
  "HYDE PARK",
  "JAMAICA PLAIN",
  "MATTAPAN",
  "ROSLINDALE",
  "ROXBURY",
  "West Roxbury",
  "WEST ROXBURY"
)
Boston_Neighborhoods <- tolower(Boston_Neighborhoods)

```

```{r}
#assign colors
#colors <-  c("yellow", "blue", "green", "orange", "red", "purple")
#vertex_colors <- colors[pro_attr_list$block]
vertex_colors <- ifelse(pro_attr$CITY %in% Boston_Neighborhoods, "red", "white")
vertex_shape <- ifelse(pro_attr$block == "2", "circle", "square")
#vertex_shape <- ifelse(pro_attr_list$CITY == "BOSTON", "circle", "square")
```

```{r}
plot(provider_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 4, 
     vertex.color = vertex_colors,
     vertex.shape = vertex_shape,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Providers - RED = BOSTON")
```
```{r}
#assign colors
colors <-  c("yellow", "blue", "green", "orange", "red", "purple")
vertex_colors <- ifelse(pro_attr$block == 2 , "red", "white")

vertex_colors <- colors[pro_attr$block]
#vertex_shape <- ifelse(pro_attr$CITY %in% Boston_Neighborhoods, "circle", "square")

```

```{r}
plot(provider_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 4, 
     vertex.color = vertex_colors,
     #vertex.shape = vertex_shape,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Providers - Blocks???")
```


So... it's not Boston related.

How about Highest populations

```{r}
largest_pop <- c(
"Boston",
"Worcester",
"Springfield",
"Cambridge",
"Lowell",
"Brockton",
"Quincy",
"Lynn",
"New Bedford",
"Fall River",
"Lawrence",
"Newton",
"Somerville",
"Framingham",
"Haverhill")
largest_pop <- tolower(largest_pop)
```

```{r}
#assign colors
#colors <-  c("yellow", "blue", "green", "orange", "red", "purple")
#vertex_colors <- colors[pro_attr_list$block]
vertex_colors <- ifelse(pro_attr_list$CITY %in% largest_pop, "red", "white")
vertex_shape <- ifelse(pro_attr_list$block == "6", "circle", "square")
#vertex_shape <- ifelse(pro_attr_list$CITY == "BOSTON", "circle", "square")
```

```{r}
plot(provider_graph, 
     layout = layout.fruchterman.reingold, 
     vertex.label.dist = 2, 
     vertex.size = 4, 
     vertex.color = vertex_colors,
     vertex.shape = vertex_shape,
     edge.label = NA,
     vertex.label = NA,
     vertex.label.cex = 0.2, 
     main = "Providers - RED = Largest Cities")
```

```{r}
block1 <- pro_attr %>%
  filter(block == 1)
block1
```
Block 1 is right outside of Boston
```{r}
block2 <- pro_attr %>%
  filter(block == 2)
block2
```
Block 2, only one provider, Fitchburg.

```{r}
block3 <- pro_attr %>%
  filter(block == 3)
block3
```
Block 3 is everywhere.


```{r}
block4 <- pro_attr %>%
  filter(block == 4)
block4
```
Block 4 is Heavy Waltham representation
```{r}
block5 <- pro_attr %>%
  filter(block == 5)
block5
```
Block 5 is a bit of everyone


```{r}
block6 <- pro_attr %>%
  filter(block == 6)
block6
```
Block 6 is Northshore.

```{r}
Ted955 <- encounters_cleaned %>% 
    filter(PROVIDER == "Ted955 Reilly981") %>% 
    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%
  summarize(COUNT = n()) 
Ted955%>%
  arrange(desc(COUNT))
```

Gonna go ahead and say Ted's a Cardiologist

Maybe there are other doctors that are in block one that are also cardiologists?

```{r}
Barbara209 <- encounters_cleaned %>% 
    filter(PROVIDER == "Barbara209 Maldonado119") %>% 
    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%
  summarize(COUNT = n()) 
Barbara209 %>%
  arrange(desc(COUNT))
```

```{r}
Gisele901 <- encounters_cleaned %>% 
    filter(PROVIDER == "Gisele901 Lehner980") %>% 
    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%
  summarize(COUNT = n()) 
Gisele901 %>%
  arrange(desc(COUNT))
```

```{r}
encounters_reasons <- encounters_cleaned %>% 
    group_by(PROVIDER, CITY.x, REASONDESCRIPTION)%>%
    summarize(COUNT = n()) 
encounters_reasons %>%
  arrange(desc(COUNT))
```

```{r}
Alvin56 <- encounters_cleaned %>% 
    filter(PROVIDER == "Alvin56 Crona259") %>% 
    group_by(PROVIDER, PATIENT, CITY.x, REASONDESCRIPTION)%>%
  summarize(COUNT = n()) 
Alvin56 %>%
  arrange(desc(COUNT))
```

```{r}
Margart214 <- encounters_cleaned %>% 
    filter(PROVIDER == "Margart214 Bogisich202") %>% 
    group_by(PROVIDER, PATIENT, CITY.x, REASONDESCRIPTION)%>%
  summarize(COUNT = n()) 
Margart214 %>%
  arrange(desc(COUNT))
```
